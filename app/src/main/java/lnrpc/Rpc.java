// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package lnrpc;

public final class Rpc {
  private Rpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   ** 
   *`AddressType` has to be one of:
   *- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
   *- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
   * </pre>
   *
   * Protobuf enum {@code lnrpc.AddressType}
   */
  public enum AddressType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>WITNESS_PUBKEY_HASH = 0;</code>
     */
    WITNESS_PUBKEY_HASH(0),
    /**
     * <code>NESTED_PUBKEY_HASH = 1;</code>
     */
    NESTED_PUBKEY_HASH(1),
    /**
     * <code>UNUSED_WITNESS_PUBKEY_HASH = 2;</code>
     */
    UNUSED_WITNESS_PUBKEY_HASH(2),
    /**
     * <code>UNUSED_NESTED_PUBKEY_HASH = 3;</code>
     */
    UNUSED_NESTED_PUBKEY_HASH(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>WITNESS_PUBKEY_HASH = 0;</code>
     */
    public static final int WITNESS_PUBKEY_HASH_VALUE = 0;
    /**
     * <code>NESTED_PUBKEY_HASH = 1;</code>
     */
    public static final int NESTED_PUBKEY_HASH_VALUE = 1;
    /**
     * <code>UNUSED_WITNESS_PUBKEY_HASH = 2;</code>
     */
    public static final int UNUSED_WITNESS_PUBKEY_HASH_VALUE = 2;
    /**
     * <code>UNUSED_NESTED_PUBKEY_HASH = 3;</code>
     */
    public static final int UNUSED_NESTED_PUBKEY_HASH_VALUE = 3;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AddressType valueOf(int value) {
      return forNumber(value);
    }

    public static AddressType forNumber(int value) {
      switch (value) {
        case 0: return WITNESS_PUBKEY_HASH;
        case 1: return NESTED_PUBKEY_HASH;
        case 2: return UNUSED_WITNESS_PUBKEY_HASH;
        case 3: return UNUSED_NESTED_PUBKEY_HASH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AddressType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        AddressType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AddressType>() {
            public AddressType findValueByNumber(int number) {
              return AddressType.forNumber(number);
            }
          };

    private final int value;

    private AddressType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:lnrpc.AddressType)
  }

  public interface GenSeedRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GenSeedRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 1;</code>
     */
    com.google.protobuf.ByteString getAezeedPassphrase();

    /**
     * <pre>
     **
     *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
     *specified, then a fresh set of randomness will be used to create the seed.
     * </pre>
     *
     * <code>optional bytes seed_entropy = 2;</code>
     */
    com.google.protobuf.ByteString getSeedEntropy();
  }
  /**
   * Protobuf type {@code lnrpc.GenSeedRequest}
   */
  public  static final class GenSeedRequest extends
      com.google.protobuf.GeneratedMessageLite<
          GenSeedRequest, GenSeedRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GenSeedRequest)
      GenSeedRequestOrBuilder {
    private GenSeedRequest() {
      aezeedPassphrase_ = com.google.protobuf.ByteString.EMPTY;
      seedEntropy_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int AEZEED_PASSPHRASE_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString aezeedPassphrase_;
    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 1;</code>
     */
    public com.google.protobuf.ByteString getAezeedPassphrase() {
      return aezeedPassphrase_;
    }
    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 1;</code>
     */
    private void setAezeedPassphrase(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      aezeedPassphrase_ = value;
    }
    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 1;</code>
     */
    private void clearAezeedPassphrase() {
      
      aezeedPassphrase_ = getDefaultInstance().getAezeedPassphrase();
    }

    public static final int SEED_ENTROPY_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString seedEntropy_;
    /**
     * <pre>
     **
     *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
     *specified, then a fresh set of randomness will be used to create the seed.
     * </pre>
     *
     * <code>optional bytes seed_entropy = 2;</code>
     */
    public com.google.protobuf.ByteString getSeedEntropy() {
      return seedEntropy_;
    }
    /**
     * <pre>
     **
     *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
     *specified, then a fresh set of randomness will be used to create the seed.
     * </pre>
     *
     * <code>optional bytes seed_entropy = 2;</code>
     */
    private void setSeedEntropy(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      seedEntropy_ = value;
    }
    /**
     * <pre>
     **
     *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
     *specified, then a fresh set of randomness will be used to create the seed.
     * </pre>
     *
     * <code>optional bytes seed_entropy = 2;</code>
     */
    private void clearSeedEntropy() {
      
      seedEntropy_ = getDefaultInstance().getSeedEntropy();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!aezeedPassphrase_.isEmpty()) {
        output.writeBytes(1, aezeedPassphrase_);
      }
      if (!seedEntropy_.isEmpty()) {
        output.writeBytes(2, seedEntropy_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!aezeedPassphrase_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, aezeedPassphrase_);
      }
      if (!seedEntropy_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, seedEntropy_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GenSeedRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GenSeedRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GenSeedRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GenSeedRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GenSeedRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GenSeedRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GenSeedRequest)
        lnrpc.Rpc.GenSeedRequestOrBuilder {
      // Construct using lnrpc.Rpc.GenSeedRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *aezeed_passphrase is an optional user provided passphrase that will be used
       *to encrypt the generated aezeed cipher seed.
       * </pre>
       *
       * <code>optional bytes aezeed_passphrase = 1;</code>
       */
      public com.google.protobuf.ByteString getAezeedPassphrase() {
        return instance.getAezeedPassphrase();
      }
      /**
       * <pre>
       **
       *aezeed_passphrase is an optional user provided passphrase that will be used
       *to encrypt the generated aezeed cipher seed.
       * </pre>
       *
       * <code>optional bytes aezeed_passphrase = 1;</code>
       */
      public Builder setAezeedPassphrase(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAezeedPassphrase(value);
        return this;
      }
      /**
       * <pre>
       **
       *aezeed_passphrase is an optional user provided passphrase that will be used
       *to encrypt the generated aezeed cipher seed.
       * </pre>
       *
       * <code>optional bytes aezeed_passphrase = 1;</code>
       */
      public Builder clearAezeedPassphrase() {
        copyOnWrite();
        instance.clearAezeedPassphrase();
        return this;
      }

      /**
       * <pre>
       **
       *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
       *specified, then a fresh set of randomness will be used to create the seed.
       * </pre>
       *
       * <code>optional bytes seed_entropy = 2;</code>
       */
      public com.google.protobuf.ByteString getSeedEntropy() {
        return instance.getSeedEntropy();
      }
      /**
       * <pre>
       **
       *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
       *specified, then a fresh set of randomness will be used to create the seed.
       * </pre>
       *
       * <code>optional bytes seed_entropy = 2;</code>
       */
      public Builder setSeedEntropy(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSeedEntropy(value);
        return this;
      }
      /**
       * <pre>
       **
       *seed_entropy is an optional 16-bytes generated via CSPRNG. If not
       *specified, then a fresh set of randomness will be used to create the seed.
       * </pre>
       *
       * <code>optional bytes seed_entropy = 2;</code>
       */
      public Builder clearSeedEntropy() {
        copyOnWrite();
        instance.clearSeedEntropy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.GenSeedRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GenSeedRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GenSeedRequest other = (lnrpc.Rpc.GenSeedRequest) arg1;
          aezeedPassphrase_ = visitor.visitByteString(aezeedPassphrase_ != com.google.protobuf.ByteString.EMPTY, aezeedPassphrase_,
              other.aezeedPassphrase_ != com.google.protobuf.ByteString.EMPTY, other.aezeedPassphrase_);
          seedEntropy_ = visitor.visitByteString(seedEntropy_ != com.google.protobuf.ByteString.EMPTY, seedEntropy_,
              other.seedEntropy_ != com.google.protobuf.ByteString.EMPTY, other.seedEntropy_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  aezeedPassphrase_ = input.readBytes();
                  break;
                }
                case 18: {

                  seedEntropy_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GenSeedRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GenSeedRequest)
    private static final lnrpc.Rpc.GenSeedRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GenSeedRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GenSeedRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GenSeedRequest> PARSER;

    public static com.google.protobuf.Parser<GenSeedRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GenSeedResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GenSeedResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    java.util.List<String>
        getCipherSeedMnemonicList();
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    int getCipherSeedMnemonicCount();
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    java.lang.String getCipherSeedMnemonic(int index);
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    com.google.protobuf.ByteString
        getCipherSeedMnemonicBytes(int index);

    /**
     * <pre>
     **
     *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
     *cipher text before run through our mnemonic encoding scheme.
     * </pre>
     *
     * <code>optional bytes enciphered_seed = 2;</code>
     */
    com.google.protobuf.ByteString getEncipheredSeed();
  }
  /**
   * Protobuf type {@code lnrpc.GenSeedResponse}
   */
  public  static final class GenSeedResponse extends
      com.google.protobuf.GeneratedMessageLite<
          GenSeedResponse, GenSeedResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GenSeedResponse)
      GenSeedResponseOrBuilder {
    private GenSeedResponse() {
      cipherSeedMnemonic_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      encipheredSeed_ = com.google.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    public static final int CIPHER_SEED_MNEMONIC_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<String> cipherSeedMnemonic_;
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    public java.util.List<String> getCipherSeedMnemonicList() {
      return cipherSeedMnemonic_;
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    public int getCipherSeedMnemonicCount() {
      return cipherSeedMnemonic_.size();
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    public java.lang.String getCipherSeedMnemonic(int index) {
      return cipherSeedMnemonic_.get(index);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCipherSeedMnemonicBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          cipherSeedMnemonic_.get(index));
    }
    private void ensureCipherSeedMnemonicIsMutable() {
      if (!cipherSeedMnemonic_.isModifiable()) {
        cipherSeedMnemonic_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(cipherSeedMnemonic_);
       }
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    private void setCipherSeedMnemonic(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSeedMnemonicIsMutable();
      cipherSeedMnemonic_.set(index, value);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    private void addCipherSeedMnemonic(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSeedMnemonicIsMutable();
      cipherSeedMnemonic_.add(value);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    private void addAllCipherSeedMnemonic(
        java.lang.Iterable<java.lang.String> values) {
      ensureCipherSeedMnemonicIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, cipherSeedMnemonic_);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    private void clearCipherSeedMnemonic() {
      cipherSeedMnemonic_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This field is optional, as if not
     *provided, then the daemon will generate a new cipher seed for the user.
     *Otherwise, then the daemon will attempt to recover the wallet state linked
     *to this cipher seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 1;</code>
     */
    private void addCipherSeedMnemonicBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCipherSeedMnemonicIsMutable();
      cipherSeedMnemonic_.add(value.toStringUtf8());
    }

    public static final int ENCIPHERED_SEED_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString encipheredSeed_;
    /**
     * <pre>
     **
     *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
     *cipher text before run through our mnemonic encoding scheme.
     * </pre>
     *
     * <code>optional bytes enciphered_seed = 2;</code>
     */
    public com.google.protobuf.ByteString getEncipheredSeed() {
      return encipheredSeed_;
    }
    /**
     * <pre>
     **
     *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
     *cipher text before run through our mnemonic encoding scheme.
     * </pre>
     *
     * <code>optional bytes enciphered_seed = 2;</code>
     */
    private void setEncipheredSeed(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      encipheredSeed_ = value;
    }
    /**
     * <pre>
     **
     *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
     *cipher text before run through our mnemonic encoding scheme.
     * </pre>
     *
     * <code>optional bytes enciphered_seed = 2;</code>
     */
    private void clearEncipheredSeed() {
      
      encipheredSeed_ = getDefaultInstance().getEncipheredSeed();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < cipherSeedMnemonic_.size(); i++) {
        output.writeString(1, cipherSeedMnemonic_.get(i));
      }
      if (!encipheredSeed_.isEmpty()) {
        output.writeBytes(2, encipheredSeed_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < cipherSeedMnemonic_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(cipherSeedMnemonic_.get(i));
        }
        size += dataSize;
        size += 1 * getCipherSeedMnemonicList().size();
      }
      if (!encipheredSeed_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, encipheredSeed_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GenSeedResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GenSeedResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GenSeedResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GenSeedResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GenSeedResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GenSeedResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GenSeedResponse)
        lnrpc.Rpc.GenSeedResponseOrBuilder {
      // Construct using lnrpc.Rpc.GenSeedResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public java.util.List<String>
          getCipherSeedMnemonicList() {
        return java.util.Collections.unmodifiableList(
            instance.getCipherSeedMnemonicList());
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public int getCipherSeedMnemonicCount() {
        return instance.getCipherSeedMnemonicCount();
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public java.lang.String getCipherSeedMnemonic(int index) {
        return instance.getCipherSeedMnemonic(index);
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public com.google.protobuf.ByteString
          getCipherSeedMnemonicBytes(int index) {
        return instance.getCipherSeedMnemonicBytes(index);
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public Builder setCipherSeedMnemonic(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setCipherSeedMnemonic(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public Builder addCipherSeedMnemonic(
          java.lang.String value) {
        copyOnWrite();
        instance.addCipherSeedMnemonic(value);
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public Builder addAllCipherSeedMnemonic(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllCipherSeedMnemonic(values);
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public Builder clearCipherSeedMnemonic() {
        copyOnWrite();
        instance.clearCipherSeedMnemonic();
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This field is optional, as if not
       *provided, then the daemon will generate a new cipher seed for the user.
       *Otherwise, then the daemon will attempt to recover the wallet state linked
       *to this cipher seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 1;</code>
       */
      public Builder addCipherSeedMnemonicBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addCipherSeedMnemonicBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
       *cipher text before run through our mnemonic encoding scheme.
       * </pre>
       *
       * <code>optional bytes enciphered_seed = 2;</code>
       */
      public com.google.protobuf.ByteString getEncipheredSeed() {
        return instance.getEncipheredSeed();
      }
      /**
       * <pre>
       **
       *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
       *cipher text before run through our mnemonic encoding scheme.
       * </pre>
       *
       * <code>optional bytes enciphered_seed = 2;</code>
       */
      public Builder setEncipheredSeed(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setEncipheredSeed(value);
        return this;
      }
      /**
       * <pre>
       **
       *enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
       *cipher text before run through our mnemonic encoding scheme.
       * </pre>
       *
       * <code>optional bytes enciphered_seed = 2;</code>
       */
      public Builder clearEncipheredSeed() {
        copyOnWrite();
        instance.clearEncipheredSeed();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.GenSeedResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GenSeedResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          cipherSeedMnemonic_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GenSeedResponse other = (lnrpc.Rpc.GenSeedResponse) arg1;
          cipherSeedMnemonic_= visitor.visitList(cipherSeedMnemonic_, other.cipherSeedMnemonic_);
          encipheredSeed_ = visitor.visitByteString(encipheredSeed_ != com.google.protobuf.ByteString.EMPTY, encipheredSeed_,
              other.encipheredSeed_ != com.google.protobuf.ByteString.EMPTY, other.encipheredSeed_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();
                  if (!cipherSeedMnemonic_.isModifiable()) {
                    cipherSeedMnemonic_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(cipherSeedMnemonic_);
                  }
                  cipherSeedMnemonic_.add(s);
                  break;
                }
                case 18: {

                  encipheredSeed_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GenSeedResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GenSeedResponse)
    private static final lnrpc.Rpc.GenSeedResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GenSeedResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GenSeedResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GenSeedResponse> PARSER;

    public static com.google.protobuf.Parser<GenSeedResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InitWalletRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.InitWalletRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *wallet_password is the passphrase that should be used to encrypt the
     *wallet. This MUST be at least 8 chars in length. After creation, this
     *password is required to unlock the daemon.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    com.google.protobuf.ByteString getWalletPassword();

    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    java.util.List<String>
        getCipherSeedMnemonicList();
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    int getCipherSeedMnemonicCount();
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    java.lang.String getCipherSeedMnemonic(int index);
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    com.google.protobuf.ByteString
        getCipherSeedMnemonicBytes(int index);

    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 3;</code>
     */
    com.google.protobuf.ByteString getAezeedPassphrase();

    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 4;</code>
     */
    int getRecoveryWindow();
  }
  /**
   * Protobuf type {@code lnrpc.InitWalletRequest}
   */
  public  static final class InitWalletRequest extends
      com.google.protobuf.GeneratedMessageLite<
          InitWalletRequest, InitWalletRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.InitWalletRequest)
      InitWalletRequestOrBuilder {
    private InitWalletRequest() {
      walletPassword_ = com.google.protobuf.ByteString.EMPTY;
      cipherSeedMnemonic_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      aezeedPassphrase_ = com.google.protobuf.ByteString.EMPTY;
    }
    private int bitField0_;
    public static final int WALLET_PASSWORD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString walletPassword_;
    /**
     * <pre>
     **
     *wallet_password is the passphrase that should be used to encrypt the
     *wallet. This MUST be at least 8 chars in length. After creation, this
     *password is required to unlock the daemon.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    public com.google.protobuf.ByteString getWalletPassword() {
      return walletPassword_;
    }
    /**
     * <pre>
     **
     *wallet_password is the passphrase that should be used to encrypt the
     *wallet. This MUST be at least 8 chars in length. After creation, this
     *password is required to unlock the daemon.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    private void setWalletPassword(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      walletPassword_ = value;
    }
    /**
     * <pre>
     **
     *wallet_password is the passphrase that should be used to encrypt the
     *wallet. This MUST be at least 8 chars in length. After creation, this
     *password is required to unlock the daemon.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    private void clearWalletPassword() {
      
      walletPassword_ = getDefaultInstance().getWalletPassword();
    }

    public static final int CIPHER_SEED_MNEMONIC_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<String> cipherSeedMnemonic_;
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    public java.util.List<String> getCipherSeedMnemonicList() {
      return cipherSeedMnemonic_;
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    public int getCipherSeedMnemonicCount() {
      return cipherSeedMnemonic_.size();
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    public java.lang.String getCipherSeedMnemonic(int index) {
      return cipherSeedMnemonic_.get(index);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    public com.google.protobuf.ByteString
        getCipherSeedMnemonicBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          cipherSeedMnemonic_.get(index));
    }
    private void ensureCipherSeedMnemonicIsMutable() {
      if (!cipherSeedMnemonic_.isModifiable()) {
        cipherSeedMnemonic_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(cipherSeedMnemonic_);
       }
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    private void setCipherSeedMnemonic(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSeedMnemonicIsMutable();
      cipherSeedMnemonic_.set(index, value);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    private void addCipherSeedMnemonic(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCipherSeedMnemonicIsMutable();
      cipherSeedMnemonic_.add(value);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    private void addAllCipherSeedMnemonic(
        java.lang.Iterable<java.lang.String> values) {
      ensureCipherSeedMnemonicIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, cipherSeedMnemonic_);
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    private void clearCipherSeedMnemonic() {
      cipherSeedMnemonic_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     **
     *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
     *cipher seed obtained by the user. This may have been generated by the
     *GenSeed method, or be an existing seed.
     * </pre>
     *
     * <code>repeated string cipher_seed_mnemonic = 2;</code>
     */
    private void addCipherSeedMnemonicBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCipherSeedMnemonicIsMutable();
      cipherSeedMnemonic_.add(value.toStringUtf8());
    }

    public static final int AEZEED_PASSPHRASE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString aezeedPassphrase_;
    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 3;</code>
     */
    public com.google.protobuf.ByteString getAezeedPassphrase() {
      return aezeedPassphrase_;
    }
    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 3;</code>
     */
    private void setAezeedPassphrase(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      aezeedPassphrase_ = value;
    }
    /**
     * <pre>
     **
     *aezeed_passphrase is an optional user provided passphrase that will be used
     *to encrypt the generated aezeed cipher seed.
     * </pre>
     *
     * <code>optional bytes aezeed_passphrase = 3;</code>
     */
    private void clearAezeedPassphrase() {
      
      aezeedPassphrase_ = getDefaultInstance().getAezeedPassphrase();
    }

    public static final int RECOVERY_WINDOW_FIELD_NUMBER = 4;
    private int recoveryWindow_;
    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 4;</code>
     */
    public int getRecoveryWindow() {
      return recoveryWindow_;
    }
    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 4;</code>
     */
    private void setRecoveryWindow(int value) {
      
      recoveryWindow_ = value;
    }
    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 4;</code>
     */
    private void clearRecoveryWindow() {
      
      recoveryWindow_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!walletPassword_.isEmpty()) {
        output.writeBytes(1, walletPassword_);
      }
      for (int i = 0; i < cipherSeedMnemonic_.size(); i++) {
        output.writeString(2, cipherSeedMnemonic_.get(i));
      }
      if (!aezeedPassphrase_.isEmpty()) {
        output.writeBytes(3, aezeedPassphrase_);
      }
      if (recoveryWindow_ != 0) {
        output.writeInt32(4, recoveryWindow_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!walletPassword_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, walletPassword_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cipherSeedMnemonic_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(cipherSeedMnemonic_.get(i));
        }
        size += dataSize;
        size += 1 * getCipherSeedMnemonicList().size();
      }
      if (!aezeedPassphrase_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, aezeedPassphrase_);
      }
      if (recoveryWindow_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, recoveryWindow_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.InitWalletRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InitWalletRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InitWalletRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.InitWalletRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.InitWalletRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.InitWalletRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.InitWalletRequest)
        lnrpc.Rpc.InitWalletRequestOrBuilder {
      // Construct using lnrpc.Rpc.InitWalletRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *wallet_password is the passphrase that should be used to encrypt the
       *wallet. This MUST be at least 8 chars in length. After creation, this
       *password is required to unlock the daemon.
       * </pre>
       *
       * <code>optional bytes wallet_password = 1;</code>
       */
      public com.google.protobuf.ByteString getWalletPassword() {
        return instance.getWalletPassword();
      }
      /**
       * <pre>
       **
       *wallet_password is the passphrase that should be used to encrypt the
       *wallet. This MUST be at least 8 chars in length. After creation, this
       *password is required to unlock the daemon.
       * </pre>
       *
       * <code>optional bytes wallet_password = 1;</code>
       */
      public Builder setWalletPassword(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setWalletPassword(value);
        return this;
      }
      /**
       * <pre>
       **
       *wallet_password is the passphrase that should be used to encrypt the
       *wallet. This MUST be at least 8 chars in length. After creation, this
       *password is required to unlock the daemon.
       * </pre>
       *
       * <code>optional bytes wallet_password = 1;</code>
       */
      public Builder clearWalletPassword() {
        copyOnWrite();
        instance.clearWalletPassword();
        return this;
      }

      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public java.util.List<String>
          getCipherSeedMnemonicList() {
        return java.util.Collections.unmodifiableList(
            instance.getCipherSeedMnemonicList());
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public int getCipherSeedMnemonicCount() {
        return instance.getCipherSeedMnemonicCount();
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public java.lang.String getCipherSeedMnemonic(int index) {
        return instance.getCipherSeedMnemonic(index);
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public com.google.protobuf.ByteString
          getCipherSeedMnemonicBytes(int index) {
        return instance.getCipherSeedMnemonicBytes(index);
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public Builder setCipherSeedMnemonic(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setCipherSeedMnemonic(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public Builder addCipherSeedMnemonic(
          java.lang.String value) {
        copyOnWrite();
        instance.addCipherSeedMnemonic(value);
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public Builder addAllCipherSeedMnemonic(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllCipherSeedMnemonic(values);
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public Builder clearCipherSeedMnemonic() {
        copyOnWrite();
        instance.clearCipherSeedMnemonic();
        return this;
      }
      /**
       * <pre>
       **
       *cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
       *cipher seed obtained by the user. This may have been generated by the
       *GenSeed method, or be an existing seed.
       * </pre>
       *
       * <code>repeated string cipher_seed_mnemonic = 2;</code>
       */
      public Builder addCipherSeedMnemonicBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addCipherSeedMnemonicBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *aezeed_passphrase is an optional user provided passphrase that will be used
       *to encrypt the generated aezeed cipher seed.
       * </pre>
       *
       * <code>optional bytes aezeed_passphrase = 3;</code>
       */
      public com.google.protobuf.ByteString getAezeedPassphrase() {
        return instance.getAezeedPassphrase();
      }
      /**
       * <pre>
       **
       *aezeed_passphrase is an optional user provided passphrase that will be used
       *to encrypt the generated aezeed cipher seed.
       * </pre>
       *
       * <code>optional bytes aezeed_passphrase = 3;</code>
       */
      public Builder setAezeedPassphrase(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAezeedPassphrase(value);
        return this;
      }
      /**
       * <pre>
       **
       *aezeed_passphrase is an optional user provided passphrase that will be used
       *to encrypt the generated aezeed cipher seed.
       * </pre>
       *
       * <code>optional bytes aezeed_passphrase = 3;</code>
       */
      public Builder clearAezeedPassphrase() {
        copyOnWrite();
        instance.clearAezeedPassphrase();
        return this;
      }

      /**
       * <pre>
       **
       *recovery_window is an optional argument specifying the address lookahead
       *when restoring a wallet seed. The recovery window applies to each
       *invdividual branch of the BIP44 derivation paths. Supplying a recovery
       *window of zero indicates that no addresses should be recovered, such after
       *the first initialization of the wallet.
       * </pre>
       *
       * <code>optional int32 recovery_window = 4;</code>
       */
      public int getRecoveryWindow() {
        return instance.getRecoveryWindow();
      }
      /**
       * <pre>
       **
       *recovery_window is an optional argument specifying the address lookahead
       *when restoring a wallet seed. The recovery window applies to each
       *invdividual branch of the BIP44 derivation paths. Supplying a recovery
       *window of zero indicates that no addresses should be recovered, such after
       *the first initialization of the wallet.
       * </pre>
       *
       * <code>optional int32 recovery_window = 4;</code>
       */
      public Builder setRecoveryWindow(int value) {
        copyOnWrite();
        instance.setRecoveryWindow(value);
        return this;
      }
      /**
       * <pre>
       **
       *recovery_window is an optional argument specifying the address lookahead
       *when restoring a wallet seed. The recovery window applies to each
       *invdividual branch of the BIP44 derivation paths. Supplying a recovery
       *window of zero indicates that no addresses should be recovered, such after
       *the first initialization of the wallet.
       * </pre>
       *
       * <code>optional int32 recovery_window = 4;</code>
       */
      public Builder clearRecoveryWindow() {
        copyOnWrite();
        instance.clearRecoveryWindow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.InitWalletRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.InitWalletRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          cipherSeedMnemonic_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.InitWalletRequest other = (lnrpc.Rpc.InitWalletRequest) arg1;
          walletPassword_ = visitor.visitByteString(walletPassword_ != com.google.protobuf.ByteString.EMPTY, walletPassword_,
              other.walletPassword_ != com.google.protobuf.ByteString.EMPTY, other.walletPassword_);
          cipherSeedMnemonic_= visitor.visitList(cipherSeedMnemonic_, other.cipherSeedMnemonic_);
          aezeedPassphrase_ = visitor.visitByteString(aezeedPassphrase_ != com.google.protobuf.ByteString.EMPTY, aezeedPassphrase_,
              other.aezeedPassphrase_ != com.google.protobuf.ByteString.EMPTY, other.aezeedPassphrase_);
          recoveryWindow_ = visitor.visitInt(recoveryWindow_ != 0, recoveryWindow_,
              other.recoveryWindow_ != 0, other.recoveryWindow_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  walletPassword_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();
                  if (!cipherSeedMnemonic_.isModifiable()) {
                    cipherSeedMnemonic_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(cipherSeedMnemonic_);
                  }
                  cipherSeedMnemonic_.add(s);
                  break;
                }
                case 26: {

                  aezeedPassphrase_ = input.readBytes();
                  break;
                }
                case 32: {

                  recoveryWindow_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.InitWalletRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.InitWalletRequest)
    private static final lnrpc.Rpc.InitWalletRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new InitWalletRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.InitWalletRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<InitWalletRequest> PARSER;

    public static com.google.protobuf.Parser<InitWalletRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InitWalletResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.InitWalletResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.InitWalletResponse}
   */
  public  static final class InitWalletResponse extends
      com.google.protobuf.GeneratedMessageLite<
          InitWalletResponse, InitWalletResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.InitWalletResponse)
      InitWalletResponseOrBuilder {
    private InitWalletResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.InitWalletResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InitWalletResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InitWalletResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.InitWalletResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.InitWalletResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.InitWalletResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.InitWalletResponse)
        lnrpc.Rpc.InitWalletResponseOrBuilder {
      // Construct using lnrpc.Rpc.InitWalletResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.InitWalletResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.InitWalletResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.InitWalletResponse other = (lnrpc.Rpc.InitWalletResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.InitWalletResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.InitWalletResponse)
    private static final lnrpc.Rpc.InitWalletResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new InitWalletResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.InitWalletResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<InitWalletResponse> PARSER;

    public static com.google.protobuf.Parser<InitWalletResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface UnlockWalletRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.UnlockWalletRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *wallet_password should be the current valid passphrase for the daemon. This
     *will be required to decrypt on-disk material that the daemon requires to
     *function properly.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    com.google.protobuf.ByteString getWalletPassword();

    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 2;</code>
     */
    int getRecoveryWindow();
  }
  /**
   * Protobuf type {@code lnrpc.UnlockWalletRequest}
   */
  public  static final class UnlockWalletRequest extends
      com.google.protobuf.GeneratedMessageLite<
          UnlockWalletRequest, UnlockWalletRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.UnlockWalletRequest)
      UnlockWalletRequestOrBuilder {
    private UnlockWalletRequest() {
      walletPassword_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int WALLET_PASSWORD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString walletPassword_;
    /**
     * <pre>
     **
     *wallet_password should be the current valid passphrase for the daemon. This
     *will be required to decrypt on-disk material that the daemon requires to
     *function properly.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    public com.google.protobuf.ByteString getWalletPassword() {
      return walletPassword_;
    }
    /**
     * <pre>
     **
     *wallet_password should be the current valid passphrase for the daemon. This
     *will be required to decrypt on-disk material that the daemon requires to
     *function properly.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    private void setWalletPassword(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      walletPassword_ = value;
    }
    /**
     * <pre>
     **
     *wallet_password should be the current valid passphrase for the daemon. This
     *will be required to decrypt on-disk material that the daemon requires to
     *function properly.
     * </pre>
     *
     * <code>optional bytes wallet_password = 1;</code>
     */
    private void clearWalletPassword() {
      
      walletPassword_ = getDefaultInstance().getWalletPassword();
    }

    public static final int RECOVERY_WINDOW_FIELD_NUMBER = 2;
    private int recoveryWindow_;
    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 2;</code>
     */
    public int getRecoveryWindow() {
      return recoveryWindow_;
    }
    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 2;</code>
     */
    private void setRecoveryWindow(int value) {
      
      recoveryWindow_ = value;
    }
    /**
     * <pre>
     **
     *recovery_window is an optional argument specifying the address lookahead
     *when restoring a wallet seed. The recovery window applies to each
     *invdividual branch of the BIP44 derivation paths. Supplying a recovery
     *window of zero indicates that no addresses should be recovered, such after
     *the first initialization of the wallet.
     * </pre>
     *
     * <code>optional int32 recovery_window = 2;</code>
     */
    private void clearRecoveryWindow() {
      
      recoveryWindow_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!walletPassword_.isEmpty()) {
        output.writeBytes(1, walletPassword_);
      }
      if (recoveryWindow_ != 0) {
        output.writeInt32(2, recoveryWindow_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!walletPassword_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, walletPassword_);
      }
      if (recoveryWindow_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, recoveryWindow_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.UnlockWalletRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.UnlockWalletRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.UnlockWalletRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.UnlockWalletRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.UnlockWalletRequest)
        lnrpc.Rpc.UnlockWalletRequestOrBuilder {
      // Construct using lnrpc.Rpc.UnlockWalletRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *wallet_password should be the current valid passphrase for the daemon. This
       *will be required to decrypt on-disk material that the daemon requires to
       *function properly.
       * </pre>
       *
       * <code>optional bytes wallet_password = 1;</code>
       */
      public com.google.protobuf.ByteString getWalletPassword() {
        return instance.getWalletPassword();
      }
      /**
       * <pre>
       **
       *wallet_password should be the current valid passphrase for the daemon. This
       *will be required to decrypt on-disk material that the daemon requires to
       *function properly.
       * </pre>
       *
       * <code>optional bytes wallet_password = 1;</code>
       */
      public Builder setWalletPassword(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setWalletPassword(value);
        return this;
      }
      /**
       * <pre>
       **
       *wallet_password should be the current valid passphrase for the daemon. This
       *will be required to decrypt on-disk material that the daemon requires to
       *function properly.
       * </pre>
       *
       * <code>optional bytes wallet_password = 1;</code>
       */
      public Builder clearWalletPassword() {
        copyOnWrite();
        instance.clearWalletPassword();
        return this;
      }

      /**
       * <pre>
       **
       *recovery_window is an optional argument specifying the address lookahead
       *when restoring a wallet seed. The recovery window applies to each
       *invdividual branch of the BIP44 derivation paths. Supplying a recovery
       *window of zero indicates that no addresses should be recovered, such after
       *the first initialization of the wallet.
       * </pre>
       *
       * <code>optional int32 recovery_window = 2;</code>
       */
      public int getRecoveryWindow() {
        return instance.getRecoveryWindow();
      }
      /**
       * <pre>
       **
       *recovery_window is an optional argument specifying the address lookahead
       *when restoring a wallet seed. The recovery window applies to each
       *invdividual branch of the BIP44 derivation paths. Supplying a recovery
       *window of zero indicates that no addresses should be recovered, such after
       *the first initialization of the wallet.
       * </pre>
       *
       * <code>optional int32 recovery_window = 2;</code>
       */
      public Builder setRecoveryWindow(int value) {
        copyOnWrite();
        instance.setRecoveryWindow(value);
        return this;
      }
      /**
       * <pre>
       **
       *recovery_window is an optional argument specifying the address lookahead
       *when restoring a wallet seed. The recovery window applies to each
       *invdividual branch of the BIP44 derivation paths. Supplying a recovery
       *window of zero indicates that no addresses should be recovered, such after
       *the first initialization of the wallet.
       * </pre>
       *
       * <code>optional int32 recovery_window = 2;</code>
       */
      public Builder clearRecoveryWindow() {
        copyOnWrite();
        instance.clearRecoveryWindow();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.UnlockWalletRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.UnlockWalletRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.UnlockWalletRequest other = (lnrpc.Rpc.UnlockWalletRequest) arg1;
          walletPassword_ = visitor.visitByteString(walletPassword_ != com.google.protobuf.ByteString.EMPTY, walletPassword_,
              other.walletPassword_ != com.google.protobuf.ByteString.EMPTY, other.walletPassword_);
          recoveryWindow_ = visitor.visitInt(recoveryWindow_ != 0, recoveryWindow_,
              other.recoveryWindow_ != 0, other.recoveryWindow_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  walletPassword_ = input.readBytes();
                  break;
                }
                case 16: {

                  recoveryWindow_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.UnlockWalletRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.UnlockWalletRequest)
    private static final lnrpc.Rpc.UnlockWalletRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new UnlockWalletRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.UnlockWalletRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<UnlockWalletRequest> PARSER;

    public static com.google.protobuf.Parser<UnlockWalletRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface UnlockWalletResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.UnlockWalletResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.UnlockWalletResponse}
   */
  public  static final class UnlockWalletResponse extends
      com.google.protobuf.GeneratedMessageLite<
          UnlockWalletResponse, UnlockWalletResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.UnlockWalletResponse)
      UnlockWalletResponseOrBuilder {
    private UnlockWalletResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.UnlockWalletResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.UnlockWalletResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.UnlockWalletResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.UnlockWalletResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.UnlockWalletResponse)
        lnrpc.Rpc.UnlockWalletResponseOrBuilder {
      // Construct using lnrpc.Rpc.UnlockWalletResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.UnlockWalletResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.UnlockWalletResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.UnlockWalletResponse other = (lnrpc.Rpc.UnlockWalletResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.UnlockWalletResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.UnlockWalletResponse)
    private static final lnrpc.Rpc.UnlockWalletResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new UnlockWalletResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.UnlockWalletResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<UnlockWalletResponse> PARSER;

    public static com.google.protobuf.Parser<UnlockWalletResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChangePasswordRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChangePasswordRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *current_password should be the current valid passphrase used to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes current_password = 1;</code>
     */
    com.google.protobuf.ByteString getCurrentPassword();

    /**
     * <pre>
     **
     *new_password should be the new passphrase that will be needed to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes new_password = 2;</code>
     */
    com.google.protobuf.ByteString getNewPassword();
  }
  /**
   * Protobuf type {@code lnrpc.ChangePasswordRequest}
   */
  public  static final class ChangePasswordRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ChangePasswordRequest, ChangePasswordRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChangePasswordRequest)
      ChangePasswordRequestOrBuilder {
    private ChangePasswordRequest() {
      currentPassword_ = com.google.protobuf.ByteString.EMPTY;
      newPassword_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int CURRENT_PASSWORD_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString currentPassword_;
    /**
     * <pre>
     **
     *current_password should be the current valid passphrase used to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes current_password = 1;</code>
     */
    public com.google.protobuf.ByteString getCurrentPassword() {
      return currentPassword_;
    }
    /**
     * <pre>
     **
     *current_password should be the current valid passphrase used to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes current_password = 1;</code>
     */
    private void setCurrentPassword(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      currentPassword_ = value;
    }
    /**
     * <pre>
     **
     *current_password should be the current valid passphrase used to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes current_password = 1;</code>
     */
    private void clearCurrentPassword() {
      
      currentPassword_ = getDefaultInstance().getCurrentPassword();
    }

    public static final int NEW_PASSWORD_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString newPassword_;
    /**
     * <pre>
     **
     *new_password should be the new passphrase that will be needed to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes new_password = 2;</code>
     */
    public com.google.protobuf.ByteString getNewPassword() {
      return newPassword_;
    }
    /**
     * <pre>
     **
     *new_password should be the new passphrase that will be needed to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes new_password = 2;</code>
     */
    private void setNewPassword(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      newPassword_ = value;
    }
    /**
     * <pre>
     **
     *new_password should be the new passphrase that will be needed to unlock the
     *daemon.
     * </pre>
     *
     * <code>optional bytes new_password = 2;</code>
     */
    private void clearNewPassword() {
      
      newPassword_ = getDefaultInstance().getNewPassword();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!currentPassword_.isEmpty()) {
        output.writeBytes(1, currentPassword_);
      }
      if (!newPassword_.isEmpty()) {
        output.writeBytes(2, newPassword_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!currentPassword_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, currentPassword_);
      }
      if (!newPassword_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, newPassword_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChangePasswordRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChangePasswordRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChangePasswordRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChangePasswordRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChangePasswordRequest)
        lnrpc.Rpc.ChangePasswordRequestOrBuilder {
      // Construct using lnrpc.Rpc.ChangePasswordRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *current_password should be the current valid passphrase used to unlock the
       *daemon.
       * </pre>
       *
       * <code>optional bytes current_password = 1;</code>
       */
      public com.google.protobuf.ByteString getCurrentPassword() {
        return instance.getCurrentPassword();
      }
      /**
       * <pre>
       **
       *current_password should be the current valid passphrase used to unlock the
       *daemon.
       * </pre>
       *
       * <code>optional bytes current_password = 1;</code>
       */
      public Builder setCurrentPassword(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCurrentPassword(value);
        return this;
      }
      /**
       * <pre>
       **
       *current_password should be the current valid passphrase used to unlock the
       *daemon.
       * </pre>
       *
       * <code>optional bytes current_password = 1;</code>
       */
      public Builder clearCurrentPassword() {
        copyOnWrite();
        instance.clearCurrentPassword();
        return this;
      }

      /**
       * <pre>
       **
       *new_password should be the new passphrase that will be needed to unlock the
       *daemon.
       * </pre>
       *
       * <code>optional bytes new_password = 2;</code>
       */
      public com.google.protobuf.ByteString getNewPassword() {
        return instance.getNewPassword();
      }
      /**
       * <pre>
       **
       *new_password should be the new passphrase that will be needed to unlock the
       *daemon.
       * </pre>
       *
       * <code>optional bytes new_password = 2;</code>
       */
      public Builder setNewPassword(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNewPassword(value);
        return this;
      }
      /**
       * <pre>
       **
       *new_password should be the new passphrase that will be needed to unlock the
       *daemon.
       * </pre>
       *
       * <code>optional bytes new_password = 2;</code>
       */
      public Builder clearNewPassword() {
        copyOnWrite();
        instance.clearNewPassword();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChangePasswordRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChangePasswordRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChangePasswordRequest other = (lnrpc.Rpc.ChangePasswordRequest) arg1;
          currentPassword_ = visitor.visitByteString(currentPassword_ != com.google.protobuf.ByteString.EMPTY, currentPassword_,
              other.currentPassword_ != com.google.protobuf.ByteString.EMPTY, other.currentPassword_);
          newPassword_ = visitor.visitByteString(newPassword_ != com.google.protobuf.ByteString.EMPTY, newPassword_,
              other.newPassword_ != com.google.protobuf.ByteString.EMPTY, other.newPassword_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  currentPassword_ = input.readBytes();
                  break;
                }
                case 18: {

                  newPassword_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChangePasswordRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChangePasswordRequest)
    private static final lnrpc.Rpc.ChangePasswordRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChangePasswordRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChangePasswordRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChangePasswordRequest> PARSER;

    public static com.google.protobuf.Parser<ChangePasswordRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChangePasswordResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChangePasswordResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.ChangePasswordResponse}
   */
  public  static final class ChangePasswordResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ChangePasswordResponse, ChangePasswordResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChangePasswordResponse)
      ChangePasswordResponseOrBuilder {
    private ChangePasswordResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChangePasswordResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChangePasswordResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChangePasswordResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChangePasswordResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChangePasswordResponse)
        lnrpc.Rpc.ChangePasswordResponseOrBuilder {
      // Construct using lnrpc.Rpc.ChangePasswordResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.ChangePasswordResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChangePasswordResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChangePasswordResponse other = (lnrpc.Rpc.ChangePasswordResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChangePasswordResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChangePasswordResponse)
    private static final lnrpc.Rpc.ChangePasswordResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChangePasswordResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChangePasswordResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChangePasswordResponse> PARSER;

    public static com.google.protobuf.Parser<ChangePasswordResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface UtxoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Utxo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    lnrpc.Rpc.AddressType getType();

    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    java.lang.String getAddress();
    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <pre>
     *&#47; The value of the unspent coin in satoshis
     * </pre>
     *
     * <code>optional int64 amount_sat = 3;</code>
     */
    long getAmountSat();

    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    java.lang.String getPkScript();
    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    com.google.protobuf.ByteString
        getPkScriptBytes();

    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    boolean hasOutpoint();
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    lnrpc.Rpc.OutPoint getOutpoint();

    /**
     * <pre>
     *&#47; The number of confirmations for the Utxo
     * </pre>
     *
     * <code>optional int64 confirmations = 6;</code>
     */
    long getConfirmations();
  }
  /**
   * Protobuf type {@code lnrpc.Utxo}
   */
  public  static final class Utxo extends
      com.google.protobuf.GeneratedMessageLite<
          Utxo, Utxo.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Utxo)
      UtxoOrBuilder {
    private Utxo() {
      address_ = "";
      pkScript_ = "";
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    public lnrpc.Rpc.AddressType getType() {
      lnrpc.Rpc.AddressType result = lnrpc.Rpc.AddressType.forNumber(type_);
      return result == null ? lnrpc.Rpc.AddressType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    private void setType(lnrpc.Rpc.AddressType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <pre>
     *&#47; The type of address
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int ADDRESS_FIELD_NUMBER = 2;
    private java.lang.String address_;
    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    public java.lang.String getAddress() {
      return address_;
    }
    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(address_);
    }
    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    private void setAddress(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      address_ = value;
    }
    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    private void clearAddress() {
      
      address_ = getDefaultInstance().getAddress();
    }
    /**
     * <pre>
     *&#47; The address
     * </pre>
     *
     * <code>optional string address = 2;</code>
     */
    private void setAddressBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      address_ = value.toStringUtf8();
    }

    public static final int AMOUNT_SAT_FIELD_NUMBER = 3;
    private long amountSat_;
    /**
     * <pre>
     *&#47; The value of the unspent coin in satoshis
     * </pre>
     *
     * <code>optional int64 amount_sat = 3;</code>
     */
    public long getAmountSat() {
      return amountSat_;
    }
    /**
     * <pre>
     *&#47; The value of the unspent coin in satoshis
     * </pre>
     *
     * <code>optional int64 amount_sat = 3;</code>
     */
    private void setAmountSat(long value) {
      
      amountSat_ = value;
    }
    /**
     * <pre>
     *&#47; The value of the unspent coin in satoshis
     * </pre>
     *
     * <code>optional int64 amount_sat = 3;</code>
     */
    private void clearAmountSat() {
      
      amountSat_ = 0L;
    }

    public static final int PK_SCRIPT_FIELD_NUMBER = 4;
    private java.lang.String pkScript_;
    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    public java.lang.String getPkScript() {
      return pkScript_;
    }
    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    public com.google.protobuf.ByteString
        getPkScriptBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pkScript_);
    }
    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    private void setPkScript(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pkScript_ = value;
    }
    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    private void clearPkScript() {
      
      pkScript_ = getDefaultInstance().getPkScript();
    }
    /**
     * <pre>
     *&#47; The pkscript in hex
     * </pre>
     *
     * <code>optional string pk_script = 4;</code>
     */
    private void setPkScriptBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pkScript_ = value.toStringUtf8();
    }

    public static final int OUTPOINT_FIELD_NUMBER = 5;
    private lnrpc.Rpc.OutPoint outpoint_;
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    public boolean hasOutpoint() {
      return outpoint_ != null;
    }
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    public lnrpc.Rpc.OutPoint getOutpoint() {
      return outpoint_ == null ? lnrpc.Rpc.OutPoint.getDefaultInstance() : outpoint_;
    }
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    private void setOutpoint(lnrpc.Rpc.OutPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      outpoint_ = value;
      
      }
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    private void setOutpoint(
        lnrpc.Rpc.OutPoint.Builder builderForValue) {
      outpoint_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    private void mergeOutpoint(lnrpc.Rpc.OutPoint value) {
      if (outpoint_ != null &&
          outpoint_ != lnrpc.Rpc.OutPoint.getDefaultInstance()) {
        outpoint_ =
          lnrpc.Rpc.OutPoint.newBuilder(outpoint_).mergeFrom(value).buildPartial();
      } else {
        outpoint_ = value;
      }
      
    }
    /**
     * <pre>
     *&#47; The outpoint in format txid:n
     * </pre>
     *
     * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
     */
    private void clearOutpoint() {  outpoint_ = null;
      
    }

    public static final int CONFIRMATIONS_FIELD_NUMBER = 6;
    private long confirmations_;
    /**
     * <pre>
     *&#47; The number of confirmations for the Utxo
     * </pre>
     *
     * <code>optional int64 confirmations = 6;</code>
     */
    public long getConfirmations() {
      return confirmations_;
    }
    /**
     * <pre>
     *&#47; The number of confirmations for the Utxo
     * </pre>
     *
     * <code>optional int64 confirmations = 6;</code>
     */
    private void setConfirmations(long value) {
      
      confirmations_ = value;
    }
    /**
     * <pre>
     *&#47; The number of confirmations for the Utxo
     * </pre>
     *
     * <code>optional int64 confirmations = 6;</code>
     */
    private void clearConfirmations() {
      
      confirmations_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != lnrpc.Rpc.AddressType.WITNESS_PUBKEY_HASH.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!address_.isEmpty()) {
        output.writeString(2, getAddress());
      }
      if (amountSat_ != 0L) {
        output.writeInt64(3, amountSat_);
      }
      if (!pkScript_.isEmpty()) {
        output.writeString(4, getPkScript());
      }
      if (outpoint_ != null) {
        output.writeMessage(5, getOutpoint());
      }
      if (confirmations_ != 0L) {
        output.writeInt64(6, confirmations_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != lnrpc.Rpc.AddressType.WITNESS_PUBKEY_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!address_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getAddress());
      }
      if (amountSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, amountSat_);
      }
      if (!pkScript_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getPkScript());
      }
      if (outpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getOutpoint());
      }
      if (confirmations_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, confirmations_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Utxo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Utxo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Utxo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Utxo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Utxo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Utxo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Utxo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Utxo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Utxo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Utxo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Utxo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Utxo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Utxo, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Utxo)
        lnrpc.Rpc.UtxoOrBuilder {
      // Construct using lnrpc.Rpc.Utxo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The type of address
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <pre>
       *&#47; The type of address
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The type of address
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public lnrpc.Rpc.AddressType getType() {
        return instance.getType();
      }
      /**
       * <pre>
       *&#47; The type of address
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public Builder setType(lnrpc.Rpc.AddressType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The type of address
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       *&#47; The address
       * </pre>
       *
       * <code>optional string address = 2;</code>
       */
      public java.lang.String getAddress() {
        return instance.getAddress();
      }
      /**
       * <pre>
       *&#47; The address
       * </pre>
       *
       * <code>optional string address = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        return instance.getAddressBytes();
      }
      /**
       * <pre>
       *&#47; The address
       * </pre>
       *
       * <code>optional string address = 2;</code>
       */
      public Builder setAddress(
          java.lang.String value) {
        copyOnWrite();
        instance.setAddress(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The address
       * </pre>
       *
       * <code>optional string address = 2;</code>
       */
      public Builder clearAddress() {
        copyOnWrite();
        instance.clearAddress();
        return this;
      }
      /**
       * <pre>
       *&#47; The address
       * </pre>
       *
       * <code>optional string address = 2;</code>
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAddressBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The value of the unspent coin in satoshis
       * </pre>
       *
       * <code>optional int64 amount_sat = 3;</code>
       */
      public long getAmountSat() {
        return instance.getAmountSat();
      }
      /**
       * <pre>
       *&#47; The value of the unspent coin in satoshis
       * </pre>
       *
       * <code>optional int64 amount_sat = 3;</code>
       */
      public Builder setAmountSat(long value) {
        copyOnWrite();
        instance.setAmountSat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The value of the unspent coin in satoshis
       * </pre>
       *
       * <code>optional int64 amount_sat = 3;</code>
       */
      public Builder clearAmountSat() {
        copyOnWrite();
        instance.clearAmountSat();
        return this;
      }

      /**
       * <pre>
       *&#47; The pkscript in hex
       * </pre>
       *
       * <code>optional string pk_script = 4;</code>
       */
      public java.lang.String getPkScript() {
        return instance.getPkScript();
      }
      /**
       * <pre>
       *&#47; The pkscript in hex
       * </pre>
       *
       * <code>optional string pk_script = 4;</code>
       */
      public com.google.protobuf.ByteString
          getPkScriptBytes() {
        return instance.getPkScriptBytes();
      }
      /**
       * <pre>
       *&#47; The pkscript in hex
       * </pre>
       *
       * <code>optional string pk_script = 4;</code>
       */
      public Builder setPkScript(
          java.lang.String value) {
        copyOnWrite();
        instance.setPkScript(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The pkscript in hex
       * </pre>
       *
       * <code>optional string pk_script = 4;</code>
       */
      public Builder clearPkScript() {
        copyOnWrite();
        instance.clearPkScript();
        return this;
      }
      /**
       * <pre>
       *&#47; The pkscript in hex
       * </pre>
       *
       * <code>optional string pk_script = 4;</code>
       */
      public Builder setPkScriptBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPkScriptBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The outpoint in format txid:n
       * </pre>
       *
       * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
       */
      public boolean hasOutpoint() {
        return instance.hasOutpoint();
      }
      /**
       * <pre>
       *&#47; The outpoint in format txid:n
       * </pre>
       *
       * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
       */
      public lnrpc.Rpc.OutPoint getOutpoint() {
        return instance.getOutpoint();
      }
      /**
       * <pre>
       *&#47; The outpoint in format txid:n
       * </pre>
       *
       * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
       */
      public Builder setOutpoint(lnrpc.Rpc.OutPoint value) {
        copyOnWrite();
        instance.setOutpoint(value);
        return this;
        }
      /**
       * <pre>
       *&#47; The outpoint in format txid:n
       * </pre>
       *
       * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
       */
      public Builder setOutpoint(
          lnrpc.Rpc.OutPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setOutpoint(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The outpoint in format txid:n
       * </pre>
       *
       * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
       */
      public Builder mergeOutpoint(lnrpc.Rpc.OutPoint value) {
        copyOnWrite();
        instance.mergeOutpoint(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The outpoint in format txid:n
       * </pre>
       *
       * <code>optional .lnrpc.OutPoint outpoint = 5;</code>
       */
      public Builder clearOutpoint() {  copyOnWrite();
        instance.clearOutpoint();
        return this;
      }

      /**
       * <pre>
       *&#47; The number of confirmations for the Utxo
       * </pre>
       *
       * <code>optional int64 confirmations = 6;</code>
       */
      public long getConfirmations() {
        return instance.getConfirmations();
      }
      /**
       * <pre>
       *&#47; The number of confirmations for the Utxo
       * </pre>
       *
       * <code>optional int64 confirmations = 6;</code>
       */
      public Builder setConfirmations(long value) {
        copyOnWrite();
        instance.setConfirmations(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The number of confirmations for the Utxo
       * </pre>
       *
       * <code>optional int64 confirmations = 6;</code>
       */
      public Builder clearConfirmations() {
        copyOnWrite();
        instance.clearConfirmations();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Utxo)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Utxo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Utxo other = (lnrpc.Rpc.Utxo) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          address_ = visitor.visitString(!address_.isEmpty(), address_,
              !other.address_.isEmpty(), other.address_);
          amountSat_ = visitor.visitLong(amountSat_ != 0L, amountSat_,
              other.amountSat_ != 0L, other.amountSat_);
          pkScript_ = visitor.visitString(!pkScript_.isEmpty(), pkScript_,
              !other.pkScript_.isEmpty(), other.pkScript_);
          outpoint_ = visitor.visitMessage(outpoint_, other.outpoint_);
          confirmations_ = visitor.visitLong(confirmations_ != 0L, confirmations_,
              other.confirmations_ != 0L, other.confirmations_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  address_ = s;
                  break;
                }
                case 24: {

                  amountSat_ = input.readInt64();
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  pkScript_ = s;
                  break;
                }
                case 42: {
                  lnrpc.Rpc.OutPoint.Builder subBuilder = null;
                  if (outpoint_ != null) {
                    subBuilder = outpoint_.toBuilder();
                  }
                  outpoint_ = input.readMessage(lnrpc.Rpc.OutPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(outpoint_);
                    outpoint_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 48: {

                  confirmations_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Utxo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Utxo)
    private static final lnrpc.Rpc.Utxo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Utxo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Utxo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Utxo> PARSER;

    public static com.google.protobuf.Parser<Utxo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TransactionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Transaction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    java.lang.String getTxHash();
    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    com.google.protobuf.ByteString
        getTxHashBytes();

    /**
     * <pre>
     *&#47; The transaction amount, denominated in satoshis
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    long getAmount();

    /**
     * <pre>
     *&#47; The number of confirmations
     * </pre>
     *
     * <code>optional int32 num_confirmations = 3;</code>
     */
    int getNumConfirmations();

    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    java.lang.String getBlockHash();
    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    com.google.protobuf.ByteString
        getBlockHashBytes();

    /**
     * <pre>
     *&#47; The height of the block this transaction was included in
     * </pre>
     *
     * <code>optional int32 block_height = 5;</code>
     */
    int getBlockHeight();

    /**
     * <pre>
     *&#47; Timestamp of this transaction 
     * </pre>
     *
     * <code>optional int64 time_stamp = 6;</code>
     */
    long getTimeStamp();

    /**
     * <pre>
     *&#47; Fees paid for this transaction
     * </pre>
     *
     * <code>optional int64 total_fees = 7;</code>
     */
    long getTotalFees();

    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    java.util.List<String>
        getDestAddressesList();
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    int getDestAddressesCount();
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    java.lang.String getDestAddresses(int index);
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    com.google.protobuf.ByteString
        getDestAddressesBytes(int index);
  }
  /**
   * Protobuf type {@code lnrpc.Transaction}
   */
  public  static final class Transaction extends
      com.google.protobuf.GeneratedMessageLite<
          Transaction, Transaction.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Transaction)
      TransactionOrBuilder {
    private Transaction() {
      txHash_ = "";
      blockHash_ = "";
      destAddresses_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    private int bitField0_;
    public static final int TX_HASH_FIELD_NUMBER = 1;
    private java.lang.String txHash_;
    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    public java.lang.String getTxHash() {
      return txHash_;
    }
    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTxHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(txHash_);
    }
    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    private void setTxHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      txHash_ = value;
    }
    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    private void clearTxHash() {
      
      txHash_ = getDefaultInstance().getTxHash();
    }
    /**
     * <pre>
     *&#47; The transaction hash
     * </pre>
     *
     * <code>optional string tx_hash = 1;</code>
     */
    private void setTxHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      txHash_ = value.toStringUtf8();
    }

    public static final int AMOUNT_FIELD_NUMBER = 2;
    private long amount_;
    /**
     * <pre>
     *&#47; The transaction amount, denominated in satoshis
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    public long getAmount() {
      return amount_;
    }
    /**
     * <pre>
     *&#47; The transaction amount, denominated in satoshis
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <pre>
     *&#47; The transaction amount, denominated in satoshis
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static final int NUM_CONFIRMATIONS_FIELD_NUMBER = 3;
    private int numConfirmations_;
    /**
     * <pre>
     *&#47; The number of confirmations
     * </pre>
     *
     * <code>optional int32 num_confirmations = 3;</code>
     */
    public int getNumConfirmations() {
      return numConfirmations_;
    }
    /**
     * <pre>
     *&#47; The number of confirmations
     * </pre>
     *
     * <code>optional int32 num_confirmations = 3;</code>
     */
    private void setNumConfirmations(int value) {
      
      numConfirmations_ = value;
    }
    /**
     * <pre>
     *&#47; The number of confirmations
     * </pre>
     *
     * <code>optional int32 num_confirmations = 3;</code>
     */
    private void clearNumConfirmations() {
      
      numConfirmations_ = 0;
    }

    public static final int BLOCK_HASH_FIELD_NUMBER = 4;
    private java.lang.String blockHash_;
    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    public java.lang.String getBlockHash() {
      return blockHash_;
    }
    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    public com.google.protobuf.ByteString
        getBlockHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(blockHash_);
    }
    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    private void setBlockHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      blockHash_ = value;
    }
    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    private void clearBlockHash() {
      
      blockHash_ = getDefaultInstance().getBlockHash();
    }
    /**
     * <pre>
     *&#47; The hash of the block this transaction was included in
     * </pre>
     *
     * <code>optional string block_hash = 4;</code>
     */
    private void setBlockHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      blockHash_ = value.toStringUtf8();
    }

    public static final int BLOCK_HEIGHT_FIELD_NUMBER = 5;
    private int blockHeight_;
    /**
     * <pre>
     *&#47; The height of the block this transaction was included in
     * </pre>
     *
     * <code>optional int32 block_height = 5;</code>
     */
    public int getBlockHeight() {
      return blockHeight_;
    }
    /**
     * <pre>
     *&#47; The height of the block this transaction was included in
     * </pre>
     *
     * <code>optional int32 block_height = 5;</code>
     */
    private void setBlockHeight(int value) {
      
      blockHeight_ = value;
    }
    /**
     * <pre>
     *&#47; The height of the block this transaction was included in
     * </pre>
     *
     * <code>optional int32 block_height = 5;</code>
     */
    private void clearBlockHeight() {
      
      blockHeight_ = 0;
    }

    public static final int TIME_STAMP_FIELD_NUMBER = 6;
    private long timeStamp_;
    /**
     * <pre>
     *&#47; Timestamp of this transaction 
     * </pre>
     *
     * <code>optional int64 time_stamp = 6;</code>
     */
    public long getTimeStamp() {
      return timeStamp_;
    }
    /**
     * <pre>
     *&#47; Timestamp of this transaction 
     * </pre>
     *
     * <code>optional int64 time_stamp = 6;</code>
     */
    private void setTimeStamp(long value) {
      
      timeStamp_ = value;
    }
    /**
     * <pre>
     *&#47; Timestamp of this transaction 
     * </pre>
     *
     * <code>optional int64 time_stamp = 6;</code>
     */
    private void clearTimeStamp() {
      
      timeStamp_ = 0L;
    }

    public static final int TOTAL_FEES_FIELD_NUMBER = 7;
    private long totalFees_;
    /**
     * <pre>
     *&#47; Fees paid for this transaction
     * </pre>
     *
     * <code>optional int64 total_fees = 7;</code>
     */
    public long getTotalFees() {
      return totalFees_;
    }
    /**
     * <pre>
     *&#47; Fees paid for this transaction
     * </pre>
     *
     * <code>optional int64 total_fees = 7;</code>
     */
    private void setTotalFees(long value) {
      
      totalFees_ = value;
    }
    /**
     * <pre>
     *&#47; Fees paid for this transaction
     * </pre>
     *
     * <code>optional int64 total_fees = 7;</code>
     */
    private void clearTotalFees() {
      
      totalFees_ = 0L;
    }

    public static final int DEST_ADDRESSES_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.ProtobufList<String> destAddresses_;
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    public java.util.List<String> getDestAddressesList() {
      return destAddresses_;
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    public int getDestAddressesCount() {
      return destAddresses_.size();
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    public java.lang.String getDestAddresses(int index) {
      return destAddresses_.get(index);
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    public com.google.protobuf.ByteString
        getDestAddressesBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          destAddresses_.get(index));
    }
    private void ensureDestAddressesIsMutable() {
      if (!destAddresses_.isModifiable()) {
        destAddresses_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(destAddresses_);
       }
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    private void setDestAddresses(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDestAddressesIsMutable();
      destAddresses_.set(index, value);
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    private void addDestAddresses(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDestAddressesIsMutable();
      destAddresses_.add(value);
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    private void addAllDestAddresses(
        java.lang.Iterable<java.lang.String> values) {
      ensureDestAddressesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, destAddresses_);
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    private void clearDestAddresses() {
      destAddresses_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; Addresses that received funds for this transaction
     * </pre>
     *
     * <code>repeated string dest_addresses = 8;</code>
     */
    private void addDestAddressesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureDestAddressesIsMutable();
      destAddresses_.add(value.toStringUtf8());
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!txHash_.isEmpty()) {
        output.writeString(1, getTxHash());
      }
      if (amount_ != 0L) {
        output.writeInt64(2, amount_);
      }
      if (numConfirmations_ != 0) {
        output.writeInt32(3, numConfirmations_);
      }
      if (!blockHash_.isEmpty()) {
        output.writeString(4, getBlockHash());
      }
      if (blockHeight_ != 0) {
        output.writeInt32(5, blockHeight_);
      }
      if (timeStamp_ != 0L) {
        output.writeInt64(6, timeStamp_);
      }
      if (totalFees_ != 0L) {
        output.writeInt64(7, totalFees_);
      }
      for (int i = 0; i < destAddresses_.size(); i++) {
        output.writeString(8, destAddresses_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!txHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTxHash());
      }
      if (amount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, amount_);
      }
      if (numConfirmations_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numConfirmations_);
      }
      if (!blockHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getBlockHash());
      }
      if (blockHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, blockHeight_);
      }
      if (timeStamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, timeStamp_);
      }
      if (totalFees_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, totalFees_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < destAddresses_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(destAddresses_.get(i));
        }
        size += dataSize;
        size += 1 * getDestAddressesList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Transaction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Transaction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Transaction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Transaction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Transaction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Transaction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Transaction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Transaction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Transaction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Transaction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Transaction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Transaction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Transaction, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Transaction)
        lnrpc.Rpc.TransactionOrBuilder {
      // Construct using lnrpc.Rpc.Transaction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The transaction hash
       * </pre>
       *
       * <code>optional string tx_hash = 1;</code>
       */
      public java.lang.String getTxHash() {
        return instance.getTxHash();
      }
      /**
       * <pre>
       *&#47; The transaction hash
       * </pre>
       *
       * <code>optional string tx_hash = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTxHashBytes() {
        return instance.getTxHashBytes();
      }
      /**
       * <pre>
       *&#47; The transaction hash
       * </pre>
       *
       * <code>optional string tx_hash = 1;</code>
       */
      public Builder setTxHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setTxHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The transaction hash
       * </pre>
       *
       * <code>optional string tx_hash = 1;</code>
       */
      public Builder clearTxHash() {
        copyOnWrite();
        instance.clearTxHash();
        return this;
      }
      /**
       * <pre>
       *&#47; The transaction hash
       * </pre>
       *
       * <code>optional string tx_hash = 1;</code>
       */
      public Builder setTxHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTxHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The transaction amount, denominated in satoshis
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <pre>
       *&#47; The transaction amount, denominated in satoshis
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The transaction amount, denominated in satoshis
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      /**
       * <pre>
       *&#47; The number of confirmations
       * </pre>
       *
       * <code>optional int32 num_confirmations = 3;</code>
       */
      public int getNumConfirmations() {
        return instance.getNumConfirmations();
      }
      /**
       * <pre>
       *&#47; The number of confirmations
       * </pre>
       *
       * <code>optional int32 num_confirmations = 3;</code>
       */
      public Builder setNumConfirmations(int value) {
        copyOnWrite();
        instance.setNumConfirmations(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The number of confirmations
       * </pre>
       *
       * <code>optional int32 num_confirmations = 3;</code>
       */
      public Builder clearNumConfirmations() {
        copyOnWrite();
        instance.clearNumConfirmations();
        return this;
      }

      /**
       * <pre>
       *&#47; The hash of the block this transaction was included in
       * </pre>
       *
       * <code>optional string block_hash = 4;</code>
       */
      public java.lang.String getBlockHash() {
        return instance.getBlockHash();
      }
      /**
       * <pre>
       *&#47; The hash of the block this transaction was included in
       * </pre>
       *
       * <code>optional string block_hash = 4;</code>
       */
      public com.google.protobuf.ByteString
          getBlockHashBytes() {
        return instance.getBlockHashBytes();
      }
      /**
       * <pre>
       *&#47; The hash of the block this transaction was included in
       * </pre>
       *
       * <code>optional string block_hash = 4;</code>
       */
      public Builder setBlockHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setBlockHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hash of the block this transaction was included in
       * </pre>
       *
       * <code>optional string block_hash = 4;</code>
       */
      public Builder clearBlockHash() {
        copyOnWrite();
        instance.clearBlockHash();
        return this;
      }
      /**
       * <pre>
       *&#47; The hash of the block this transaction was included in
       * </pre>
       *
       * <code>optional string block_hash = 4;</code>
       */
      public Builder setBlockHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBlockHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The height of the block this transaction was included in
       * </pre>
       *
       * <code>optional int32 block_height = 5;</code>
       */
      public int getBlockHeight() {
        return instance.getBlockHeight();
      }
      /**
       * <pre>
       *&#47; The height of the block this transaction was included in
       * </pre>
       *
       * <code>optional int32 block_height = 5;</code>
       */
      public Builder setBlockHeight(int value) {
        copyOnWrite();
        instance.setBlockHeight(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The height of the block this transaction was included in
       * </pre>
       *
       * <code>optional int32 block_height = 5;</code>
       */
      public Builder clearBlockHeight() {
        copyOnWrite();
        instance.clearBlockHeight();
        return this;
      }

      /**
       * <pre>
       *&#47; Timestamp of this transaction 
       * </pre>
       *
       * <code>optional int64 time_stamp = 6;</code>
       */
      public long getTimeStamp() {
        return instance.getTimeStamp();
      }
      /**
       * <pre>
       *&#47; Timestamp of this transaction 
       * </pre>
       *
       * <code>optional int64 time_stamp = 6;</code>
       */
      public Builder setTimeStamp(long value) {
        copyOnWrite();
        instance.setTimeStamp(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Timestamp of this transaction 
       * </pre>
       *
       * <code>optional int64 time_stamp = 6;</code>
       */
      public Builder clearTimeStamp() {
        copyOnWrite();
        instance.clearTimeStamp();
        return this;
      }

      /**
       * <pre>
       *&#47; Fees paid for this transaction
       * </pre>
       *
       * <code>optional int64 total_fees = 7;</code>
       */
      public long getTotalFees() {
        return instance.getTotalFees();
      }
      /**
       * <pre>
       *&#47; Fees paid for this transaction
       * </pre>
       *
       * <code>optional int64 total_fees = 7;</code>
       */
      public Builder setTotalFees(long value) {
        copyOnWrite();
        instance.setTotalFees(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Fees paid for this transaction
       * </pre>
       *
       * <code>optional int64 total_fees = 7;</code>
       */
      public Builder clearTotalFees() {
        copyOnWrite();
        instance.clearTotalFees();
        return this;
      }

      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public java.util.List<String>
          getDestAddressesList() {
        return java.util.Collections.unmodifiableList(
            instance.getDestAddressesList());
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public int getDestAddressesCount() {
        return instance.getDestAddressesCount();
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public java.lang.String getDestAddresses(int index) {
        return instance.getDestAddresses(index);
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public com.google.protobuf.ByteString
          getDestAddressesBytes(int index) {
        return instance.getDestAddressesBytes(index);
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public Builder setDestAddresses(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setDestAddresses(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public Builder addDestAddresses(
          java.lang.String value) {
        copyOnWrite();
        instance.addDestAddresses(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public Builder addAllDestAddresses(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllDestAddresses(values);
        return this;
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public Builder clearDestAddresses() {
        copyOnWrite();
        instance.clearDestAddresses();
        return this;
      }
      /**
       * <pre>
       *&#47; Addresses that received funds for this transaction
       * </pre>
       *
       * <code>repeated string dest_addresses = 8;</code>
       */
      public Builder addDestAddressesBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addDestAddressesBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Transaction)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Transaction();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          destAddresses_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Transaction other = (lnrpc.Rpc.Transaction) arg1;
          txHash_ = visitor.visitString(!txHash_.isEmpty(), txHash_,
              !other.txHash_.isEmpty(), other.txHash_);
          amount_ = visitor.visitLong(amount_ != 0L, amount_,
              other.amount_ != 0L, other.amount_);
          numConfirmations_ = visitor.visitInt(numConfirmations_ != 0, numConfirmations_,
              other.numConfirmations_ != 0, other.numConfirmations_);
          blockHash_ = visitor.visitString(!blockHash_.isEmpty(), blockHash_,
              !other.blockHash_.isEmpty(), other.blockHash_);
          blockHeight_ = visitor.visitInt(blockHeight_ != 0, blockHeight_,
              other.blockHeight_ != 0, other.blockHeight_);
          timeStamp_ = visitor.visitLong(timeStamp_ != 0L, timeStamp_,
              other.timeStamp_ != 0L, other.timeStamp_);
          totalFees_ = visitor.visitLong(totalFees_ != 0L, totalFees_,
              other.totalFees_ != 0L, other.totalFees_);
          destAddresses_= visitor.visitList(destAddresses_, other.destAddresses_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  txHash_ = s;
                  break;
                }
                case 16: {

                  amount_ = input.readInt64();
                  break;
                }
                case 24: {

                  numConfirmations_ = input.readInt32();
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  blockHash_ = s;
                  break;
                }
                case 40: {

                  blockHeight_ = input.readInt32();
                  break;
                }
                case 48: {

                  timeStamp_ = input.readInt64();
                  break;
                }
                case 56: {

                  totalFees_ = input.readInt64();
                  break;
                }
                case 66: {
                  String s = input.readStringRequireUtf8();
                  if (!destAddresses_.isModifiable()) {
                    destAddresses_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(destAddresses_);
                  }
                  destAddresses_.add(s);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Transaction.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Transaction)
    private static final lnrpc.Rpc.Transaction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Transaction();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Transaction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Transaction> PARSER;

    public static com.google.protobuf.Parser<Transaction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GetTransactionsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GetTransactionsRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.GetTransactionsRequest}
   */
  public  static final class GetTransactionsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          GetTransactionsRequest, GetTransactionsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GetTransactionsRequest)
      GetTransactionsRequestOrBuilder {
    private GetTransactionsRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetTransactionsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GetTransactionsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GetTransactionsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GetTransactionsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GetTransactionsRequest)
        lnrpc.Rpc.GetTransactionsRequestOrBuilder {
      // Construct using lnrpc.Rpc.GetTransactionsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.GetTransactionsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GetTransactionsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GetTransactionsRequest other = (lnrpc.Rpc.GetTransactionsRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GetTransactionsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GetTransactionsRequest)
    private static final lnrpc.Rpc.GetTransactionsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GetTransactionsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GetTransactionsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GetTransactionsRequest> PARSER;

    public static com.google.protobuf.Parser<GetTransactionsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TransactionDetailsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.TransactionDetails)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    java.util.List<lnrpc.Rpc.Transaction> 
        getTransactionsList();
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    lnrpc.Rpc.Transaction getTransactions(int index);
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    int getTransactionsCount();
  }
  /**
   * Protobuf type {@code lnrpc.TransactionDetails}
   */
  public  static final class TransactionDetails extends
      com.google.protobuf.GeneratedMessageLite<
          TransactionDetails, TransactionDetails.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.TransactionDetails)
      TransactionDetailsOrBuilder {
    private TransactionDetails() {
      transactions_ = emptyProtobufList();
    }
    public static final int TRANSACTIONS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Transaction> transactions_;
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.Transaction> getTransactionsList() {
      return transactions_;
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.TransactionOrBuilder> 
        getTransactionsOrBuilderList() {
      return transactions_;
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    public int getTransactionsCount() {
      return transactions_.size();
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    public lnrpc.Rpc.Transaction getTransactions(int index) {
      return transactions_.get(index);
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    public lnrpc.Rpc.TransactionOrBuilder getTransactionsOrBuilder(
        int index) {
      return transactions_.get(index);
    }
    private void ensureTransactionsIsMutable() {
      if (!transactions_.isModifiable()) {
        transactions_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(transactions_);
       }
    }

    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void setTransactions(
        int index, lnrpc.Rpc.Transaction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTransactionsIsMutable();
      transactions_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void setTransactions(
        int index, lnrpc.Rpc.Transaction.Builder builderForValue) {
      ensureTransactionsIsMutable();
      transactions_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void addTransactions(lnrpc.Rpc.Transaction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTransactionsIsMutable();
      transactions_.add(value);
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void addTransactions(
        int index, lnrpc.Rpc.Transaction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureTransactionsIsMutable();
      transactions_.add(index, value);
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void addTransactions(
        lnrpc.Rpc.Transaction.Builder builderForValue) {
      ensureTransactionsIsMutable();
      transactions_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void addTransactions(
        int index, lnrpc.Rpc.Transaction.Builder builderForValue) {
      ensureTransactionsIsMutable();
      transactions_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void addAllTransactions(
        java.lang.Iterable<? extends lnrpc.Rpc.Transaction> values) {
      ensureTransactionsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, transactions_);
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void clearTransactions() {
      transactions_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The list of transactions relevant to the wallet.
     * </pre>
     *
     * <code>repeated .lnrpc.Transaction transactions = 1;</code>
     */
    private void removeTransactions(int index) {
      ensureTransactionsIsMutable();
      transactions_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < transactions_.size(); i++) {
        output.writeMessage(1, transactions_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < transactions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, transactions_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.TransactionDetails parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.TransactionDetails parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.TransactionDetails parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.TransactionDetails parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.TransactionDetails prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.TransactionDetails}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.TransactionDetails, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.TransactionDetails)
        lnrpc.Rpc.TransactionDetailsOrBuilder {
      // Construct using lnrpc.Rpc.TransactionDetails.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.Transaction> getTransactionsList() {
        return java.util.Collections.unmodifiableList(
            instance.getTransactionsList());
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public int getTransactionsCount() {
        return instance.getTransactionsCount();
      }/**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public lnrpc.Rpc.Transaction getTransactions(int index) {
        return instance.getTransactions(index);
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder setTransactions(
          int index, lnrpc.Rpc.Transaction value) {
        copyOnWrite();
        instance.setTransactions(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder setTransactions(
          int index, lnrpc.Rpc.Transaction.Builder builderForValue) {
        copyOnWrite();
        instance.setTransactions(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder addTransactions(lnrpc.Rpc.Transaction value) {
        copyOnWrite();
        instance.addTransactions(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder addTransactions(
          int index, lnrpc.Rpc.Transaction value) {
        copyOnWrite();
        instance.addTransactions(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder addTransactions(
          lnrpc.Rpc.Transaction.Builder builderForValue) {
        copyOnWrite();
        instance.addTransactions(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder addTransactions(
          int index, lnrpc.Rpc.Transaction.Builder builderForValue) {
        copyOnWrite();
        instance.addTransactions(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder addAllTransactions(
          java.lang.Iterable<? extends lnrpc.Rpc.Transaction> values) {
        copyOnWrite();
        instance.addAllTransactions(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder clearTransactions() {
        copyOnWrite();
        instance.clearTransactions();
        return this;
      }
      /**
       * <pre>
       *&#47; The list of transactions relevant to the wallet.
       * </pre>
       *
       * <code>repeated .lnrpc.Transaction transactions = 1;</code>
       */
      public Builder removeTransactions(int index) {
        copyOnWrite();
        instance.removeTransactions(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.TransactionDetails)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.TransactionDetails();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          transactions_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.TransactionDetails other = (lnrpc.Rpc.TransactionDetails) arg1;
          transactions_= visitor.visitList(transactions_, other.transactions_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!transactions_.isModifiable()) {
                    transactions_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(transactions_);
                  }
                  transactions_.add(
                      input.readMessage(lnrpc.Rpc.Transaction.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.TransactionDetails.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.TransactionDetails)
    private static final lnrpc.Rpc.TransactionDetails DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TransactionDetails();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.TransactionDetails getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TransactionDetails> PARSER;

    public static com.google.protobuf.Parser<TransactionDetails> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FeeLimitOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.FeeLimit)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The fee limit expressed as a fixed amount of satoshis.
     * </pre>
     *
     * <code>optional int64 fixed = 1;</code>
     */
    long getFixed();

    /**
     * <pre>
     *&#47; The fee limit expressed as a percentage of the payment amount.
     * </pre>
     *
     * <code>optional int64 percent = 2;</code>
     */
    long getPercent();

    public lnrpc.Rpc.FeeLimit.LimitCase getLimitCase();
  }
  /**
   * Protobuf type {@code lnrpc.FeeLimit}
   */
  public  static final class FeeLimit extends
      com.google.protobuf.GeneratedMessageLite<
          FeeLimit, FeeLimit.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.FeeLimit)
      FeeLimitOrBuilder {
    private FeeLimit() {
    }
    private int limitCase_ = 0;
    private java.lang.Object limit_;
    public enum LimitCase
        implements com.google.protobuf.Internal.EnumLite {
      FIXED(1),
      PERCENT(2),
      LIMIT_NOT_SET(0);
      private final int value;
      private LimitCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static LimitCase valueOf(int value) {
        return forNumber(value);
      }

      public static LimitCase forNumber(int value) {
        switch (value) {
          case 1: return FIXED;
          case 2: return PERCENT;
          case 0: return LIMIT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public LimitCase
    getLimitCase() {
      return LimitCase.forNumber(
          limitCase_);
    }

    private void clearLimit() {
      limitCase_ = 0;
      limit_ = null;
    }

    public static final int FIXED_FIELD_NUMBER = 1;
    /**
     * <pre>
     *&#47; The fee limit expressed as a fixed amount of satoshis.
     * </pre>
     *
     * <code>optional int64 fixed = 1;</code>
     */
    public long getFixed() {
      if (limitCase_ == 1) {
        return (java.lang.Long) limit_;
      }
      return 0L;
    }
    /**
     * <pre>
     *&#47; The fee limit expressed as a fixed amount of satoshis.
     * </pre>
     *
     * <code>optional int64 fixed = 1;</code>
     */
    private void setFixed(long value) {
      limitCase_ = 1;
      limit_ = value;
    }
    /**
     * <pre>
     *&#47; The fee limit expressed as a fixed amount of satoshis.
     * </pre>
     *
     * <code>optional int64 fixed = 1;</code>
     */
    private void clearFixed() {
      if (limitCase_ == 1) {
        limitCase_ = 0;
        limit_ = null;
      }
    }

    public static final int PERCENT_FIELD_NUMBER = 2;
    /**
     * <pre>
     *&#47; The fee limit expressed as a percentage of the payment amount.
     * </pre>
     *
     * <code>optional int64 percent = 2;</code>
     */
    public long getPercent() {
      if (limitCase_ == 2) {
        return (java.lang.Long) limit_;
      }
      return 0L;
    }
    /**
     * <pre>
     *&#47; The fee limit expressed as a percentage of the payment amount.
     * </pre>
     *
     * <code>optional int64 percent = 2;</code>
     */
    private void setPercent(long value) {
      limitCase_ = 2;
      limit_ = value;
    }
    /**
     * <pre>
     *&#47; The fee limit expressed as a percentage of the payment amount.
     * </pre>
     *
     * <code>optional int64 percent = 2;</code>
     */
    private void clearPercent() {
      if (limitCase_ == 2) {
        limitCase_ = 0;
        limit_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (limitCase_ == 1) {
        output.writeInt64(
            1, (long)((java.lang.Long) limit_));
      }
      if (limitCase_ == 2) {
        output.writeInt64(
            2, (long)((java.lang.Long) limit_));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (limitCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              1, (long)((java.lang.Long) limit_));
      }
      if (limitCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(
              2, (long)((java.lang.Long) limit_));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.FeeLimit parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeLimit parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeLimit parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeLimit parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.FeeLimit prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.FeeLimit}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.FeeLimit, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.FeeLimit)
        lnrpc.Rpc.FeeLimitOrBuilder {
      // Construct using lnrpc.Rpc.FeeLimit.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public LimitCase
          getLimitCase() {
        return instance.getLimitCase();
      }

      public Builder clearLimit() {
        copyOnWrite();
        instance.clearLimit();
        return this;
      }


      /**
       * <pre>
       *&#47; The fee limit expressed as a fixed amount of satoshis.
       * </pre>
       *
       * <code>optional int64 fixed = 1;</code>
       */
      public long getFixed() {
        return instance.getFixed();
      }
      /**
       * <pre>
       *&#47; The fee limit expressed as a fixed amount of satoshis.
       * </pre>
       *
       * <code>optional int64 fixed = 1;</code>
       */
      public Builder setFixed(long value) {
        copyOnWrite();
        instance.setFixed(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The fee limit expressed as a fixed amount of satoshis.
       * </pre>
       *
       * <code>optional int64 fixed = 1;</code>
       */
      public Builder clearFixed() {
        copyOnWrite();
        instance.clearFixed();
        return this;
      }

      /**
       * <pre>
       *&#47; The fee limit expressed as a percentage of the payment amount.
       * </pre>
       *
       * <code>optional int64 percent = 2;</code>
       */
      public long getPercent() {
        return instance.getPercent();
      }
      /**
       * <pre>
       *&#47; The fee limit expressed as a percentage of the payment amount.
       * </pre>
       *
       * <code>optional int64 percent = 2;</code>
       */
      public Builder setPercent(long value) {
        copyOnWrite();
        instance.setPercent(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The fee limit expressed as a percentage of the payment amount.
       * </pre>
       *
       * <code>optional int64 percent = 2;</code>
       */
      public Builder clearPercent() {
        copyOnWrite();
        instance.clearPercent();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.FeeLimit)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.FeeLimit();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.FeeLimit other = (lnrpc.Rpc.FeeLimit) arg1;
          switch (other.getLimitCase()) {
            case FIXED: {
              limit_ = visitor.visitOneofLong(
                  limitCase_ == 1, limit_, other.limit_);
              break;
            }
            case PERCENT: {
              limit_ = visitor.visitOneofLong(
                  limitCase_ == 2, limit_, other.limit_);
              break;
            }
            case LIMIT_NOT_SET: {
              visitor.visitOneofNotSet(limitCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.limitCase_ != 0) {
              limitCase_ = other.limitCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  limitCase_ = 1;
                  limit_ = input.readInt64();
                  break;
                }
                case 16: {
                  limitCase_ = 2;
                  limit_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.FeeLimit.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.FeeLimit)
    private static final lnrpc.Rpc.FeeLimit DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FeeLimit();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.FeeLimit getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FeeLimit> PARSER;

    public static com.google.protobuf.Parser<FeeLimit> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional bytes dest = 1;</code>
     */
    com.google.protobuf.ByteString getDest();

    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    java.lang.String getDestString();
    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    com.google.protobuf.ByteString
        getDestStringBytes();

    /**
     * <pre>
     *&#47; Number of satoshis to send.
     * </pre>
     *
     * <code>optional int64 amt = 3;</code>
     */
    long getAmt();

    /**
     * <pre>
     *&#47; The hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional bytes payment_hash = 4;</code>
     */
    com.google.protobuf.ByteString getPaymentHash();

    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    java.lang.String getPaymentHashString();
    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    com.google.protobuf.ByteString
        getPaymentHashStringBytes();

    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    java.lang.String getPaymentRequest();
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    com.google.protobuf.ByteString
        getPaymentRequestBytes();

    /**
     * <pre>
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 7;</code>
     */
    int getFinalCltvDelta();

    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    boolean hasFeeLimit();
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    lnrpc.Rpc.FeeLimit getFeeLimit();

    /**
     * <pre>
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     * </pre>
     *
     * <code>optional uint64 outgoing_chan_id = 9;</code>
     */
    long getOutgoingChanId();
  }
  /**
   * Protobuf type {@code lnrpc.SendRequest}
   */
  public  static final class SendRequest extends
      com.google.protobuf.GeneratedMessageLite<
          SendRequest, SendRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendRequest)
      SendRequestOrBuilder {
    private SendRequest() {
      dest_ = com.google.protobuf.ByteString.EMPTY;
      destString_ = "";
      paymentHash_ = com.google.protobuf.ByteString.EMPTY;
      paymentHashString_ = "";
      paymentRequest_ = "";
    }
    public static final int DEST_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString dest_;
    /**
     * <pre>
     *&#47; The identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional bytes dest = 1;</code>
     */
    public com.google.protobuf.ByteString getDest() {
      return dest_;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional bytes dest = 1;</code>
     */
    private void setDest(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      dest_ = value;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional bytes dest = 1;</code>
     */
    private void clearDest() {
      
      dest_ = getDefaultInstance().getDest();
    }

    public static final int DEST_STRING_FIELD_NUMBER = 2;
    private java.lang.String destString_;
    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    public java.lang.String getDestString() {
      return destString_;
    }
    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDestStringBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(destString_);
    }
    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    private void setDestString(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      destString_ = value;
    }
    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    private void clearDestString() {
      
      destString_ = getDefaultInstance().getDestString();
    }
    /**
     * <pre>
     *&#47; The hex-encoded identity pubkey of the payment recipient
     * </pre>
     *
     * <code>optional string dest_string = 2;</code>
     */
    private void setDestStringBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      destString_ = value.toStringUtf8();
    }

    public static final int AMT_FIELD_NUMBER = 3;
    private long amt_;
    /**
     * <pre>
     *&#47; Number of satoshis to send.
     * </pre>
     *
     * <code>optional int64 amt = 3;</code>
     */
    public long getAmt() {
      return amt_;
    }
    /**
     * <pre>
     *&#47; Number of satoshis to send.
     * </pre>
     *
     * <code>optional int64 amt = 3;</code>
     */
    private void setAmt(long value) {
      
      amt_ = value;
    }
    /**
     * <pre>
     *&#47; Number of satoshis to send.
     * </pre>
     *
     * <code>optional int64 amt = 3;</code>
     */
    private void clearAmt() {
      
      amt_ = 0L;
    }

    public static final int PAYMENT_HASH_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString paymentHash_;
    /**
     * <pre>
     *&#47; The hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional bytes payment_hash = 4;</code>
     */
    public com.google.protobuf.ByteString getPaymentHash() {
      return paymentHash_;
    }
    /**
     * <pre>
     *&#47; The hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional bytes payment_hash = 4;</code>
     */
    private void setPaymentHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHash_ = value;
    }
    /**
     * <pre>
     *&#47; The hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional bytes payment_hash = 4;</code>
     */
    private void clearPaymentHash() {
      
      paymentHash_ = getDefaultInstance().getPaymentHash();
    }

    public static final int PAYMENT_HASH_STRING_FIELD_NUMBER = 5;
    private java.lang.String paymentHashString_;
    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    public java.lang.String getPaymentHashString() {
      return paymentHashString_;
    }
    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentHashStringBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentHashString_);
    }
    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    private void setPaymentHashString(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHashString_ = value;
    }
    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    private void clearPaymentHashString() {
      
      paymentHashString_ = getDefaultInstance().getPaymentHashString();
    }
    /**
     * <pre>
     *&#47; The hex-encoded hash to use within the payment's HTLC
     * </pre>
     *
     * <code>optional string payment_hash_string = 5;</code>
     */
    private void setPaymentHashStringBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentHashString_ = value.toStringUtf8();
    }

    public static final int PAYMENT_REQUEST_FIELD_NUMBER = 6;
    private java.lang.String paymentRequest_;
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    public java.lang.String getPaymentRequest() {
      return paymentRequest_;
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentRequestBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentRequest_);
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    private void setPaymentRequest(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentRequest_ = value;
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    private void clearPaymentRequest() {
      
      paymentRequest_ = getDefaultInstance().getPaymentRequest();
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 6;</code>
     */
    private void setPaymentRequestBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentRequest_ = value.toStringUtf8();
    }

    public static final int FINAL_CLTV_DELTA_FIELD_NUMBER = 7;
    private int finalCltvDelta_;
    /**
     * <pre>
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 7;</code>
     */
    public int getFinalCltvDelta() {
      return finalCltvDelta_;
    }
    /**
     * <pre>
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 7;</code>
     */
    private void setFinalCltvDelta(int value) {
      
      finalCltvDelta_ = value;
    }
    /**
     * <pre>
     **
     *The CLTV delta from the current height that should be used to set the
     *timelock for the final hop.
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 7;</code>
     */
    private void clearFinalCltvDelta() {
      
      finalCltvDelta_ = 0;
    }

    public static final int FEE_LIMIT_FIELD_NUMBER = 8;
    private lnrpc.Rpc.FeeLimit feeLimit_;
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    public boolean hasFeeLimit() {
      return feeLimit_ != null;
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    public lnrpc.Rpc.FeeLimit getFeeLimit() {
      return feeLimit_ == null ? lnrpc.Rpc.FeeLimit.getDefaultInstance() : feeLimit_;
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    private void setFeeLimit(lnrpc.Rpc.FeeLimit value) {
      if (value == null) {
        throw new NullPointerException();
      }
      feeLimit_ = value;
      
      }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    private void setFeeLimit(
        lnrpc.Rpc.FeeLimit.Builder builderForValue) {
      feeLimit_ = builderForValue.build();
      
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    private void mergeFeeLimit(lnrpc.Rpc.FeeLimit value) {
      if (feeLimit_ != null &&
          feeLimit_ != lnrpc.Rpc.FeeLimit.getDefaultInstance()) {
        feeLimit_ =
          lnrpc.Rpc.FeeLimit.newBuilder(feeLimit_).mergeFrom(value).buildPartial();
      } else {
        feeLimit_ = value;
      }
      
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
     */
    private void clearFeeLimit() {  feeLimit_ = null;
      
    }

    public static final int OUTGOING_CHAN_ID_FIELD_NUMBER = 9;
    private long outgoingChanId_;
    /**
     * <pre>
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     * </pre>
     *
     * <code>optional uint64 outgoing_chan_id = 9;</code>
     */
    public long getOutgoingChanId() {
      return outgoingChanId_;
    }
    /**
     * <pre>
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     * </pre>
     *
     * <code>optional uint64 outgoing_chan_id = 9;</code>
     */
    private void setOutgoingChanId(long value) {
      
      outgoingChanId_ = value;
    }
    /**
     * <pre>
     **
     *The channel id of the channel that must be taken to the first hop. If zero,
     *any channel may be used.
     * </pre>
     *
     * <code>optional uint64 outgoing_chan_id = 9;</code>
     */
    private void clearOutgoingChanId() {
      
      outgoingChanId_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!dest_.isEmpty()) {
        output.writeBytes(1, dest_);
      }
      if (!destString_.isEmpty()) {
        output.writeString(2, getDestString());
      }
      if (amt_ != 0L) {
        output.writeInt64(3, amt_);
      }
      if (!paymentHash_.isEmpty()) {
        output.writeBytes(4, paymentHash_);
      }
      if (!paymentHashString_.isEmpty()) {
        output.writeString(5, getPaymentHashString());
      }
      if (!paymentRequest_.isEmpty()) {
        output.writeString(6, getPaymentRequest());
      }
      if (finalCltvDelta_ != 0) {
        output.writeInt32(7, finalCltvDelta_);
      }
      if (feeLimit_ != null) {
        output.writeMessage(8, getFeeLimit());
      }
      if (outgoingChanId_ != 0L) {
        output.writeUInt64(9, outgoingChanId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!dest_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, dest_);
      }
      if (!destString_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getDestString());
      }
      if (amt_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, amt_);
      }
      if (!paymentHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, paymentHash_);
      }
      if (!paymentHashString_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getPaymentHashString());
      }
      if (!paymentRequest_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getPaymentRequest());
      }
      if (finalCltvDelta_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, finalCltvDelta_);
      }
      if (feeLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getFeeLimit());
      }
      if (outgoingChanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(9, outgoingChanId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendRequest)
        lnrpc.Rpc.SendRequestOrBuilder {
      // Construct using lnrpc.Rpc.SendRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional bytes dest = 1;</code>
       */
      public com.google.protobuf.ByteString getDest() {
        return instance.getDest();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional bytes dest = 1;</code>
       */
      public Builder setDest(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDest(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional bytes dest = 1;</code>
       */
      public Builder clearDest() {
        copyOnWrite();
        instance.clearDest();
        return this;
      }

      /**
       * <pre>
       *&#47; The hex-encoded identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional string dest_string = 2;</code>
       */
      public java.lang.String getDestString() {
        return instance.getDestString();
      }
      /**
       * <pre>
       *&#47; The hex-encoded identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional string dest_string = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDestStringBytes() {
        return instance.getDestStringBytes();
      }
      /**
       * <pre>
       *&#47; The hex-encoded identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional string dest_string = 2;</code>
       */
      public Builder setDestString(
          java.lang.String value) {
        copyOnWrite();
        instance.setDestString(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hex-encoded identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional string dest_string = 2;</code>
       */
      public Builder clearDestString() {
        copyOnWrite();
        instance.clearDestString();
        return this;
      }
      /**
       * <pre>
       *&#47; The hex-encoded identity pubkey of the payment recipient
       * </pre>
       *
       * <code>optional string dest_string = 2;</code>
       */
      public Builder setDestStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDestStringBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Number of satoshis to send.
       * </pre>
       *
       * <code>optional int64 amt = 3;</code>
       */
      public long getAmt() {
        return instance.getAmt();
      }
      /**
       * <pre>
       *&#47; Number of satoshis to send.
       * </pre>
       *
       * <code>optional int64 amt = 3;</code>
       */
      public Builder setAmt(long value) {
        copyOnWrite();
        instance.setAmt(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Number of satoshis to send.
       * </pre>
       *
       * <code>optional int64 amt = 3;</code>
       */
      public Builder clearAmt() {
        copyOnWrite();
        instance.clearAmt();
        return this;
      }

      /**
       * <pre>
       *&#47; The hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional bytes payment_hash = 4;</code>
       */
      public com.google.protobuf.ByteString getPaymentHash() {
        return instance.getPaymentHash();
      }
      /**
       * <pre>
       *&#47; The hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional bytes payment_hash = 4;</code>
       */
      public Builder setPaymentHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional bytes payment_hash = 4;</code>
       */
      public Builder clearPaymentHash() {
        copyOnWrite();
        instance.clearPaymentHash();
        return this;
      }

      /**
       * <pre>
       *&#47; The hex-encoded hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional string payment_hash_string = 5;</code>
       */
      public java.lang.String getPaymentHashString() {
        return instance.getPaymentHashString();
      }
      /**
       * <pre>
       *&#47; The hex-encoded hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional string payment_hash_string = 5;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentHashStringBytes() {
        return instance.getPaymentHashStringBytes();
      }
      /**
       * <pre>
       *&#47; The hex-encoded hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional string payment_hash_string = 5;</code>
       */
      public Builder setPaymentHashString(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentHashString(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hex-encoded hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional string payment_hash_string = 5;</code>
       */
      public Builder clearPaymentHashString() {
        copyOnWrite();
        instance.clearPaymentHashString();
        return this;
      }
      /**
       * <pre>
       *&#47; The hex-encoded hash to use within the payment's HTLC
       * </pre>
       *
       * <code>optional string payment_hash_string = 5;</code>
       */
      public Builder setPaymentHashStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHashStringBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 6;</code>
       */
      public java.lang.String getPaymentRequest() {
        return instance.getPaymentRequest();
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 6;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentRequestBytes() {
        return instance.getPaymentRequestBytes();
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 6;</code>
       */
      public Builder setPaymentRequest(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentRequest(value);
        return this;
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 6;</code>
       */
      public Builder clearPaymentRequest() {
        copyOnWrite();
        instance.clearPaymentRequest();
        return this;
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 6;</code>
       */
      public Builder setPaymentRequestBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentRequestBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *The CLTV delta from the current height that should be used to set the
       *timelock for the final hop.
       * </pre>
       *
       * <code>optional int32 final_cltv_delta = 7;</code>
       */
      public int getFinalCltvDelta() {
        return instance.getFinalCltvDelta();
      }
      /**
       * <pre>
       **
       *The CLTV delta from the current height that should be used to set the
       *timelock for the final hop.
       * </pre>
       *
       * <code>optional int32 final_cltv_delta = 7;</code>
       */
      public Builder setFinalCltvDelta(int value) {
        copyOnWrite();
        instance.setFinalCltvDelta(value);
        return this;
      }
      /**
       * <pre>
       **
       *The CLTV delta from the current height that should be used to set the
       *timelock for the final hop.
       * </pre>
       *
       * <code>optional int32 final_cltv_delta = 7;</code>
       */
      public Builder clearFinalCltvDelta() {
        copyOnWrite();
        instance.clearFinalCltvDelta();
        return this;
      }

      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
       */
      public boolean hasFeeLimit() {
        return instance.hasFeeLimit();
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
       */
      public lnrpc.Rpc.FeeLimit getFeeLimit() {
        return instance.getFeeLimit();
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
       */
      public Builder setFeeLimit(lnrpc.Rpc.FeeLimit value) {
        copyOnWrite();
        instance.setFeeLimit(value);
        return this;
        }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
       */
      public Builder setFeeLimit(
          lnrpc.Rpc.FeeLimit.Builder builderForValue) {
        copyOnWrite();
        instance.setFeeLimit(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
       */
      public Builder mergeFeeLimit(lnrpc.Rpc.FeeLimit value) {
        copyOnWrite();
        instance.mergeFeeLimit(value);
        return this;
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 8;</code>
       */
      public Builder clearFeeLimit() {  copyOnWrite();
        instance.clearFeeLimit();
        return this;
      }

      /**
       * <pre>
       **
       *The channel id of the channel that must be taken to the first hop. If zero,
       *any channel may be used.
       * </pre>
       *
       * <code>optional uint64 outgoing_chan_id = 9;</code>
       */
      public long getOutgoingChanId() {
        return instance.getOutgoingChanId();
      }
      /**
       * <pre>
       **
       *The channel id of the channel that must be taken to the first hop. If zero,
       *any channel may be used.
       * </pre>
       *
       * <code>optional uint64 outgoing_chan_id = 9;</code>
       */
      public Builder setOutgoingChanId(long value) {
        copyOnWrite();
        instance.setOutgoingChanId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The channel id of the channel that must be taken to the first hop. If zero,
       *any channel may be used.
       * </pre>
       *
       * <code>optional uint64 outgoing_chan_id = 9;</code>
       */
      public Builder clearOutgoingChanId() {
        copyOnWrite();
        instance.clearOutgoingChanId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendRequest other = (lnrpc.Rpc.SendRequest) arg1;
          dest_ = visitor.visitByteString(dest_ != com.google.protobuf.ByteString.EMPTY, dest_,
              other.dest_ != com.google.protobuf.ByteString.EMPTY, other.dest_);
          destString_ = visitor.visitString(!destString_.isEmpty(), destString_,
              !other.destString_.isEmpty(), other.destString_);
          amt_ = visitor.visitLong(amt_ != 0L, amt_,
              other.amt_ != 0L, other.amt_);
          paymentHash_ = visitor.visitByteString(paymentHash_ != com.google.protobuf.ByteString.EMPTY, paymentHash_,
              other.paymentHash_ != com.google.protobuf.ByteString.EMPTY, other.paymentHash_);
          paymentHashString_ = visitor.visitString(!paymentHashString_.isEmpty(), paymentHashString_,
              !other.paymentHashString_.isEmpty(), other.paymentHashString_);
          paymentRequest_ = visitor.visitString(!paymentRequest_.isEmpty(), paymentRequest_,
              !other.paymentRequest_.isEmpty(), other.paymentRequest_);
          finalCltvDelta_ = visitor.visitInt(finalCltvDelta_ != 0, finalCltvDelta_,
              other.finalCltvDelta_ != 0, other.finalCltvDelta_);
          feeLimit_ = visitor.visitMessage(feeLimit_, other.feeLimit_);
          outgoingChanId_ = visitor.visitLong(outgoingChanId_ != 0L, outgoingChanId_,
              other.outgoingChanId_ != 0L, other.outgoingChanId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  dest_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  destString_ = s;
                  break;
                }
                case 24: {

                  amt_ = input.readInt64();
                  break;
                }
                case 34: {

                  paymentHash_ = input.readBytes();
                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  paymentHashString_ = s;
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  paymentRequest_ = s;
                  break;
                }
                case 56: {

                  finalCltvDelta_ = input.readInt32();
                  break;
                }
                case 66: {
                  lnrpc.Rpc.FeeLimit.Builder subBuilder = null;
                  if (feeLimit_ != null) {
                    subBuilder = feeLimit_.toBuilder();
                  }
                  feeLimit_ = input.readMessage(lnrpc.Rpc.FeeLimit.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(feeLimit_);
                    feeLimit_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 72: {

                  outgoingChanId_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendRequest)
    private static final lnrpc.Rpc.SendRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendRequest> PARSER;

    public static com.google.protobuf.Parser<SendRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string payment_error = 1;</code>
     */
    java.lang.String getPaymentError();
    /**
     * <code>optional string payment_error = 1;</code>
     */
    com.google.protobuf.ByteString
        getPaymentErrorBytes();

    /**
     * <code>optional bytes payment_preimage = 2;</code>
     */
    com.google.protobuf.ByteString getPaymentPreimage();

    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    boolean hasPaymentRoute();
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    lnrpc.Rpc.Route getPaymentRoute();

    /**
     * <code>optional bytes payment_hash = 4;</code>
     */
    com.google.protobuf.ByteString getPaymentHash();
  }
  /**
   * Protobuf type {@code lnrpc.SendResponse}
   */
  public  static final class SendResponse extends
      com.google.protobuf.GeneratedMessageLite<
          SendResponse, SendResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendResponse)
      SendResponseOrBuilder {
    private SendResponse() {
      paymentError_ = "";
      paymentPreimage_ = com.google.protobuf.ByteString.EMPTY;
      paymentHash_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int PAYMENT_ERROR_FIELD_NUMBER = 1;
    private java.lang.String paymentError_;
    /**
     * <code>optional string payment_error = 1;</code>
     */
    public java.lang.String getPaymentError() {
      return paymentError_;
    }
    /**
     * <code>optional string payment_error = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentErrorBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentError_);
    }
    /**
     * <code>optional string payment_error = 1;</code>
     */
    private void setPaymentError(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentError_ = value;
    }
    /**
     * <code>optional string payment_error = 1;</code>
     */
    private void clearPaymentError() {
      
      paymentError_ = getDefaultInstance().getPaymentError();
    }
    /**
     * <code>optional string payment_error = 1;</code>
     */
    private void setPaymentErrorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentError_ = value.toStringUtf8();
    }

    public static final int PAYMENT_PREIMAGE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString paymentPreimage_;
    /**
     * <code>optional bytes payment_preimage = 2;</code>
     */
    public com.google.protobuf.ByteString getPaymentPreimage() {
      return paymentPreimage_;
    }
    /**
     * <code>optional bytes payment_preimage = 2;</code>
     */
    private void setPaymentPreimage(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentPreimage_ = value;
    }
    /**
     * <code>optional bytes payment_preimage = 2;</code>
     */
    private void clearPaymentPreimage() {
      
      paymentPreimage_ = getDefaultInstance().getPaymentPreimage();
    }

    public static final int PAYMENT_ROUTE_FIELD_NUMBER = 3;
    private lnrpc.Rpc.Route paymentRoute_;
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    public boolean hasPaymentRoute() {
      return paymentRoute_ != null;
    }
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    public lnrpc.Rpc.Route getPaymentRoute() {
      return paymentRoute_ == null ? lnrpc.Rpc.Route.getDefaultInstance() : paymentRoute_;
    }
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    private void setPaymentRoute(lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      paymentRoute_ = value;
      
      }
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    private void setPaymentRoute(
        lnrpc.Rpc.Route.Builder builderForValue) {
      paymentRoute_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    private void mergePaymentRoute(lnrpc.Rpc.Route value) {
      if (paymentRoute_ != null &&
          paymentRoute_ != lnrpc.Rpc.Route.getDefaultInstance()) {
        paymentRoute_ =
          lnrpc.Rpc.Route.newBuilder(paymentRoute_).mergeFrom(value).buildPartial();
      } else {
        paymentRoute_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.Route payment_route = 3;</code>
     */
    private void clearPaymentRoute() {  paymentRoute_ = null;
      
    }

    public static final int PAYMENT_HASH_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString paymentHash_;
    /**
     * <code>optional bytes payment_hash = 4;</code>
     */
    public com.google.protobuf.ByteString getPaymentHash() {
      return paymentHash_;
    }
    /**
     * <code>optional bytes payment_hash = 4;</code>
     */
    private void setPaymentHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHash_ = value;
    }
    /**
     * <code>optional bytes payment_hash = 4;</code>
     */
    private void clearPaymentHash() {
      
      paymentHash_ = getDefaultInstance().getPaymentHash();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!paymentError_.isEmpty()) {
        output.writeString(1, getPaymentError());
      }
      if (!paymentPreimage_.isEmpty()) {
        output.writeBytes(2, paymentPreimage_);
      }
      if (paymentRoute_ != null) {
        output.writeMessage(3, getPaymentRoute());
      }
      if (!paymentHash_.isEmpty()) {
        output.writeBytes(4, paymentHash_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!paymentError_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPaymentError());
      }
      if (!paymentPreimage_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, paymentPreimage_);
      }
      if (paymentRoute_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPaymentRoute());
      }
      if (!paymentHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, paymentHash_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendResponse)
        lnrpc.Rpc.SendResponseOrBuilder {
      // Construct using lnrpc.Rpc.SendResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string payment_error = 1;</code>
       */
      public java.lang.String getPaymentError() {
        return instance.getPaymentError();
      }
      /**
       * <code>optional string payment_error = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentErrorBytes() {
        return instance.getPaymentErrorBytes();
      }
      /**
       * <code>optional string payment_error = 1;</code>
       */
      public Builder setPaymentError(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentError(value);
        return this;
      }
      /**
       * <code>optional string payment_error = 1;</code>
       */
      public Builder clearPaymentError() {
        copyOnWrite();
        instance.clearPaymentError();
        return this;
      }
      /**
       * <code>optional string payment_error = 1;</code>
       */
      public Builder setPaymentErrorBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentErrorBytes(value);
        return this;
      }

      /**
       * <code>optional bytes payment_preimage = 2;</code>
       */
      public com.google.protobuf.ByteString getPaymentPreimage() {
        return instance.getPaymentPreimage();
      }
      /**
       * <code>optional bytes payment_preimage = 2;</code>
       */
      public Builder setPaymentPreimage(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentPreimage(value);
        return this;
      }
      /**
       * <code>optional bytes payment_preimage = 2;</code>
       */
      public Builder clearPaymentPreimage() {
        copyOnWrite();
        instance.clearPaymentPreimage();
        return this;
      }

      /**
       * <code>optional .lnrpc.Route payment_route = 3;</code>
       */
      public boolean hasPaymentRoute() {
        return instance.hasPaymentRoute();
      }
      /**
       * <code>optional .lnrpc.Route payment_route = 3;</code>
       */
      public lnrpc.Rpc.Route getPaymentRoute() {
        return instance.getPaymentRoute();
      }
      /**
       * <code>optional .lnrpc.Route payment_route = 3;</code>
       */
      public Builder setPaymentRoute(lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.setPaymentRoute(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.Route payment_route = 3;</code>
       */
      public Builder setPaymentRoute(
          lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.setPaymentRoute(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.Route payment_route = 3;</code>
       */
      public Builder mergePaymentRoute(lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.mergePaymentRoute(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.Route payment_route = 3;</code>
       */
      public Builder clearPaymentRoute() {  copyOnWrite();
        instance.clearPaymentRoute();
        return this;
      }

      /**
       * <code>optional bytes payment_hash = 4;</code>
       */
      public com.google.protobuf.ByteString getPaymentHash() {
        return instance.getPaymentHash();
      }
      /**
       * <code>optional bytes payment_hash = 4;</code>
       */
      public Builder setPaymentHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHash(value);
        return this;
      }
      /**
       * <code>optional bytes payment_hash = 4;</code>
       */
      public Builder clearPaymentHash() {
        copyOnWrite();
        instance.clearPaymentHash();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendResponse other = (lnrpc.Rpc.SendResponse) arg1;
          paymentError_ = visitor.visitString(!paymentError_.isEmpty(), paymentError_,
              !other.paymentError_.isEmpty(), other.paymentError_);
          paymentPreimage_ = visitor.visitByteString(paymentPreimage_ != com.google.protobuf.ByteString.EMPTY, paymentPreimage_,
              other.paymentPreimage_ != com.google.protobuf.ByteString.EMPTY, other.paymentPreimage_);
          paymentRoute_ = visitor.visitMessage(paymentRoute_, other.paymentRoute_);
          paymentHash_ = visitor.visitByteString(paymentHash_ != com.google.protobuf.ByteString.EMPTY, paymentHash_,
              other.paymentHash_ != com.google.protobuf.ByteString.EMPTY, other.paymentHash_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  paymentError_ = s;
                  break;
                }
                case 18: {

                  paymentPreimage_ = input.readBytes();
                  break;
                }
                case 26: {
                  lnrpc.Rpc.Route.Builder subBuilder = null;
                  if (paymentRoute_ != null) {
                    subBuilder = paymentRoute_.toBuilder();
                  }
                  paymentRoute_ = input.readMessage(lnrpc.Rpc.Route.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(paymentRoute_);
                    paymentRoute_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 34: {

                  paymentHash_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendResponse)
    private static final lnrpc.Rpc.SendResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendResponse> PARSER;

    public static com.google.protobuf.Parser<SendResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendToRouteRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendToRouteRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The payment hash to use for the HTLC.
     * </pre>
     *
     * <code>optional bytes payment_hash = 1;</code>
     */
    com.google.protobuf.ByteString getPaymentHash();

    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    java.lang.String getPaymentHashString();
    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    com.google.protobuf.ByteString
        getPaymentHashStringBytes();

    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated java.util.List<lnrpc.Rpc.Route> 
        getRoutesList();
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated lnrpc.Rpc.Route getRoutes(int index);
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated int getRoutesCount();

    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    boolean hasRoute();
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    lnrpc.Rpc.Route getRoute();
  }
  /**
   * Protobuf type {@code lnrpc.SendToRouteRequest}
   */
  public  static final class SendToRouteRequest extends
      com.google.protobuf.GeneratedMessageLite<
          SendToRouteRequest, SendToRouteRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendToRouteRequest)
      SendToRouteRequestOrBuilder {
    private SendToRouteRequest() {
      paymentHash_ = com.google.protobuf.ByteString.EMPTY;
      paymentHashString_ = "";
      routes_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int PAYMENT_HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString paymentHash_;
    /**
     * <pre>
     *&#47; The payment hash to use for the HTLC.
     * </pre>
     *
     * <code>optional bytes payment_hash = 1;</code>
     */
    public com.google.protobuf.ByteString getPaymentHash() {
      return paymentHash_;
    }
    /**
     * <pre>
     *&#47; The payment hash to use for the HTLC.
     * </pre>
     *
     * <code>optional bytes payment_hash = 1;</code>
     */
    private void setPaymentHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHash_ = value;
    }
    /**
     * <pre>
     *&#47; The payment hash to use for the HTLC.
     * </pre>
     *
     * <code>optional bytes payment_hash = 1;</code>
     */
    private void clearPaymentHash() {
      
      paymentHash_ = getDefaultInstance().getPaymentHash();
    }

    public static final int PAYMENT_HASH_STRING_FIELD_NUMBER = 2;
    private java.lang.String paymentHashString_;
    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    public java.lang.String getPaymentHashString() {
      return paymentHashString_;
    }
    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentHashStringBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentHashString_);
    }
    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    private void setPaymentHashString(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHashString_ = value;
    }
    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    private void clearPaymentHashString() {
      
      paymentHashString_ = getDefaultInstance().getPaymentHashString();
    }
    /**
     * <pre>
     *&#47; An optional hex-encoded payment hash to be used for the HTLC.
     * </pre>
     *
     * <code>optional string payment_hash_string = 2;</code>
     */
    private void setPaymentHashStringBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentHashString_ = value.toStringUtf8();
    }

    public static final int ROUTES_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Route> routes_;
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<lnrpc.Rpc.Route> getRoutesList() {
      return routes_;
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<? extends lnrpc.Rpc.RouteOrBuilder> 
        getRoutesOrBuilderList() {
      return routes_;
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getRoutesCount() {
      return routes_.size();
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public lnrpc.Rpc.Route getRoutes(int index) {
      return routes_.get(index);
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public lnrpc.Rpc.RouteOrBuilder getRoutesOrBuilder(
        int index) {
      return routes_.get(index);
    }
    private void ensureRoutesIsMutable() {
      if (!routes_.isModifiable()) {
        routes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(routes_);
       }
    }

    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void setRoutes(
        int index, lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRoutesIsMutable();
      routes_.set(index, value);
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void setRoutes(
        int index, lnrpc.Rpc.Route.Builder builderForValue) {
      ensureRoutesIsMutable();
      routes_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void addRoutes(lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRoutesIsMutable();
      routes_.add(value);
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void addRoutes(
        int index, lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRoutesIsMutable();
      routes_.add(index, value);
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void addRoutes(
        lnrpc.Rpc.Route.Builder builderForValue) {
      ensureRoutesIsMutable();
      routes_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void addRoutes(
        int index, lnrpc.Rpc.Route.Builder builderForValue) {
      ensureRoutesIsMutable();
      routes_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void addAllRoutes(
        java.lang.Iterable<? extends lnrpc.Rpc.Route> values) {
      ensureRoutesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, routes_);
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void clearRoutes() {
      routes_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *Deprecated. The set of routes that should be used to attempt to complete the
     *payment. The possibility to pass in multiple routes is deprecated and 
     *instead the single route field below should be used in combination with the 
     *streaming variant of SendToRoute.
     * </pre>
     *
     * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
     */
    private void removeRoutes(int index) {
      ensureRoutesIsMutable();
      routes_.remove(index);
    }

    public static final int ROUTE_FIELD_NUMBER = 4;
    private lnrpc.Rpc.Route route_;
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    public boolean hasRoute() {
      return route_ != null;
    }
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    public lnrpc.Rpc.Route getRoute() {
      return route_ == null ? lnrpc.Rpc.Route.getDefaultInstance() : route_;
    }
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    private void setRoute(lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      route_ = value;
      
      }
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    private void setRoute(
        lnrpc.Rpc.Route.Builder builderForValue) {
      route_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    private void mergeRoute(lnrpc.Rpc.Route value) {
      if (route_ != null &&
          route_ != lnrpc.Rpc.Route.getDefaultInstance()) {
        route_ =
          lnrpc.Rpc.Route.newBuilder(route_).mergeFrom(value).buildPartial();
      } else {
        route_ = value;
      }
      
    }
    /**
     * <pre>
     *&#47; Route that should be used to attempt to complete the payment.
     * </pre>
     *
     * <code>optional .lnrpc.Route route = 4;</code>
     */
    private void clearRoute() {  route_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!paymentHash_.isEmpty()) {
        output.writeBytes(1, paymentHash_);
      }
      if (!paymentHashString_.isEmpty()) {
        output.writeString(2, getPaymentHashString());
      }
      for (int i = 0; i < routes_.size(); i++) {
        output.writeMessage(3, routes_.get(i));
      }
      if (route_ != null) {
        output.writeMessage(4, getRoute());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!paymentHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, paymentHash_);
      }
      if (!paymentHashString_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPaymentHashString());
      }
      for (int i = 0; i < routes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, routes_.get(i));
      }
      if (route_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getRoute());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendToRouteRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendToRouteRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendToRouteRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendToRouteRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendToRouteRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendToRouteRequest)
        lnrpc.Rpc.SendToRouteRequestOrBuilder {
      // Construct using lnrpc.Rpc.SendToRouteRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The payment hash to use for the HTLC.
       * </pre>
       *
       * <code>optional bytes payment_hash = 1;</code>
       */
      public com.google.protobuf.ByteString getPaymentHash() {
        return instance.getPaymentHash();
      }
      /**
       * <pre>
       *&#47; The payment hash to use for the HTLC.
       * </pre>
       *
       * <code>optional bytes payment_hash = 1;</code>
       */
      public Builder setPaymentHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The payment hash to use for the HTLC.
       * </pre>
       *
       * <code>optional bytes payment_hash = 1;</code>
       */
      public Builder clearPaymentHash() {
        copyOnWrite();
        instance.clearPaymentHash();
        return this;
      }

      /**
       * <pre>
       *&#47; An optional hex-encoded payment hash to be used for the HTLC.
       * </pre>
       *
       * <code>optional string payment_hash_string = 2;</code>
       */
      public java.lang.String getPaymentHashString() {
        return instance.getPaymentHashString();
      }
      /**
       * <pre>
       *&#47; An optional hex-encoded payment hash to be used for the HTLC.
       * </pre>
       *
       * <code>optional string payment_hash_string = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentHashStringBytes() {
        return instance.getPaymentHashStringBytes();
      }
      /**
       * <pre>
       *&#47; An optional hex-encoded payment hash to be used for the HTLC.
       * </pre>
       *
       * <code>optional string payment_hash_string = 2;</code>
       */
      public Builder setPaymentHashString(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentHashString(value);
        return this;
      }
      /**
       * <pre>
       *&#47; An optional hex-encoded payment hash to be used for the HTLC.
       * </pre>
       *
       * <code>optional string payment_hash_string = 2;</code>
       */
      public Builder clearPaymentHashString() {
        copyOnWrite();
        instance.clearPaymentHashString();
        return this;
      }
      /**
       * <pre>
       *&#47; An optional hex-encoded payment hash to be used for the HTLC.
       * </pre>
       *
       * <code>optional string payment_hash_string = 2;</code>
       */
      public Builder setPaymentHashStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHashStringBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public java.util.List<lnrpc.Rpc.Route> getRoutesList() {
        return java.util.Collections.unmodifiableList(
            instance.getRoutesList());
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public int getRoutesCount() {
        return instance.getRoutesCount();
      }/**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public lnrpc.Rpc.Route getRoutes(int index) {
        return instance.getRoutes(index);
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setRoutes(
          int index, lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.setRoutes(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setRoutes(
          int index, lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.setRoutes(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addRoutes(lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.addRoutes(value);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addRoutes(
          int index, lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.addRoutes(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addRoutes(
          lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.addRoutes(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addRoutes(
          int index, lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.addRoutes(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder addAllRoutes(
          java.lang.Iterable<? extends lnrpc.Rpc.Route> values) {
        copyOnWrite();
        instance.addAllRoutes(values);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearRoutes() {
        copyOnWrite();
        instance.clearRoutes();
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The set of routes that should be used to attempt to complete the
       *payment. The possibility to pass in multiple routes is deprecated and 
       *instead the single route field below should be used in combination with the 
       *streaming variant of SendToRoute.
       * </pre>
       *
       * <code>repeated .lnrpc.Route routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder removeRoutes(int index) {
        copyOnWrite();
        instance.removeRoutes(index);
        return this;
      }

      /**
       * <pre>
       *&#47; Route that should be used to attempt to complete the payment.
       * </pre>
       *
       * <code>optional .lnrpc.Route route = 4;</code>
       */
      public boolean hasRoute() {
        return instance.hasRoute();
      }
      /**
       * <pre>
       *&#47; Route that should be used to attempt to complete the payment.
       * </pre>
       *
       * <code>optional .lnrpc.Route route = 4;</code>
       */
      public lnrpc.Rpc.Route getRoute() {
        return instance.getRoute();
      }
      /**
       * <pre>
       *&#47; Route that should be used to attempt to complete the payment.
       * </pre>
       *
       * <code>optional .lnrpc.Route route = 4;</code>
       */
      public Builder setRoute(lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.setRoute(value);
        return this;
        }
      /**
       * <pre>
       *&#47; Route that should be used to attempt to complete the payment.
       * </pre>
       *
       * <code>optional .lnrpc.Route route = 4;</code>
       */
      public Builder setRoute(
          lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.setRoute(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Route that should be used to attempt to complete the payment.
       * </pre>
       *
       * <code>optional .lnrpc.Route route = 4;</code>
       */
      public Builder mergeRoute(lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.mergeRoute(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Route that should be used to attempt to complete the payment.
       * </pre>
       *
       * <code>optional .lnrpc.Route route = 4;</code>
       */
      public Builder clearRoute() {  copyOnWrite();
        instance.clearRoute();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendToRouteRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendToRouteRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          routes_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendToRouteRequest other = (lnrpc.Rpc.SendToRouteRequest) arg1;
          paymentHash_ = visitor.visitByteString(paymentHash_ != com.google.protobuf.ByteString.EMPTY, paymentHash_,
              other.paymentHash_ != com.google.protobuf.ByteString.EMPTY, other.paymentHash_);
          paymentHashString_ = visitor.visitString(!paymentHashString_.isEmpty(), paymentHashString_,
              !other.paymentHashString_.isEmpty(), other.paymentHashString_);
          routes_= visitor.visitList(routes_, other.routes_);
          route_ = visitor.visitMessage(route_, other.route_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  paymentHash_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  paymentHashString_ = s;
                  break;
                }
                case 26: {
                  if (!routes_.isModifiable()) {
                    routes_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(routes_);
                  }
                  routes_.add(
                      input.readMessage(lnrpc.Rpc.Route.parser(), extensionRegistry));
                  break;
                }
                case 34: {
                  lnrpc.Rpc.Route.Builder subBuilder = null;
                  if (route_ != null) {
                    subBuilder = route_.toBuilder();
                  }
                  route_ = input.readMessage(lnrpc.Rpc.Route.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(route_);
                    route_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendToRouteRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendToRouteRequest)
    private static final lnrpc.Rpc.SendToRouteRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendToRouteRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendToRouteRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendToRouteRequest> PARSER;

    public static com.google.protobuf.Parser<SendToRouteRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelPoint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Txid of the funding transaction
     * </pre>
     *
     * <code>optional bytes funding_txid_bytes = 1;</code>
     */
    com.google.protobuf.ByteString getFundingTxidBytes();

    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    java.lang.String getFundingTxidStr();
    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    com.google.protobuf.ByteString
        getFundingTxidStrBytes();

    /**
     * <pre>
     *&#47; The index of the output of the funding transaction
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    int getOutputIndex();

    public lnrpc.Rpc.ChannelPoint.FundingTxidCase getFundingTxidCase();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelPoint}
   */
  public  static final class ChannelPoint extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelPoint, ChannelPoint.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelPoint)
      ChannelPointOrBuilder {
    private ChannelPoint() {
    }
    private int fundingTxidCase_ = 0;
    private java.lang.Object fundingTxid_;
    public enum FundingTxidCase
        implements com.google.protobuf.Internal.EnumLite {
      FUNDING_TXID_BYTES(1),
      FUNDING_TXID_STR(2),
      FUNDINGTXID_NOT_SET(0);
      private final int value;
      private FundingTxidCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FundingTxidCase valueOf(int value) {
        return forNumber(value);
      }

      public static FundingTxidCase forNumber(int value) {
        switch (value) {
          case 1: return FUNDING_TXID_BYTES;
          case 2: return FUNDING_TXID_STR;
          case 0: return FUNDINGTXID_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public FundingTxidCase
    getFundingTxidCase() {
      return FundingTxidCase.forNumber(
          fundingTxidCase_);
    }

    private void clearFundingTxid() {
      fundingTxidCase_ = 0;
      fundingTxid_ = null;
    }

    public static final int FUNDING_TXID_BYTES_FIELD_NUMBER = 1;
    /**
     * <pre>
     *&#47; Txid of the funding transaction
     * </pre>
     *
     * <code>optional bytes funding_txid_bytes = 1;</code>
     */
    public com.google.protobuf.ByteString getFundingTxidBytes() {
      if (fundingTxidCase_ == 1) {
        return (com.google.protobuf.ByteString) fundingTxid_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     *&#47; Txid of the funding transaction
     * </pre>
     *
     * <code>optional bytes funding_txid_bytes = 1;</code>
     */
    private void setFundingTxidBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  fundingTxidCase_ = 1;
      fundingTxid_ = value;
    }
    /**
     * <pre>
     *&#47; Txid of the funding transaction
     * </pre>
     *
     * <code>optional bytes funding_txid_bytes = 1;</code>
     */
    private void clearFundingTxidBytes() {
      if (fundingTxidCase_ == 1) {
        fundingTxidCase_ = 0;
        fundingTxid_ = null;
      }
    }

    public static final int FUNDING_TXID_STR_FIELD_NUMBER = 2;
    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    public java.lang.String getFundingTxidStr() {
      java.lang.String ref = "";
      if (fundingTxidCase_ == 2) {
        ref = (java.lang.String) fundingTxid_;
      }
      return ref;
    }
    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFundingTxidStrBytes() {
      java.lang.String ref = "";
      if (fundingTxidCase_ == 2) {
        ref = (java.lang.String) fundingTxid_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    private void setFundingTxidStr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  fundingTxidCase_ = 2;
      fundingTxid_ = value;
    }
    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    private void clearFundingTxidStr() {
      if (fundingTxidCase_ == 2) {
        fundingTxidCase_ = 0;
        fundingTxid_ = null;
      }
    }
    /**
     * <pre>
     *&#47; Hex-encoded string representing the funding transaction
     * </pre>
     *
     * <code>optional string funding_txid_str = 2;</code>
     */
    private void setFundingTxidStrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      fundingTxidCase_ = 2;
      fundingTxid_ = value.toStringUtf8();
    }

    public static final int OUTPUT_INDEX_FIELD_NUMBER = 3;
    private int outputIndex_;
    /**
     * <pre>
     *&#47; The index of the output of the funding transaction
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    public int getOutputIndex() {
      return outputIndex_;
    }
    /**
     * <pre>
     *&#47; The index of the output of the funding transaction
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    private void setOutputIndex(int value) {
      
      outputIndex_ = value;
    }
    /**
     * <pre>
     *&#47; The index of the output of the funding transaction
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    private void clearOutputIndex() {
      
      outputIndex_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (fundingTxidCase_ == 1) {
        output.writeBytes(
            1, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) fundingTxid_));
      }
      if (fundingTxidCase_ == 2) {
        output.writeString(2, getFundingTxidStr());
      }
      if (outputIndex_ != 0) {
        output.writeUInt32(3, outputIndex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (fundingTxidCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              1, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) fundingTxid_));
      }
      if (fundingTxidCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getFundingTxidStr());
      }
      if (outputIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, outputIndex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelPoint, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelPoint)
        lnrpc.Rpc.ChannelPointOrBuilder {
      // Construct using lnrpc.Rpc.ChannelPoint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public FundingTxidCase
          getFundingTxidCase() {
        return instance.getFundingTxidCase();
      }

      public Builder clearFundingTxid() {
        copyOnWrite();
        instance.clearFundingTxid();
        return this;
      }


      /**
       * <pre>
       *&#47; Txid of the funding transaction
       * </pre>
       *
       * <code>optional bytes funding_txid_bytes = 1;</code>
       */
      public com.google.protobuf.ByteString getFundingTxidBytes() {
        return instance.getFundingTxidBytes();
      }
      /**
       * <pre>
       *&#47; Txid of the funding transaction
       * </pre>
       *
       * <code>optional bytes funding_txid_bytes = 1;</code>
       */
      public Builder setFundingTxidBytes(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFundingTxidBytes(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Txid of the funding transaction
       * </pre>
       *
       * <code>optional bytes funding_txid_bytes = 1;</code>
       */
      public Builder clearFundingTxidBytes() {
        copyOnWrite();
        instance.clearFundingTxidBytes();
        return this;
      }

      /**
       * <pre>
       *&#47; Hex-encoded string representing the funding transaction
       * </pre>
       *
       * <code>optional string funding_txid_str = 2;</code>
       */
      public java.lang.String getFundingTxidStr() {
        return instance.getFundingTxidStr();
      }
      /**
       * <pre>
       *&#47; Hex-encoded string representing the funding transaction
       * </pre>
       *
       * <code>optional string funding_txid_str = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFundingTxidStrBytes() {
        return instance.getFundingTxidStrBytes();
      }
      /**
       * <pre>
       *&#47; Hex-encoded string representing the funding transaction
       * </pre>
       *
       * <code>optional string funding_txid_str = 2;</code>
       */
      public Builder setFundingTxidStr(
          java.lang.String value) {
        copyOnWrite();
        instance.setFundingTxidStr(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Hex-encoded string representing the funding transaction
       * </pre>
       *
       * <code>optional string funding_txid_str = 2;</code>
       */
      public Builder clearFundingTxidStr() {
        copyOnWrite();
        instance.clearFundingTxidStr();
        return this;
      }
      /**
       * <pre>
       *&#47; Hex-encoded string representing the funding transaction
       * </pre>
       *
       * <code>optional string funding_txid_str = 2;</code>
       */
      public Builder setFundingTxidStrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFundingTxidStrBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The index of the output of the funding transaction
       * </pre>
       *
       * <code>optional uint32 output_index = 3;</code>
       */
      public int getOutputIndex() {
        return instance.getOutputIndex();
      }
      /**
       * <pre>
       *&#47; The index of the output of the funding transaction
       * </pre>
       *
       * <code>optional uint32 output_index = 3;</code>
       */
      public Builder setOutputIndex(int value) {
        copyOnWrite();
        instance.setOutputIndex(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The index of the output of the funding transaction
       * </pre>
       *
       * <code>optional uint32 output_index = 3;</code>
       */
      public Builder clearOutputIndex() {
        copyOnWrite();
        instance.clearOutputIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelPoint)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelPoint();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelPoint other = (lnrpc.Rpc.ChannelPoint) arg1;
          outputIndex_ = visitor.visitInt(outputIndex_ != 0, outputIndex_,
              other.outputIndex_ != 0, other.outputIndex_);
          switch (other.getFundingTxidCase()) {
            case FUNDING_TXID_BYTES: {
              fundingTxid_ = visitor.visitOneofByteString(
                  fundingTxidCase_ == 1, fundingTxid_, other.fundingTxid_);
              break;
            }
            case FUNDING_TXID_STR: {
              fundingTxid_ = visitor.visitOneofString(
                 fundingTxidCase_ == 2, fundingTxid_, other.fundingTxid_);
              break;
            }
            case FUNDINGTXID_NOT_SET: {
              visitor.visitOneofNotSet(fundingTxidCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.fundingTxidCase_ != 0) {
              fundingTxidCase_ = other.fundingTxidCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  fundingTxidCase_ = 1;
                  fundingTxid_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();
                  fundingTxidCase_ = 2;
                  fundingTxid_ = s;
                  break;
                }
                case 24: {

                  outputIndex_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelPoint.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelPoint)
    private static final lnrpc.Rpc.ChannelPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelPoint();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelPoint> PARSER;

    public static com.google.protobuf.Parser<ChannelPoint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface OutPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.OutPoint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Raw bytes representing the transaction id.
     * </pre>
     *
     * <code>optional bytes txid_bytes = 1;</code>
     */
    com.google.protobuf.ByteString getTxidBytes();

    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    java.lang.String getTxidStr();
    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    com.google.protobuf.ByteString
        getTxidStrBytes();

    /**
     * <pre>
     *&#47; The index of the output on the transaction.
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    int getOutputIndex();
  }
  /**
   * Protobuf type {@code lnrpc.OutPoint}
   */
  public  static final class OutPoint extends
      com.google.protobuf.GeneratedMessageLite<
          OutPoint, OutPoint.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.OutPoint)
      OutPointOrBuilder {
    private OutPoint() {
      txidBytes_ = com.google.protobuf.ByteString.EMPTY;
      txidStr_ = "";
    }
    public static final int TXID_BYTES_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString txidBytes_;
    /**
     * <pre>
     *&#47; Raw bytes representing the transaction id.
     * </pre>
     *
     * <code>optional bytes txid_bytes = 1;</code>
     */
    public com.google.protobuf.ByteString getTxidBytes() {
      return txidBytes_;
    }
    /**
     * <pre>
     *&#47; Raw bytes representing the transaction id.
     * </pre>
     *
     * <code>optional bytes txid_bytes = 1;</code>
     */
    private void setTxidBytes(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      txidBytes_ = value;
    }
    /**
     * <pre>
     *&#47; Raw bytes representing the transaction id.
     * </pre>
     *
     * <code>optional bytes txid_bytes = 1;</code>
     */
    private void clearTxidBytes() {
      
      txidBytes_ = getDefaultInstance().getTxidBytes();
    }

    public static final int TXID_STR_FIELD_NUMBER = 2;
    private java.lang.String txidStr_;
    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    public java.lang.String getTxidStr() {
      return txidStr_;
    }
    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTxidStrBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(txidStr_);
    }
    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    private void setTxidStr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      txidStr_ = value;
    }
    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    private void clearTxidStr() {
      
      txidStr_ = getDefaultInstance().getTxidStr();
    }
    /**
     * <pre>
     *&#47; Reversed, hex-encoded string representing the transaction id.
     * </pre>
     *
     * <code>optional string txid_str = 2;</code>
     */
    private void setTxidStrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      txidStr_ = value.toStringUtf8();
    }

    public static final int OUTPUT_INDEX_FIELD_NUMBER = 3;
    private int outputIndex_;
    /**
     * <pre>
     *&#47; The index of the output on the transaction.
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    public int getOutputIndex() {
      return outputIndex_;
    }
    /**
     * <pre>
     *&#47; The index of the output on the transaction.
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    private void setOutputIndex(int value) {
      
      outputIndex_ = value;
    }
    /**
     * <pre>
     *&#47; The index of the output on the transaction.
     * </pre>
     *
     * <code>optional uint32 output_index = 3;</code>
     */
    private void clearOutputIndex() {
      
      outputIndex_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!txidBytes_.isEmpty()) {
        output.writeBytes(1, txidBytes_);
      }
      if (!txidStr_.isEmpty()) {
        output.writeString(2, getTxidStr());
      }
      if (outputIndex_ != 0) {
        output.writeUInt32(3, outputIndex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!txidBytes_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, txidBytes_);
      }
      if (!txidStr_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getTxidStr());
      }
      if (outputIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, outputIndex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.OutPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.OutPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OutPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OutPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.OutPoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.OutPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.OutPoint, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.OutPoint)
        lnrpc.Rpc.OutPointOrBuilder {
      // Construct using lnrpc.Rpc.OutPoint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Raw bytes representing the transaction id.
       * </pre>
       *
       * <code>optional bytes txid_bytes = 1;</code>
       */
      public com.google.protobuf.ByteString getTxidBytes() {
        return instance.getTxidBytes();
      }
      /**
       * <pre>
       *&#47; Raw bytes representing the transaction id.
       * </pre>
       *
       * <code>optional bytes txid_bytes = 1;</code>
       */
      public Builder setTxidBytes(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTxidBytes(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Raw bytes representing the transaction id.
       * </pre>
       *
       * <code>optional bytes txid_bytes = 1;</code>
       */
      public Builder clearTxidBytes() {
        copyOnWrite();
        instance.clearTxidBytes();
        return this;
      }

      /**
       * <pre>
       *&#47; Reversed, hex-encoded string representing the transaction id.
       * </pre>
       *
       * <code>optional string txid_str = 2;</code>
       */
      public java.lang.String getTxidStr() {
        return instance.getTxidStr();
      }
      /**
       * <pre>
       *&#47; Reversed, hex-encoded string representing the transaction id.
       * </pre>
       *
       * <code>optional string txid_str = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTxidStrBytes() {
        return instance.getTxidStrBytes();
      }
      /**
       * <pre>
       *&#47; Reversed, hex-encoded string representing the transaction id.
       * </pre>
       *
       * <code>optional string txid_str = 2;</code>
       */
      public Builder setTxidStr(
          java.lang.String value) {
        copyOnWrite();
        instance.setTxidStr(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Reversed, hex-encoded string representing the transaction id.
       * </pre>
       *
       * <code>optional string txid_str = 2;</code>
       */
      public Builder clearTxidStr() {
        copyOnWrite();
        instance.clearTxidStr();
        return this;
      }
      /**
       * <pre>
       *&#47; Reversed, hex-encoded string representing the transaction id.
       * </pre>
       *
       * <code>optional string txid_str = 2;</code>
       */
      public Builder setTxidStrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTxidStrBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The index of the output on the transaction.
       * </pre>
       *
       * <code>optional uint32 output_index = 3;</code>
       */
      public int getOutputIndex() {
        return instance.getOutputIndex();
      }
      /**
       * <pre>
       *&#47; The index of the output on the transaction.
       * </pre>
       *
       * <code>optional uint32 output_index = 3;</code>
       */
      public Builder setOutputIndex(int value) {
        copyOnWrite();
        instance.setOutputIndex(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The index of the output on the transaction.
       * </pre>
       *
       * <code>optional uint32 output_index = 3;</code>
       */
      public Builder clearOutputIndex() {
        copyOnWrite();
        instance.clearOutputIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.OutPoint)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.OutPoint();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.OutPoint other = (lnrpc.Rpc.OutPoint) arg1;
          txidBytes_ = visitor.visitByteString(txidBytes_ != com.google.protobuf.ByteString.EMPTY, txidBytes_,
              other.txidBytes_ != com.google.protobuf.ByteString.EMPTY, other.txidBytes_);
          txidStr_ = visitor.visitString(!txidStr_.isEmpty(), txidStr_,
              !other.txidStr_.isEmpty(), other.txidStr_);
          outputIndex_ = visitor.visitInt(outputIndex_ != 0, outputIndex_,
              other.outputIndex_ != 0, other.outputIndex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  txidBytes_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  txidStr_ = s;
                  break;
                }
                case 24: {

                  outputIndex_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.OutPoint.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.OutPoint)
    private static final lnrpc.Rpc.OutPoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OutPoint();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.OutPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<OutPoint> PARSER;

    public static com.google.protobuf.Parser<OutPoint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LightningAddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.LightningAddress)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    java.lang.String getPubkey();
    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    com.google.protobuf.ByteString
        getPubkeyBytes();

    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    java.lang.String getHost();
    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    com.google.protobuf.ByteString
        getHostBytes();
  }
  /**
   * Protobuf type {@code lnrpc.LightningAddress}
   */
  public  static final class LightningAddress extends
      com.google.protobuf.GeneratedMessageLite<
          LightningAddress, LightningAddress.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.LightningAddress)
      LightningAddressOrBuilder {
    private LightningAddress() {
      pubkey_ = "";
      host_ = "";
    }
    public static final int PUBKEY_FIELD_NUMBER = 1;
    private java.lang.String pubkey_;
    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    public java.lang.String getPubkey() {
      return pubkey_;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPubkeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubkey_);
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    private void setPubkey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubkey_ = value;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    private void clearPubkey() {
      
      pubkey_ = getDefaultInstance().getPubkey();
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the Lightning node
     * </pre>
     *
     * <code>optional string pubkey = 1;</code>
     */
    private void setPubkeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubkey_ = value.toStringUtf8();
    }

    public static final int HOST_FIELD_NUMBER = 2;
    private java.lang.String host_;
    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    public java.lang.String getHost() {
      return host_;
    }
    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    public com.google.protobuf.ByteString
        getHostBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(host_);
    }
    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    private void setHost(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      host_ = value;
    }
    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    private void clearHost() {
      
      host_ = getDefaultInstance().getHost();
    }
    /**
     * <pre>
     *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
     * </pre>
     *
     * <code>optional string host = 2;</code>
     */
    private void setHostBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      host_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!pubkey_.isEmpty()) {
        output.writeString(1, getPubkey());
      }
      if (!host_.isEmpty()) {
        output.writeString(2, getHost());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!pubkey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPubkey());
      }
      if (!host_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getHost());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.LightningAddress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningAddress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.LightningAddress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.LightningAddress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.LightningAddress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.LightningAddress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.LightningAddress, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.LightningAddress)
        lnrpc.Rpc.LightningAddressOrBuilder {
      // Construct using lnrpc.Rpc.LightningAddress.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The identity pubkey of the Lightning node
       * </pre>
       *
       * <code>optional string pubkey = 1;</code>
       */
      public java.lang.String getPubkey() {
        return instance.getPubkey();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the Lightning node
       * </pre>
       *
       * <code>optional string pubkey = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPubkeyBytes() {
        return instance.getPubkeyBytes();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the Lightning node
       * </pre>
       *
       * <code>optional string pubkey = 1;</code>
       */
      public Builder setPubkey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubkey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the Lightning node
       * </pre>
       *
       * <code>optional string pubkey = 1;</code>
       */
      public Builder clearPubkey() {
        copyOnWrite();
        instance.clearPubkey();
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the Lightning node
       * </pre>
       *
       * <code>optional string pubkey = 1;</code>
       */
      public Builder setPubkeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubkeyBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
       * </pre>
       *
       * <code>optional string host = 2;</code>
       */
      public java.lang.String getHost() {
        return instance.getHost();
      }
      /**
       * <pre>
       *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
       * </pre>
       *
       * <code>optional string host = 2;</code>
       */
      public com.google.protobuf.ByteString
          getHostBytes() {
        return instance.getHostBytes();
      }
      /**
       * <pre>
       *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
       * </pre>
       *
       * <code>optional string host = 2;</code>
       */
      public Builder setHost(
          java.lang.String value) {
        copyOnWrite();
        instance.setHost(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
       * </pre>
       *
       * <code>optional string host = 2;</code>
       */
      public Builder clearHost() {
        copyOnWrite();
        instance.clearHost();
        return this;
      }
      /**
       * <pre>
       *&#47; The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
       * </pre>
       *
       * <code>optional string host = 2;</code>
       */
      public Builder setHostBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHostBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.LightningAddress)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.LightningAddress();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.LightningAddress other = (lnrpc.Rpc.LightningAddress) arg1;
          pubkey_ = visitor.visitString(!pubkey_.isEmpty(), pubkey_,
              !other.pubkey_.isEmpty(), other.pubkey_);
          host_ = visitor.visitString(!host_.isEmpty(), host_,
              !other.host_.isEmpty(), other.host_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  pubkey_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  host_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.LightningAddress.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.LightningAddress)
    private static final lnrpc.Rpc.LightningAddress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new LightningAddress();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.LightningAddress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<LightningAddress> PARSER;

    public static com.google.protobuf.Parser<LightningAddress> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EstimateFeeRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.EstimateFeeRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    int getAddrToAmountCount();
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    boolean containsAddrToAmount(
        java.lang.String key);
    /**
     * Use {@link #getAddrToAmountMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getAddrToAmount();
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getAddrToAmountMap();
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    long getAddrToAmountOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    long getAddrToAmountOrThrow(
        java.lang.String key);

    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 2;</code>
     */
    int getTargetConf();
  }
  /**
   * Protobuf type {@code lnrpc.EstimateFeeRequest}
   */
  public  static final class EstimateFeeRequest extends
      com.google.protobuf.GeneratedMessageLite<
          EstimateFeeRequest, EstimateFeeRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.EstimateFeeRequest)
      EstimateFeeRequestOrBuilder {
    private EstimateFeeRequest() {
    }
    private int bitField0_;
    public static final int ADDRTOAMOUNT_FIELD_NUMBER = 1;
    private static final class AddrToAmountDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> addrToAmount_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetAddrToAmount() {
      return addrToAmount_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableAddrToAmount() {
      if (!addrToAmount_.isMutable()) {
        addrToAmount_ = addrToAmount_.mutableCopy();
      }
      return addrToAmount_;
    }

    public int getAddrToAmountCount() {
      return internalGetAddrToAmount().size();
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public boolean containsAddrToAmount(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAddrToAmount().containsKey(key);
    }
    /**
     * Use {@link #getAddrToAmountMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmount() {
      return getAddrToAmountMap();
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmountMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetAddrToAmount());
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public long getAddrToAmountOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetAddrToAmount();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public long getAddrToAmountOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetAddrToAmount();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts for the transaction.
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableAddrToAmountMap() {
      return internalGetMutableAddrToAmount();
    }

    public static final int TARGET_CONF_FIELD_NUMBER = 2;
    private int targetConf_;
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 2;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 2;</code>
     */
    private void setTargetConf(int value) {
      
      targetConf_ = value;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 2;</code>
     */
    private void clearTargetConf() {
      
      targetConf_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetAddrToAmount().entrySet()) {
        AddrToAmountDefaultEntryHolder.defaultEntry.serializeTo(
            output, 1, entry.getKey(), entry.getValue());
      }
      if (targetConf_ != 0) {
        output.writeInt32(2, targetConf_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetAddrToAmount().entrySet()) {
        size += AddrToAmountDefaultEntryHolder.defaultEntry.computeMessageSize(
          1, entry.getKey(), entry.getValue());
      }
      if (targetConf_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, targetConf_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EstimateFeeRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.EstimateFeeRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.EstimateFeeRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.EstimateFeeRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.EstimateFeeRequest)
        lnrpc.Rpc.EstimateFeeRequestOrBuilder {
      // Construct using lnrpc.Rpc.EstimateFeeRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }



      public int getAddrToAmountCount() {
        return instance.getAddrToAmountMap().size();
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public boolean containsAddrToAmount(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getAddrToAmountMap().containsKey(key);
      }

      public Builder clearAddrToAmount() {
        copyOnWrite();
        instance.getMutableAddrToAmountMap().clear();
        return this;
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public Builder removeAddrToAmount(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableAddrToAmountMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getAddrToAmountMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmount() {
        return getAddrToAmountMap();
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */
      public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmountMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getAddrToAmountMap());
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public long getAddrToAmountOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getAddrToAmountMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public long getAddrToAmountOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getAddrToAmountMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */
      public Builder putAddrToAmount(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        copyOnWrite();
        instance.getMutableAddrToAmountMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts for the transaction.
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */
      public Builder putAllAddrToAmount(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableAddrToAmountMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 2;</code>
       */
      public int getTargetConf() {
        return instance.getTargetConf();
      }
      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 2;</code>
       */
      public Builder setTargetConf(int value) {
        copyOnWrite();
        instance.setTargetConf(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 2;</code>
       */
      public Builder clearTargetConf() {
        copyOnWrite();
        instance.clearTargetConf();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.EstimateFeeRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.EstimateFeeRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          addrToAmount_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.EstimateFeeRequest other = (lnrpc.Rpc.EstimateFeeRequest) arg1;
          addrToAmount_ = visitor.visitMap(
              addrToAmount_, other.internalGetAddrToAmount());
          targetConf_ = visitor.visitInt(targetConf_ != 0, targetConf_,
              other.targetConf_ != 0, other.targetConf_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!addrToAmount_.isMutable()) {
                    addrToAmount_ = addrToAmount_.mutableCopy();
                  }
                  AddrToAmountDefaultEntryHolder.defaultEntry.parseInto(addrToAmount_, input, extensionRegistry);  break;
                }
                case 16: {

                  targetConf_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.EstimateFeeRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.EstimateFeeRequest)
    private static final lnrpc.Rpc.EstimateFeeRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EstimateFeeRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.EstimateFeeRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EstimateFeeRequest> PARSER;

    public static com.google.protobuf.Parser<EstimateFeeRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EstimateFeeResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.EstimateFeeResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The total fee in satoshis.
     * </pre>
     *
     * <code>optional int64 fee_sat = 1;</code>
     */
    long getFeeSat();

    /**
     * <pre>
     *&#47; The fee rate in satoshi/byte.
     * </pre>
     *
     * <code>optional int64 feerate_sat_per_byte = 2;</code>
     */
    long getFeerateSatPerByte();
  }
  /**
   * Protobuf type {@code lnrpc.EstimateFeeResponse}
   */
  public  static final class EstimateFeeResponse extends
      com.google.protobuf.GeneratedMessageLite<
          EstimateFeeResponse, EstimateFeeResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.EstimateFeeResponse)
      EstimateFeeResponseOrBuilder {
    private EstimateFeeResponse() {
    }
    public static final int FEE_SAT_FIELD_NUMBER = 1;
    private long feeSat_;
    /**
     * <pre>
     *&#47; The total fee in satoshis.
     * </pre>
     *
     * <code>optional int64 fee_sat = 1;</code>
     */
    public long getFeeSat() {
      return feeSat_;
    }
    /**
     * <pre>
     *&#47; The total fee in satoshis.
     * </pre>
     *
     * <code>optional int64 fee_sat = 1;</code>
     */
    private void setFeeSat(long value) {
      
      feeSat_ = value;
    }
    /**
     * <pre>
     *&#47; The total fee in satoshis.
     * </pre>
     *
     * <code>optional int64 fee_sat = 1;</code>
     */
    private void clearFeeSat() {
      
      feeSat_ = 0L;
    }

    public static final int FEERATE_SAT_PER_BYTE_FIELD_NUMBER = 2;
    private long feerateSatPerByte_;
    /**
     * <pre>
     *&#47; The fee rate in satoshi/byte.
     * </pre>
     *
     * <code>optional int64 feerate_sat_per_byte = 2;</code>
     */
    public long getFeerateSatPerByte() {
      return feerateSatPerByte_;
    }
    /**
     * <pre>
     *&#47; The fee rate in satoshi/byte.
     * </pre>
     *
     * <code>optional int64 feerate_sat_per_byte = 2;</code>
     */
    private void setFeerateSatPerByte(long value) {
      
      feerateSatPerByte_ = value;
    }
    /**
     * <pre>
     *&#47; The fee rate in satoshi/byte.
     * </pre>
     *
     * <code>optional int64 feerate_sat_per_byte = 2;</code>
     */
    private void clearFeerateSatPerByte() {
      
      feerateSatPerByte_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (feeSat_ != 0L) {
        output.writeInt64(1, feeSat_);
      }
      if (feerateSatPerByte_ != 0L) {
        output.writeInt64(2, feerateSatPerByte_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (feeSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, feeSat_);
      }
      if (feerateSatPerByte_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, feerateSatPerByte_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EstimateFeeResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.EstimateFeeResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.EstimateFeeResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.EstimateFeeResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.EstimateFeeResponse)
        lnrpc.Rpc.EstimateFeeResponseOrBuilder {
      // Construct using lnrpc.Rpc.EstimateFeeResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The total fee in satoshis.
       * </pre>
       *
       * <code>optional int64 fee_sat = 1;</code>
       */
      public long getFeeSat() {
        return instance.getFeeSat();
      }
      /**
       * <pre>
       *&#47; The total fee in satoshis.
       * </pre>
       *
       * <code>optional int64 fee_sat = 1;</code>
       */
      public Builder setFeeSat(long value) {
        copyOnWrite();
        instance.setFeeSat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total fee in satoshis.
       * </pre>
       *
       * <code>optional int64 fee_sat = 1;</code>
       */
      public Builder clearFeeSat() {
        copyOnWrite();
        instance.clearFeeSat();
        return this;
      }

      /**
       * <pre>
       *&#47; The fee rate in satoshi/byte.
       * </pre>
       *
       * <code>optional int64 feerate_sat_per_byte = 2;</code>
       */
      public long getFeerateSatPerByte() {
        return instance.getFeerateSatPerByte();
      }
      /**
       * <pre>
       *&#47; The fee rate in satoshi/byte.
       * </pre>
       *
       * <code>optional int64 feerate_sat_per_byte = 2;</code>
       */
      public Builder setFeerateSatPerByte(long value) {
        copyOnWrite();
        instance.setFeerateSatPerByte(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The fee rate in satoshi/byte.
       * </pre>
       *
       * <code>optional int64 feerate_sat_per_byte = 2;</code>
       */
      public Builder clearFeerateSatPerByte() {
        copyOnWrite();
        instance.clearFeerateSatPerByte();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.EstimateFeeResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.EstimateFeeResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.EstimateFeeResponse other = (lnrpc.Rpc.EstimateFeeResponse) arg1;
          feeSat_ = visitor.visitLong(feeSat_ != 0L, feeSat_,
              other.feeSat_ != 0L, other.feeSat_);
          feerateSatPerByte_ = visitor.visitLong(feerateSatPerByte_ != 0L, feerateSatPerByte_,
              other.feerateSatPerByte_ != 0L, other.feerateSatPerByte_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  feeSat_ = input.readInt64();
                  break;
                }
                case 16: {

                  feerateSatPerByte_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.EstimateFeeResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.EstimateFeeResponse)
    private static final lnrpc.Rpc.EstimateFeeResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EstimateFeeResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.EstimateFeeResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EstimateFeeResponse> PARSER;

    public static com.google.protobuf.Parser<EstimateFeeResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendManyRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendManyRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    int getAddrToAmountCount();
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    boolean containsAddrToAmount(
        java.lang.String key);
    /**
     * Use {@link #getAddrToAmountMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getAddrToAmount();
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getAddrToAmountMap();
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    long getAddrToAmountOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    long getAddrToAmountOrThrow(
        java.lang.String key);

    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    int getTargetConf();

    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    long getSatPerByte();
  }
  /**
   * Protobuf type {@code lnrpc.SendManyRequest}
   */
  public  static final class SendManyRequest extends
      com.google.protobuf.GeneratedMessageLite<
          SendManyRequest, SendManyRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendManyRequest)
      SendManyRequestOrBuilder {
    private SendManyRequest() {
    }
    private int bitField0_;
    public static final int ADDRTOAMOUNT_FIELD_NUMBER = 1;
    private static final class AddrToAmountDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Long> addrToAmount_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetAddrToAmount() {
      return addrToAmount_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Long>
    internalGetMutableAddrToAmount() {
      if (!addrToAmount_.isMutable()) {
        addrToAmount_ = addrToAmount_.mutableCopy();
      }
      return addrToAmount_;
    }

    public int getAddrToAmountCount() {
      return internalGetAddrToAmount().size();
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public boolean containsAddrToAmount(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAddrToAmount().containsKey(key);
    }
    /**
     * Use {@link #getAddrToAmountMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmount() {
      return getAddrToAmountMap();
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmountMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetAddrToAmount());
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public long getAddrToAmountOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetAddrToAmount();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */

    public long getAddrToAmountOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetAddrToAmount();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     *&#47; The map from addresses to amounts
     * </pre>
     *
     * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Long>
    getMutableAddrToAmountMap() {
      return internalGetMutableAddrToAmount();
    }

    public static final int TARGET_CONF_FIELD_NUMBER = 3;
    private int targetConf_;
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    private void setTargetConf(int value) {
      
      targetConf_ = value;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    private void clearTargetConf() {
      
      targetConf_ = 0;
    }

    public static final int SAT_PER_BYTE_FIELD_NUMBER = 5;
    private long satPerByte_;
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    public long getSatPerByte() {
      return satPerByte_;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    private void setSatPerByte(long value) {
      
      satPerByte_ = value;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    private void clearSatPerByte() {
      
      satPerByte_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetAddrToAmount().entrySet()) {
        AddrToAmountDefaultEntryHolder.defaultEntry.serializeTo(
            output, 1, entry.getKey(), entry.getValue());
      }
      if (targetConf_ != 0) {
        output.writeInt32(3, targetConf_);
      }
      if (satPerByte_ != 0L) {
        output.writeInt64(5, satPerByte_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetAddrToAmount().entrySet()) {
        size += AddrToAmountDefaultEntryHolder.defaultEntry.computeMessageSize(
          1, entry.getKey(), entry.getValue());
      }
      if (targetConf_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, targetConf_);
      }
      if (satPerByte_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, satPerByte_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendManyRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendManyRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendManyRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendManyRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendManyRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendManyRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendManyRequest)
        lnrpc.Rpc.SendManyRequestOrBuilder {
      // Construct using lnrpc.Rpc.SendManyRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }



      public int getAddrToAmountCount() {
        return instance.getAddrToAmountMap().size();
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public boolean containsAddrToAmount(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getAddrToAmountMap().containsKey(key);
      }

      public Builder clearAddrToAmount() {
        copyOnWrite();
        instance.getMutableAddrToAmountMap().clear();
        return this;
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public Builder removeAddrToAmount(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableAddrToAmountMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getAddrToAmountMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmount() {
        return getAddrToAmountMap();
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */
      public java.util.Map<java.lang.String, java.lang.Long> getAddrToAmountMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getAddrToAmountMap());
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public long getAddrToAmountOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getAddrToAmountMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */

      public long getAddrToAmountOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            instance.getAddrToAmountMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */
      public Builder putAddrToAmount(
          java.lang.String key,
          long value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        copyOnWrite();
        instance.getMutableAddrToAmountMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The map from addresses to amounts
       * </pre>
       *
       * <code>map&lt;string, int64&gt; AddrToAmount = 1;</code>
       */
      public Builder putAllAddrToAmount(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        copyOnWrite();
        instance.getMutableAddrToAmountMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public int getTargetConf() {
        return instance.getTargetConf();
      }
      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public Builder setTargetConf(int value) {
        copyOnWrite();
        instance.setTargetConf(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public Builder clearTargetConf() {
        copyOnWrite();
        instance.clearTargetConf();
        return this;
      }

      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 5;</code>
       */
      public long getSatPerByte() {
        return instance.getSatPerByte();
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 5;</code>
       */
      public Builder setSatPerByte(long value) {
        copyOnWrite();
        instance.setSatPerByte(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 5;</code>
       */
      public Builder clearSatPerByte() {
        copyOnWrite();
        instance.clearSatPerByte();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendManyRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendManyRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          addrToAmount_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendManyRequest other = (lnrpc.Rpc.SendManyRequest) arg1;
          addrToAmount_ = visitor.visitMap(
              addrToAmount_, other.internalGetAddrToAmount());
          targetConf_ = visitor.visitInt(targetConf_ != 0, targetConf_,
              other.targetConf_ != 0, other.targetConf_);
          satPerByte_ = visitor.visitLong(satPerByte_ != 0L, satPerByte_,
              other.satPerByte_ != 0L, other.satPerByte_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!addrToAmount_.isMutable()) {
                    addrToAmount_ = addrToAmount_.mutableCopy();
                  }
                  AddrToAmountDefaultEntryHolder.defaultEntry.parseInto(addrToAmount_, input, extensionRegistry);  break;
                }
                case 24: {

                  targetConf_ = input.readInt32();
                  break;
                }
                case 40: {

                  satPerByte_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendManyRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendManyRequest)
    private static final lnrpc.Rpc.SendManyRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendManyRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendManyRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendManyRequest> PARSER;

    public static com.google.protobuf.Parser<SendManyRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendManyResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendManyResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    java.lang.String getTxid();
    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    com.google.protobuf.ByteString
        getTxidBytes();
  }
  /**
   * Protobuf type {@code lnrpc.SendManyResponse}
   */
  public  static final class SendManyResponse extends
      com.google.protobuf.GeneratedMessageLite<
          SendManyResponse, SendManyResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendManyResponse)
      SendManyResponseOrBuilder {
    private SendManyResponse() {
      txid_ = "";
    }
    public static final int TXID_FIELD_NUMBER = 1;
    private java.lang.String txid_;
    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    public java.lang.String getTxid() {
      return txid_;
    }
    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTxidBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(txid_);
    }
    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    private void setTxid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      txid_ = value;
    }
    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    private void clearTxid() {
      
      txid_ = getDefaultInstance().getTxid();
    }
    /**
     * <pre>
     *&#47; The id of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    private void setTxidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      txid_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!txid_.isEmpty()) {
        output.writeString(1, getTxid());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!txid_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTxid());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendManyResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendManyResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendManyResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendManyResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendManyResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendManyResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendManyResponse)
        lnrpc.Rpc.SendManyResponseOrBuilder {
      // Construct using lnrpc.Rpc.SendManyResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The id of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public java.lang.String getTxid() {
        return instance.getTxid();
      }
      /**
       * <pre>
       *&#47; The id of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTxidBytes() {
        return instance.getTxidBytes();
      }
      /**
       * <pre>
       *&#47; The id of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public Builder setTxid(
          java.lang.String value) {
        copyOnWrite();
        instance.setTxid(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The id of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public Builder clearTxid() {
        copyOnWrite();
        instance.clearTxid();
        return this;
      }
      /**
       * <pre>
       *&#47; The id of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public Builder setTxidBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTxidBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendManyResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendManyResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendManyResponse other = (lnrpc.Rpc.SendManyResponse) arg1;
          txid_ = visitor.visitString(!txid_.isEmpty(), txid_,
              !other.txid_.isEmpty(), other.txid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  txid_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendManyResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendManyResponse)
    private static final lnrpc.Rpc.SendManyResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendManyResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendManyResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendManyResponse> PARSER;

    public static com.google.protobuf.Parser<SendManyResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendCoinsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendCoinsRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    java.lang.String getAddr();
    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    com.google.protobuf.ByteString
        getAddrBytes();

    /**
     * <pre>
     *&#47; The amount in satoshis to send
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    long getAmount();

    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    int getTargetConf();

    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    long getSatPerByte();

    /**
     * <pre>
     **
     *If set, then the amount field will be ignored, and lnd will attempt to
     *send all the coins under control of the internal wallet to the specified
     *address.
     * </pre>
     *
     * <code>optional bool send_all = 6;</code>
     */
    boolean getSendAll();
  }
  /**
   * Protobuf type {@code lnrpc.SendCoinsRequest}
   */
  public  static final class SendCoinsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          SendCoinsRequest, SendCoinsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendCoinsRequest)
      SendCoinsRequestOrBuilder {
    private SendCoinsRequest() {
      addr_ = "";
    }
    public static final int ADDR_FIELD_NUMBER = 1;
    private java.lang.String addr_;
    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    public java.lang.String getAddr() {
      return addr_;
    }
    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAddrBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(addr_);
    }
    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    private void setAddr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      addr_ = value;
    }
    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    private void clearAddr() {
      
      addr_ = getDefaultInstance().getAddr();
    }
    /**
     * <pre>
     *&#47; The address to send coins to 
     * </pre>
     *
     * <code>optional string addr = 1;</code>
     */
    private void setAddrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      addr_ = value.toStringUtf8();
    }

    public static final int AMOUNT_FIELD_NUMBER = 2;
    private long amount_;
    /**
     * <pre>
     *&#47; The amount in satoshis to send
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    public long getAmount() {
      return amount_;
    }
    /**
     * <pre>
     *&#47; The amount in satoshis to send
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <pre>
     *&#47; The amount in satoshis to send
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static final int TARGET_CONF_FIELD_NUMBER = 3;
    private int targetConf_;
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    private void setTargetConf(int value) {
      
      targetConf_ = value;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that this transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    private void clearTargetConf() {
      
      targetConf_ = 0;
    }

    public static final int SAT_PER_BYTE_FIELD_NUMBER = 5;
    private long satPerByte_;
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    public long getSatPerByte() {
      return satPerByte_;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    private void setSatPerByte(long value) {
      
      satPerByte_ = value;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 5;</code>
     */
    private void clearSatPerByte() {
      
      satPerByte_ = 0L;
    }

    public static final int SEND_ALL_FIELD_NUMBER = 6;
    private boolean sendAll_;
    /**
     * <pre>
     **
     *If set, then the amount field will be ignored, and lnd will attempt to
     *send all the coins under control of the internal wallet to the specified
     *address.
     * </pre>
     *
     * <code>optional bool send_all = 6;</code>
     */
    public boolean getSendAll() {
      return sendAll_;
    }
    /**
     * <pre>
     **
     *If set, then the amount field will be ignored, and lnd will attempt to
     *send all the coins under control of the internal wallet to the specified
     *address.
     * </pre>
     *
     * <code>optional bool send_all = 6;</code>
     */
    private void setSendAll(boolean value) {
      
      sendAll_ = value;
    }
    /**
     * <pre>
     **
     *If set, then the amount field will be ignored, and lnd will attempt to
     *send all the coins under control of the internal wallet to the specified
     *address.
     * </pre>
     *
     * <code>optional bool send_all = 6;</code>
     */
    private void clearSendAll() {
      
      sendAll_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!addr_.isEmpty()) {
        output.writeString(1, getAddr());
      }
      if (amount_ != 0L) {
        output.writeInt64(2, amount_);
      }
      if (targetConf_ != 0) {
        output.writeInt32(3, targetConf_);
      }
      if (satPerByte_ != 0L) {
        output.writeInt64(5, satPerByte_);
      }
      if (sendAll_ != false) {
        output.writeBool(6, sendAll_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!addr_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getAddr());
      }
      if (amount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, amount_);
      }
      if (targetConf_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, targetConf_);
      }
      if (satPerByte_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, satPerByte_);
      }
      if (sendAll_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, sendAll_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendCoinsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendCoinsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendCoinsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendCoinsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendCoinsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendCoinsRequest)
        lnrpc.Rpc.SendCoinsRequestOrBuilder {
      // Construct using lnrpc.Rpc.SendCoinsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The address to send coins to 
       * </pre>
       *
       * <code>optional string addr = 1;</code>
       */
      public java.lang.String getAddr() {
        return instance.getAddr();
      }
      /**
       * <pre>
       *&#47; The address to send coins to 
       * </pre>
       *
       * <code>optional string addr = 1;</code>
       */
      public com.google.protobuf.ByteString
          getAddrBytes() {
        return instance.getAddrBytes();
      }
      /**
       * <pre>
       *&#47; The address to send coins to 
       * </pre>
       *
       * <code>optional string addr = 1;</code>
       */
      public Builder setAddr(
          java.lang.String value) {
        copyOnWrite();
        instance.setAddr(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The address to send coins to 
       * </pre>
       *
       * <code>optional string addr = 1;</code>
       */
      public Builder clearAddr() {
        copyOnWrite();
        instance.clearAddr();
        return this;
      }
      /**
       * <pre>
       *&#47; The address to send coins to 
       * </pre>
       *
       * <code>optional string addr = 1;</code>
       */
      public Builder setAddrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAddrBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The amount in satoshis to send
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <pre>
       *&#47; The amount in satoshis to send
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The amount in satoshis to send
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public int getTargetConf() {
        return instance.getTargetConf();
      }
      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public Builder setTargetConf(int value) {
        copyOnWrite();
        instance.setTargetConf(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The target number of blocks that this transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public Builder clearTargetConf() {
        copyOnWrite();
        instance.clearTargetConf();
        return this;
      }

      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 5;</code>
       */
      public long getSatPerByte() {
        return instance.getSatPerByte();
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 5;</code>
       */
      public Builder setSatPerByte(long value) {
        copyOnWrite();
        instance.setSatPerByte(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 5;</code>
       */
      public Builder clearSatPerByte() {
        copyOnWrite();
        instance.clearSatPerByte();
        return this;
      }

      /**
       * <pre>
       **
       *If set, then the amount field will be ignored, and lnd will attempt to
       *send all the coins under control of the internal wallet to the specified
       *address.
       * </pre>
       *
       * <code>optional bool send_all = 6;</code>
       */
      public boolean getSendAll() {
        return instance.getSendAll();
      }
      /**
       * <pre>
       **
       *If set, then the amount field will be ignored, and lnd will attempt to
       *send all the coins under control of the internal wallet to the specified
       *address.
       * </pre>
       *
       * <code>optional bool send_all = 6;</code>
       */
      public Builder setSendAll(boolean value) {
        copyOnWrite();
        instance.setSendAll(value);
        return this;
      }
      /**
       * <pre>
       **
       *If set, then the amount field will be ignored, and lnd will attempt to
       *send all the coins under control of the internal wallet to the specified
       *address.
       * </pre>
       *
       * <code>optional bool send_all = 6;</code>
       */
      public Builder clearSendAll() {
        copyOnWrite();
        instance.clearSendAll();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendCoinsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendCoinsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendCoinsRequest other = (lnrpc.Rpc.SendCoinsRequest) arg1;
          addr_ = visitor.visitString(!addr_.isEmpty(), addr_,
              !other.addr_.isEmpty(), other.addr_);
          amount_ = visitor.visitLong(amount_ != 0L, amount_,
              other.amount_ != 0L, other.amount_);
          targetConf_ = visitor.visitInt(targetConf_ != 0, targetConf_,
              other.targetConf_ != 0, other.targetConf_);
          satPerByte_ = visitor.visitLong(satPerByte_ != 0L, satPerByte_,
              other.satPerByte_ != 0L, other.satPerByte_);
          sendAll_ = visitor.visitBoolean(sendAll_ != false, sendAll_,
              other.sendAll_ != false, other.sendAll_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  addr_ = s;
                  break;
                }
                case 16: {

                  amount_ = input.readInt64();
                  break;
                }
                case 24: {

                  targetConf_ = input.readInt32();
                  break;
                }
                case 40: {

                  satPerByte_ = input.readInt64();
                  break;
                }
                case 48: {

                  sendAll_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendCoinsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendCoinsRequest)
    private static final lnrpc.Rpc.SendCoinsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendCoinsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendCoinsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendCoinsRequest> PARSER;

    public static com.google.protobuf.Parser<SendCoinsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SendCoinsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SendCoinsResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    java.lang.String getTxid();
    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    com.google.protobuf.ByteString
        getTxidBytes();
  }
  /**
   * Protobuf type {@code lnrpc.SendCoinsResponse}
   */
  public  static final class SendCoinsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          SendCoinsResponse, SendCoinsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SendCoinsResponse)
      SendCoinsResponseOrBuilder {
    private SendCoinsResponse() {
      txid_ = "";
    }
    public static final int TXID_FIELD_NUMBER = 1;
    private java.lang.String txid_;
    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    public java.lang.String getTxid() {
      return txid_;
    }
    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTxidBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(txid_);
    }
    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    private void setTxid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      txid_ = value;
    }
    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    private void clearTxid() {
      
      txid_ = getDefaultInstance().getTxid();
    }
    /**
     * <pre>
     *&#47; The transaction ID of the transaction
     * </pre>
     *
     * <code>optional string txid = 1;</code>
     */
    private void setTxidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      txid_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!txid_.isEmpty()) {
        output.writeString(1, getTxid());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!txid_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getTxid());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SendCoinsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SendCoinsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SendCoinsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SendCoinsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SendCoinsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SendCoinsResponse)
        lnrpc.Rpc.SendCoinsResponseOrBuilder {
      // Construct using lnrpc.Rpc.SendCoinsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The transaction ID of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public java.lang.String getTxid() {
        return instance.getTxid();
      }
      /**
       * <pre>
       *&#47; The transaction ID of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTxidBytes() {
        return instance.getTxidBytes();
      }
      /**
       * <pre>
       *&#47; The transaction ID of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public Builder setTxid(
          java.lang.String value) {
        copyOnWrite();
        instance.setTxid(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The transaction ID of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public Builder clearTxid() {
        copyOnWrite();
        instance.clearTxid();
        return this;
      }
      /**
       * <pre>
       *&#47; The transaction ID of the transaction
       * </pre>
       *
       * <code>optional string txid = 1;</code>
       */
      public Builder setTxidBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTxidBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SendCoinsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SendCoinsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SendCoinsResponse other = (lnrpc.Rpc.SendCoinsResponse) arg1;
          txid_ = visitor.visitString(!txid_.isEmpty(), txid_,
              !other.txid_.isEmpty(), other.txid_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  txid_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SendCoinsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SendCoinsResponse)
    private static final lnrpc.Rpc.SendCoinsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SendCoinsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SendCoinsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SendCoinsResponse> PARSER;

    public static com.google.protobuf.Parser<SendCoinsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListUnspentRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListUnspentRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The minimum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 min_confs = 1;</code>
     */
    int getMinConfs();

    /**
     * <pre>
     *&#47; The maximum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 max_confs = 2;</code>
     */
    int getMaxConfs();
  }
  /**
   * Protobuf type {@code lnrpc.ListUnspentRequest}
   */
  public  static final class ListUnspentRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ListUnspentRequest, ListUnspentRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListUnspentRequest)
      ListUnspentRequestOrBuilder {
    private ListUnspentRequest() {
    }
    public static final int MIN_CONFS_FIELD_NUMBER = 1;
    private int minConfs_;
    /**
     * <pre>
     *&#47; The minimum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 min_confs = 1;</code>
     */
    public int getMinConfs() {
      return minConfs_;
    }
    /**
     * <pre>
     *&#47; The minimum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 min_confs = 1;</code>
     */
    private void setMinConfs(int value) {
      
      minConfs_ = value;
    }
    /**
     * <pre>
     *&#47; The minimum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 min_confs = 1;</code>
     */
    private void clearMinConfs() {
      
      minConfs_ = 0;
    }

    public static final int MAX_CONFS_FIELD_NUMBER = 2;
    private int maxConfs_;
    /**
     * <pre>
     *&#47; The maximum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 max_confs = 2;</code>
     */
    public int getMaxConfs() {
      return maxConfs_;
    }
    /**
     * <pre>
     *&#47; The maximum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 max_confs = 2;</code>
     */
    private void setMaxConfs(int value) {
      
      maxConfs_ = value;
    }
    /**
     * <pre>
     *&#47; The maximum number of confirmations to be included.
     * </pre>
     *
     * <code>optional int32 max_confs = 2;</code>
     */
    private void clearMaxConfs() {
      
      maxConfs_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (minConfs_ != 0) {
        output.writeInt32(1, minConfs_);
      }
      if (maxConfs_ != 0) {
        output.writeInt32(2, maxConfs_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (minConfs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, minConfs_);
      }
      if (maxConfs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, maxConfs_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListUnspentRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListUnspentRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListUnspentRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListUnspentRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListUnspentRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListUnspentRequest)
        lnrpc.Rpc.ListUnspentRequestOrBuilder {
      // Construct using lnrpc.Rpc.ListUnspentRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The minimum number of confirmations to be included.
       * </pre>
       *
       * <code>optional int32 min_confs = 1;</code>
       */
      public int getMinConfs() {
        return instance.getMinConfs();
      }
      /**
       * <pre>
       *&#47; The minimum number of confirmations to be included.
       * </pre>
       *
       * <code>optional int32 min_confs = 1;</code>
       */
      public Builder setMinConfs(int value) {
        copyOnWrite();
        instance.setMinConfs(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The minimum number of confirmations to be included.
       * </pre>
       *
       * <code>optional int32 min_confs = 1;</code>
       */
      public Builder clearMinConfs() {
        copyOnWrite();
        instance.clearMinConfs();
        return this;
      }

      /**
       * <pre>
       *&#47; The maximum number of confirmations to be included.
       * </pre>
       *
       * <code>optional int32 max_confs = 2;</code>
       */
      public int getMaxConfs() {
        return instance.getMaxConfs();
      }
      /**
       * <pre>
       *&#47; The maximum number of confirmations to be included.
       * </pre>
       *
       * <code>optional int32 max_confs = 2;</code>
       */
      public Builder setMaxConfs(int value) {
        copyOnWrite();
        instance.setMaxConfs(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The maximum number of confirmations to be included.
       * </pre>
       *
       * <code>optional int32 max_confs = 2;</code>
       */
      public Builder clearMaxConfs() {
        copyOnWrite();
        instance.clearMaxConfs();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListUnspentRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListUnspentRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListUnspentRequest other = (lnrpc.Rpc.ListUnspentRequest) arg1;
          minConfs_ = visitor.visitInt(minConfs_ != 0, minConfs_,
              other.minConfs_ != 0, other.minConfs_);
          maxConfs_ = visitor.visitInt(maxConfs_ != 0, maxConfs_,
              other.maxConfs_ != 0, other.maxConfs_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  minConfs_ = input.readInt32();
                  break;
                }
                case 16: {

                  maxConfs_ = input.readInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListUnspentRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListUnspentRequest)
    private static final lnrpc.Rpc.ListUnspentRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListUnspentRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListUnspentRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListUnspentRequest> PARSER;

    public static com.google.protobuf.Parser<ListUnspentRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListUnspentResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListUnspentResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    java.util.List<lnrpc.Rpc.Utxo> 
        getUtxosList();
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    lnrpc.Rpc.Utxo getUtxos(int index);
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    int getUtxosCount();
  }
  /**
   * Protobuf type {@code lnrpc.ListUnspentResponse}
   */
  public  static final class ListUnspentResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ListUnspentResponse, ListUnspentResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListUnspentResponse)
      ListUnspentResponseOrBuilder {
    private ListUnspentResponse() {
      utxos_ = emptyProtobufList();
    }
    public static final int UTXOS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Utxo> utxos_;
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.Utxo> getUtxosList() {
      return utxos_;
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.UtxoOrBuilder> 
        getUtxosOrBuilderList() {
      return utxos_;
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    public int getUtxosCount() {
      return utxos_.size();
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    public lnrpc.Rpc.Utxo getUtxos(int index) {
      return utxos_.get(index);
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    public lnrpc.Rpc.UtxoOrBuilder getUtxosOrBuilder(
        int index) {
      return utxos_.get(index);
    }
    private void ensureUtxosIsMutable() {
      if (!utxos_.isModifiable()) {
        utxos_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(utxos_);
       }
    }

    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void setUtxos(
        int index, lnrpc.Rpc.Utxo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureUtxosIsMutable();
      utxos_.set(index, value);
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void setUtxos(
        int index, lnrpc.Rpc.Utxo.Builder builderForValue) {
      ensureUtxosIsMutable();
      utxos_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void addUtxos(lnrpc.Rpc.Utxo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureUtxosIsMutable();
      utxos_.add(value);
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void addUtxos(
        int index, lnrpc.Rpc.Utxo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureUtxosIsMutable();
      utxos_.add(index, value);
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void addUtxos(
        lnrpc.Rpc.Utxo.Builder builderForValue) {
      ensureUtxosIsMutable();
      utxos_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void addUtxos(
        int index, lnrpc.Rpc.Utxo.Builder builderForValue) {
      ensureUtxosIsMutable();
      utxos_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void addAllUtxos(
        java.lang.Iterable<? extends lnrpc.Rpc.Utxo> values) {
      ensureUtxosIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, utxos_);
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void clearUtxos() {
      utxos_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; A list of utxos
     * </pre>
     *
     * <code>repeated .lnrpc.Utxo utxos = 1;</code>
     */
    private void removeUtxos(int index) {
      ensureUtxosIsMutable();
      utxos_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < utxos_.size(); i++) {
        output.writeMessage(1, utxos_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < utxos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, utxos_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListUnspentResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListUnspentResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListUnspentResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListUnspentResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListUnspentResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListUnspentResponse)
        lnrpc.Rpc.ListUnspentResponseOrBuilder {
      // Construct using lnrpc.Rpc.ListUnspentResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.Utxo> getUtxosList() {
        return java.util.Collections.unmodifiableList(
            instance.getUtxosList());
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public int getUtxosCount() {
        return instance.getUtxosCount();
      }/**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public lnrpc.Rpc.Utxo getUtxos(int index) {
        return instance.getUtxos(index);
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder setUtxos(
          int index, lnrpc.Rpc.Utxo value) {
        copyOnWrite();
        instance.setUtxos(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder setUtxos(
          int index, lnrpc.Rpc.Utxo.Builder builderForValue) {
        copyOnWrite();
        instance.setUtxos(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder addUtxos(lnrpc.Rpc.Utxo value) {
        copyOnWrite();
        instance.addUtxos(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder addUtxos(
          int index, lnrpc.Rpc.Utxo value) {
        copyOnWrite();
        instance.addUtxos(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder addUtxos(
          lnrpc.Rpc.Utxo.Builder builderForValue) {
        copyOnWrite();
        instance.addUtxos(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder addUtxos(
          int index, lnrpc.Rpc.Utxo.Builder builderForValue) {
        copyOnWrite();
        instance.addUtxos(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder addAllUtxos(
          java.lang.Iterable<? extends lnrpc.Rpc.Utxo> values) {
        copyOnWrite();
        instance.addAllUtxos(values);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder clearUtxos() {
        copyOnWrite();
        instance.clearUtxos();
        return this;
      }
      /**
       * <pre>
       *&#47; A list of utxos
       * </pre>
       *
       * <code>repeated .lnrpc.Utxo utxos = 1;</code>
       */
      public Builder removeUtxos(int index) {
        copyOnWrite();
        instance.removeUtxos(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListUnspentResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListUnspentResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          utxos_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListUnspentResponse other = (lnrpc.Rpc.ListUnspentResponse) arg1;
          utxos_= visitor.visitList(utxos_, other.utxos_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!utxos_.isModifiable()) {
                    utxos_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(utxos_);
                  }
                  utxos_.add(
                      input.readMessage(lnrpc.Rpc.Utxo.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListUnspentResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListUnspentResponse)
    private static final lnrpc.Rpc.ListUnspentResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListUnspentResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListUnspentResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListUnspentResponse> PARSER;

    public static com.google.protobuf.Parser<ListUnspentResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NewAddressRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NewAddressRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    lnrpc.Rpc.AddressType getType();
  }
  /**
   * Protobuf type {@code lnrpc.NewAddressRequest}
   */
  public  static final class NewAddressRequest extends
      com.google.protobuf.GeneratedMessageLite<
          NewAddressRequest, NewAddressRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NewAddressRequest)
      NewAddressRequestOrBuilder {
    private NewAddressRequest() {
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    public lnrpc.Rpc.AddressType getType() {
      lnrpc.Rpc.AddressType result = lnrpc.Rpc.AddressType.forNumber(type_);
      return result == null ? lnrpc.Rpc.AddressType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    private void setType(lnrpc.Rpc.AddressType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <pre>
     *&#47; The address type
     * </pre>
     *
     * <code>optional .lnrpc.AddressType type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != lnrpc.Rpc.AddressType.WITNESS_PUBKEY_HASH.getNumber()) {
        output.writeEnum(1, type_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != lnrpc.Rpc.AddressType.WITNESS_PUBKEY_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NewAddressRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NewAddressRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NewAddressRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NewAddressRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NewAddressRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NewAddressRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NewAddressRequest)
        lnrpc.Rpc.NewAddressRequestOrBuilder {
      // Construct using lnrpc.Rpc.NewAddressRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The address type
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <pre>
       *&#47; The address type
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The address type
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public lnrpc.Rpc.AddressType getType() {
        return instance.getType();
      }
      /**
       * <pre>
       *&#47; The address type
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public Builder setType(lnrpc.Rpc.AddressType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The address type
       * </pre>
       *
       * <code>optional .lnrpc.AddressType type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NewAddressRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NewAddressRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NewAddressRequest other = (lnrpc.Rpc.NewAddressRequest) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NewAddressRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NewAddressRequest)
    private static final lnrpc.Rpc.NewAddressRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NewAddressRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NewAddressRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NewAddressRequest> PARSER;

    public static com.google.protobuf.Parser<NewAddressRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NewAddressResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NewAddressResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    java.lang.String getAddress();
    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    com.google.protobuf.ByteString
        getAddressBytes();
  }
  /**
   * Protobuf type {@code lnrpc.NewAddressResponse}
   */
  public  static final class NewAddressResponse extends
      com.google.protobuf.GeneratedMessageLite<
          NewAddressResponse, NewAddressResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NewAddressResponse)
      NewAddressResponseOrBuilder {
    private NewAddressResponse() {
      address_ = "";
    }
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private java.lang.String address_;
    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    public java.lang.String getAddress() {
      return address_;
    }
    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(address_);
    }
    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    private void setAddress(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      address_ = value;
    }
    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    private void clearAddress() {
      
      address_ = getDefaultInstance().getAddress();
    }
    /**
     * <pre>
     *&#47; The newly generated wallet address
     * </pre>
     *
     * <code>optional string address = 1;</code>
     */
    private void setAddressBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      address_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!address_.isEmpty()) {
        output.writeString(1, getAddress());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!address_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getAddress());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NewAddressResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NewAddressResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NewAddressResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NewAddressResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NewAddressResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NewAddressResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NewAddressResponse)
        lnrpc.Rpc.NewAddressResponseOrBuilder {
      // Construct using lnrpc.Rpc.NewAddressResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The newly generated wallet address
       * </pre>
       *
       * <code>optional string address = 1;</code>
       */
      public java.lang.String getAddress() {
        return instance.getAddress();
      }
      /**
       * <pre>
       *&#47; The newly generated wallet address
       * </pre>
       *
       * <code>optional string address = 1;</code>
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        return instance.getAddressBytes();
      }
      /**
       * <pre>
       *&#47; The newly generated wallet address
       * </pre>
       *
       * <code>optional string address = 1;</code>
       */
      public Builder setAddress(
          java.lang.String value) {
        copyOnWrite();
        instance.setAddress(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The newly generated wallet address
       * </pre>
       *
       * <code>optional string address = 1;</code>
       */
      public Builder clearAddress() {
        copyOnWrite();
        instance.clearAddress();
        return this;
      }
      /**
       * <pre>
       *&#47; The newly generated wallet address
       * </pre>
       *
       * <code>optional string address = 1;</code>
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAddressBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NewAddressResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NewAddressResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NewAddressResponse other = (lnrpc.Rpc.NewAddressResponse) arg1;
          address_ = visitor.visitString(!address_.isEmpty(), address_,
              !other.address_.isEmpty(), other.address_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  address_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NewAddressResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NewAddressResponse)
    private static final lnrpc.Rpc.NewAddressResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NewAddressResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NewAddressResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NewAddressResponse> PARSER;

    public static com.google.protobuf.Parser<NewAddressResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SignMessageRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SignMessageRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The message to be signed
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    com.google.protobuf.ByteString getMsg();
  }
  /**
   * Protobuf type {@code lnrpc.SignMessageRequest}
   */
  public  static final class SignMessageRequest extends
      com.google.protobuf.GeneratedMessageLite<
          SignMessageRequest, SignMessageRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SignMessageRequest)
      SignMessageRequestOrBuilder {
    private SignMessageRequest() {
      msg_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int MSG_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString msg_;
    /**
     * <pre>
     *&#47; The message to be signed
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    public com.google.protobuf.ByteString getMsg() {
      return msg_;
    }
    /**
     * <pre>
     *&#47; The message to be signed
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    private void setMsg(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      msg_ = value;
    }
    /**
     * <pre>
     *&#47; The message to be signed
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    private void clearMsg() {
      
      msg_ = getDefaultInstance().getMsg();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!msg_.isEmpty()) {
        output.writeBytes(1, msg_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!msg_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, msg_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SignMessageRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SignMessageRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SignMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SignMessageRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SignMessageRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SignMessageRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SignMessageRequest)
        lnrpc.Rpc.SignMessageRequestOrBuilder {
      // Construct using lnrpc.Rpc.SignMessageRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The message to be signed
       * </pre>
       *
       * <code>optional bytes msg = 1;</code>
       */
      public com.google.protobuf.ByteString getMsg() {
        return instance.getMsg();
      }
      /**
       * <pre>
       *&#47; The message to be signed
       * </pre>
       *
       * <code>optional bytes msg = 1;</code>
       */
      public Builder setMsg(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMsg(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The message to be signed
       * </pre>
       *
       * <code>optional bytes msg = 1;</code>
       */
      public Builder clearMsg() {
        copyOnWrite();
        instance.clearMsg();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SignMessageRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SignMessageRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SignMessageRequest other = (lnrpc.Rpc.SignMessageRequest) arg1;
          msg_ = visitor.visitByteString(msg_ != com.google.protobuf.ByteString.EMPTY, msg_,
              other.msg_ != com.google.protobuf.ByteString.EMPTY, other.msg_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  msg_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SignMessageRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SignMessageRequest)
    private static final lnrpc.Rpc.SignMessageRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SignMessageRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SignMessageRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SignMessageRequest> PARSER;

    public static com.google.protobuf.Parser<SignMessageRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SignMessageResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.SignMessageResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    java.lang.String getSignature();
    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    com.google.protobuf.ByteString
        getSignatureBytes();
  }
  /**
   * Protobuf type {@code lnrpc.SignMessageResponse}
   */
  public  static final class SignMessageResponse extends
      com.google.protobuf.GeneratedMessageLite<
          SignMessageResponse, SignMessageResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.SignMessageResponse)
      SignMessageResponseOrBuilder {
    private SignMessageResponse() {
      signature_ = "";
    }
    public static final int SIGNATURE_FIELD_NUMBER = 1;
    private java.lang.String signature_;
    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    public java.lang.String getSignature() {
      return signature_;
    }
    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSignatureBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(signature_);
    }
    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    private void setSignature(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      signature_ = value;
    }
    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    private void clearSignature() {
      
      signature_ = getDefaultInstance().getSignature();
    }
    /**
     * <pre>
     *&#47; The signature for the given message
     * </pre>
     *
     * <code>optional string signature = 1;</code>
     */
    private void setSignatureBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      signature_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!signature_.isEmpty()) {
        output.writeString(1, getSignature());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSignature());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.SignMessageResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SignMessageResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.SignMessageResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.SignMessageResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.SignMessageResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.SignMessageResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.SignMessageResponse)
        lnrpc.Rpc.SignMessageResponseOrBuilder {
      // Construct using lnrpc.Rpc.SignMessageResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The signature for the given message
       * </pre>
       *
       * <code>optional string signature = 1;</code>
       */
      public java.lang.String getSignature() {
        return instance.getSignature();
      }
      /**
       * <pre>
       *&#47; The signature for the given message
       * </pre>
       *
       * <code>optional string signature = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSignatureBytes() {
        return instance.getSignatureBytes();
      }
      /**
       * <pre>
       *&#47; The signature for the given message
       * </pre>
       *
       * <code>optional string signature = 1;</code>
       */
      public Builder setSignature(
          java.lang.String value) {
        copyOnWrite();
        instance.setSignature(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The signature for the given message
       * </pre>
       *
       * <code>optional string signature = 1;</code>
       */
      public Builder clearSignature() {
        copyOnWrite();
        instance.clearSignature();
        return this;
      }
      /**
       * <pre>
       *&#47; The signature for the given message
       * </pre>
       *
       * <code>optional string signature = 1;</code>
       */
      public Builder setSignatureBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSignatureBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.SignMessageResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.SignMessageResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.SignMessageResponse other = (lnrpc.Rpc.SignMessageResponse) arg1;
          signature_ = visitor.visitString(!signature_.isEmpty(), signature_,
              !other.signature_.isEmpty(), other.signature_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  signature_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.SignMessageResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.SignMessageResponse)
    private static final lnrpc.Rpc.SignMessageResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SignMessageResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.SignMessageResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SignMessageResponse> PARSER;

    public static com.google.protobuf.Parser<SignMessageResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VerifyMessageRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.VerifyMessageRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The message over which the signature is to be verified
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    com.google.protobuf.ByteString getMsg();

    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    java.lang.String getSignature();
    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    com.google.protobuf.ByteString
        getSignatureBytes();
  }
  /**
   * Protobuf type {@code lnrpc.VerifyMessageRequest}
   */
  public  static final class VerifyMessageRequest extends
      com.google.protobuf.GeneratedMessageLite<
          VerifyMessageRequest, VerifyMessageRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.VerifyMessageRequest)
      VerifyMessageRequestOrBuilder {
    private VerifyMessageRequest() {
      msg_ = com.google.protobuf.ByteString.EMPTY;
      signature_ = "";
    }
    public static final int MSG_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString msg_;
    /**
     * <pre>
     *&#47; The message over which the signature is to be verified
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    public com.google.protobuf.ByteString getMsg() {
      return msg_;
    }
    /**
     * <pre>
     *&#47; The message over which the signature is to be verified
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    private void setMsg(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      msg_ = value;
    }
    /**
     * <pre>
     *&#47; The message over which the signature is to be verified
     * </pre>
     *
     * <code>optional bytes msg = 1;</code>
     */
    private void clearMsg() {
      
      msg_ = getDefaultInstance().getMsg();
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private java.lang.String signature_;
    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    public java.lang.String getSignature() {
      return signature_;
    }
    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSignatureBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(signature_);
    }
    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    private void setSignature(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      signature_ = value;
    }
    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    private void clearSignature() {
      
      signature_ = getDefaultInstance().getSignature();
    }
    /**
     * <pre>
     *&#47; The signature to be verified over the given message
     * </pre>
     *
     * <code>optional string signature = 2;</code>
     */
    private void setSignatureBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      signature_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!msg_.isEmpty()) {
        output.writeBytes(1, msg_);
      }
      if (!signature_.isEmpty()) {
        output.writeString(2, getSignature());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!msg_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, msg_);
      }
      if (!signature_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getSignature());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.VerifyMessageRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.VerifyMessageRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.VerifyMessageRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.VerifyMessageRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.VerifyMessageRequest)
        lnrpc.Rpc.VerifyMessageRequestOrBuilder {
      // Construct using lnrpc.Rpc.VerifyMessageRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The message over which the signature is to be verified
       * </pre>
       *
       * <code>optional bytes msg = 1;</code>
       */
      public com.google.protobuf.ByteString getMsg() {
        return instance.getMsg();
      }
      /**
       * <pre>
       *&#47; The message over which the signature is to be verified
       * </pre>
       *
       * <code>optional bytes msg = 1;</code>
       */
      public Builder setMsg(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMsg(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The message over which the signature is to be verified
       * </pre>
       *
       * <code>optional bytes msg = 1;</code>
       */
      public Builder clearMsg() {
        copyOnWrite();
        instance.clearMsg();
        return this;
      }

      /**
       * <pre>
       *&#47; The signature to be verified over the given message
       * </pre>
       *
       * <code>optional string signature = 2;</code>
       */
      public java.lang.String getSignature() {
        return instance.getSignature();
      }
      /**
       * <pre>
       *&#47; The signature to be verified over the given message
       * </pre>
       *
       * <code>optional string signature = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSignatureBytes() {
        return instance.getSignatureBytes();
      }
      /**
       * <pre>
       *&#47; The signature to be verified over the given message
       * </pre>
       *
       * <code>optional string signature = 2;</code>
       */
      public Builder setSignature(
          java.lang.String value) {
        copyOnWrite();
        instance.setSignature(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The signature to be verified over the given message
       * </pre>
       *
       * <code>optional string signature = 2;</code>
       */
      public Builder clearSignature() {
        copyOnWrite();
        instance.clearSignature();
        return this;
      }
      /**
       * <pre>
       *&#47; The signature to be verified over the given message
       * </pre>
       *
       * <code>optional string signature = 2;</code>
       */
      public Builder setSignatureBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSignatureBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.VerifyMessageRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.VerifyMessageRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.VerifyMessageRequest other = (lnrpc.Rpc.VerifyMessageRequest) arg1;
          msg_ = visitor.visitByteString(msg_ != com.google.protobuf.ByteString.EMPTY, msg_,
              other.msg_ != com.google.protobuf.ByteString.EMPTY, other.msg_);
          signature_ = visitor.visitString(!signature_.isEmpty(), signature_,
              !other.signature_.isEmpty(), other.signature_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  msg_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  signature_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.VerifyMessageRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.VerifyMessageRequest)
    private static final lnrpc.Rpc.VerifyMessageRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VerifyMessageRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.VerifyMessageRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VerifyMessageRequest> PARSER;

    public static com.google.protobuf.Parser<VerifyMessageRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface VerifyMessageResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.VerifyMessageResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Whether the signature was valid over the given message
     * </pre>
     *
     * <code>optional bool valid = 1;</code>
     */
    boolean getValid();

    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    java.lang.String getPubkey();
    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    com.google.protobuf.ByteString
        getPubkeyBytes();
  }
  /**
   * Protobuf type {@code lnrpc.VerifyMessageResponse}
   */
  public  static final class VerifyMessageResponse extends
      com.google.protobuf.GeneratedMessageLite<
          VerifyMessageResponse, VerifyMessageResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.VerifyMessageResponse)
      VerifyMessageResponseOrBuilder {
    private VerifyMessageResponse() {
      pubkey_ = "";
    }
    public static final int VALID_FIELD_NUMBER = 1;
    private boolean valid_;
    /**
     * <pre>
     *&#47; Whether the signature was valid over the given message
     * </pre>
     *
     * <code>optional bool valid = 1;</code>
     */
    public boolean getValid() {
      return valid_;
    }
    /**
     * <pre>
     *&#47; Whether the signature was valid over the given message
     * </pre>
     *
     * <code>optional bool valid = 1;</code>
     */
    private void setValid(boolean value) {
      
      valid_ = value;
    }
    /**
     * <pre>
     *&#47; Whether the signature was valid over the given message
     * </pre>
     *
     * <code>optional bool valid = 1;</code>
     */
    private void clearValid() {
      
      valid_ = false;
    }

    public static final int PUBKEY_FIELD_NUMBER = 2;
    private java.lang.String pubkey_;
    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    public java.lang.String getPubkey() {
      return pubkey_;
    }
    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPubkeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubkey_);
    }
    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    private void setPubkey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubkey_ = value;
    }
    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    private void clearPubkey() {
      
      pubkey_ = getDefaultInstance().getPubkey();
    }
    /**
     * <pre>
     *&#47; The pubkey recovered from the signature
     * </pre>
     *
     * <code>optional string pubkey = 2;</code>
     */
    private void setPubkeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubkey_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (valid_ != false) {
        output.writeBool(1, valid_);
      }
      if (!pubkey_.isEmpty()) {
        output.writeString(2, getPubkey());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (valid_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, valid_);
      }
      if (!pubkey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPubkey());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.VerifyMessageResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.VerifyMessageResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.VerifyMessageResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.VerifyMessageResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.VerifyMessageResponse)
        lnrpc.Rpc.VerifyMessageResponseOrBuilder {
      // Construct using lnrpc.Rpc.VerifyMessageResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Whether the signature was valid over the given message
       * </pre>
       *
       * <code>optional bool valid = 1;</code>
       */
      public boolean getValid() {
        return instance.getValid();
      }
      /**
       * <pre>
       *&#47; Whether the signature was valid over the given message
       * </pre>
       *
       * <code>optional bool valid = 1;</code>
       */
      public Builder setValid(boolean value) {
        copyOnWrite();
        instance.setValid(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether the signature was valid over the given message
       * </pre>
       *
       * <code>optional bool valid = 1;</code>
       */
      public Builder clearValid() {
        copyOnWrite();
        instance.clearValid();
        return this;
      }

      /**
       * <pre>
       *&#47; The pubkey recovered from the signature
       * </pre>
       *
       * <code>optional string pubkey = 2;</code>
       */
      public java.lang.String getPubkey() {
        return instance.getPubkey();
      }
      /**
       * <pre>
       *&#47; The pubkey recovered from the signature
       * </pre>
       *
       * <code>optional string pubkey = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPubkeyBytes() {
        return instance.getPubkeyBytes();
      }
      /**
       * <pre>
       *&#47; The pubkey recovered from the signature
       * </pre>
       *
       * <code>optional string pubkey = 2;</code>
       */
      public Builder setPubkey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubkey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The pubkey recovered from the signature
       * </pre>
       *
       * <code>optional string pubkey = 2;</code>
       */
      public Builder clearPubkey() {
        copyOnWrite();
        instance.clearPubkey();
        return this;
      }
      /**
       * <pre>
       *&#47; The pubkey recovered from the signature
       * </pre>
       *
       * <code>optional string pubkey = 2;</code>
       */
      public Builder setPubkeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubkeyBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.VerifyMessageResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.VerifyMessageResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.VerifyMessageResponse other = (lnrpc.Rpc.VerifyMessageResponse) arg1;
          valid_ = visitor.visitBoolean(valid_ != false, valid_,
              other.valid_ != false, other.valid_);
          pubkey_ = visitor.visitString(!pubkey_.isEmpty(), pubkey_,
              !other.pubkey_.isEmpty(), other.pubkey_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  valid_ = input.readBool();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  pubkey_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.VerifyMessageResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.VerifyMessageResponse)
    private static final lnrpc.Rpc.VerifyMessageResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new VerifyMessageResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.VerifyMessageResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<VerifyMessageResponse> PARSER;

    public static com.google.protobuf.Parser<VerifyMessageResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ConnectPeerRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ConnectPeerRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    boolean hasAddr();
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    lnrpc.Rpc.LightningAddress getAddr();

    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>optional bool perm = 2;</code>
     */
    boolean getPerm();
  }
  /**
   * Protobuf type {@code lnrpc.ConnectPeerRequest}
   */
  public  static final class ConnectPeerRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ConnectPeerRequest, ConnectPeerRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ConnectPeerRequest)
      ConnectPeerRequestOrBuilder {
    private ConnectPeerRequest() {
    }
    public static final int ADDR_FIELD_NUMBER = 1;
    private lnrpc.Rpc.LightningAddress addr_;
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    public boolean hasAddr() {
      return addr_ != null;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    public lnrpc.Rpc.LightningAddress getAddr() {
      return addr_ == null ? lnrpc.Rpc.LightningAddress.getDefaultInstance() : addr_;
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    private void setAddr(lnrpc.Rpc.LightningAddress value) {
      if (value == null) {
        throw new NullPointerException();
      }
      addr_ = value;
      
      }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    private void setAddr(
        lnrpc.Rpc.LightningAddress.Builder builderForValue) {
      addr_ = builderForValue.build();
      
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    private void mergeAddr(lnrpc.Rpc.LightningAddress value) {
      if (addr_ != null &&
          addr_ != lnrpc.Rpc.LightningAddress.getDefaultInstance()) {
        addr_ =
          lnrpc.Rpc.LightningAddress.newBuilder(addr_).mergeFrom(value).buildPartial();
      } else {
        addr_ = value;
      }
      
    }
    /**
     * <pre>
     *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
     * </pre>
     *
     * <code>optional .lnrpc.LightningAddress addr = 1;</code>
     */
    private void clearAddr() {  addr_ = null;
      
    }

    public static final int PERM_FIELD_NUMBER = 2;
    private boolean perm_;
    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>optional bool perm = 2;</code>
     */
    public boolean getPerm() {
      return perm_;
    }
    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>optional bool perm = 2;</code>
     */
    private void setPerm(boolean value) {
      
      perm_ = value;
    }
    /**
     * <pre>
     ** If set, the daemon will attempt to persistently connect to the target
     * peer.  Otherwise, the call will be synchronous. 
     * </pre>
     *
     * <code>optional bool perm = 2;</code>
     */
    private void clearPerm() {
      
      perm_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (addr_ != null) {
        output.writeMessage(1, getAddr());
      }
      if (perm_ != false) {
        output.writeBool(2, perm_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (addr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAddr());
      }
      if (perm_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, perm_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConnectPeerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ConnectPeerRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ConnectPeerRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ConnectPeerRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ConnectPeerRequest)
        lnrpc.Rpc.ConnectPeerRequestOrBuilder {
      // Construct using lnrpc.Rpc.ConnectPeerRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
       * </pre>
       *
       * <code>optional .lnrpc.LightningAddress addr = 1;</code>
       */
      public boolean hasAddr() {
        return instance.hasAddr();
      }
      /**
       * <pre>
       *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
       * </pre>
       *
       * <code>optional .lnrpc.LightningAddress addr = 1;</code>
       */
      public lnrpc.Rpc.LightningAddress getAddr() {
        return instance.getAddr();
      }
      /**
       * <pre>
       *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
       * </pre>
       *
       * <code>optional .lnrpc.LightningAddress addr = 1;</code>
       */
      public Builder setAddr(lnrpc.Rpc.LightningAddress value) {
        copyOnWrite();
        instance.setAddr(value);
        return this;
        }
      /**
       * <pre>
       *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
       * </pre>
       *
       * <code>optional .lnrpc.LightningAddress addr = 1;</code>
       */
      public Builder setAddr(
          lnrpc.Rpc.LightningAddress.Builder builderForValue) {
        copyOnWrite();
        instance.setAddr(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
       * </pre>
       *
       * <code>optional .lnrpc.LightningAddress addr = 1;</code>
       */
      public Builder mergeAddr(lnrpc.Rpc.LightningAddress value) {
        copyOnWrite();
        instance.mergeAddr(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Lightning address of the peer, in the format `&lt;pubkey&gt;&#64;host`
       * </pre>
       *
       * <code>optional .lnrpc.LightningAddress addr = 1;</code>
       */
      public Builder clearAddr() {  copyOnWrite();
        instance.clearAddr();
        return this;
      }

      /**
       * <pre>
       ** If set, the daemon will attempt to persistently connect to the target
       * peer.  Otherwise, the call will be synchronous. 
       * </pre>
       *
       * <code>optional bool perm = 2;</code>
       */
      public boolean getPerm() {
        return instance.getPerm();
      }
      /**
       * <pre>
       ** If set, the daemon will attempt to persistently connect to the target
       * peer.  Otherwise, the call will be synchronous. 
       * </pre>
       *
       * <code>optional bool perm = 2;</code>
       */
      public Builder setPerm(boolean value) {
        copyOnWrite();
        instance.setPerm(value);
        return this;
      }
      /**
       * <pre>
       ** If set, the daemon will attempt to persistently connect to the target
       * peer.  Otherwise, the call will be synchronous. 
       * </pre>
       *
       * <code>optional bool perm = 2;</code>
       */
      public Builder clearPerm() {
        copyOnWrite();
        instance.clearPerm();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ConnectPeerRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ConnectPeerRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ConnectPeerRequest other = (lnrpc.Rpc.ConnectPeerRequest) arg1;
          addr_ = visitor.visitMessage(addr_, other.addr_);
          perm_ = visitor.visitBoolean(perm_ != false, perm_,
              other.perm_ != false, other.perm_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.LightningAddress.Builder subBuilder = null;
                  if (addr_ != null) {
                    subBuilder = addr_.toBuilder();
                  }
                  addr_ = input.readMessage(lnrpc.Rpc.LightningAddress.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(addr_);
                    addr_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  perm_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ConnectPeerRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ConnectPeerRequest)
    private static final lnrpc.Rpc.ConnectPeerRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ConnectPeerRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ConnectPeerRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ConnectPeerRequest> PARSER;

    public static com.google.protobuf.Parser<ConnectPeerRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ConnectPeerResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ConnectPeerResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.ConnectPeerResponse}
   */
  public  static final class ConnectPeerResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ConnectPeerResponse, ConnectPeerResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ConnectPeerResponse)
      ConnectPeerResponseOrBuilder {
    private ConnectPeerResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConnectPeerResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ConnectPeerResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ConnectPeerResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ConnectPeerResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ConnectPeerResponse)
        lnrpc.Rpc.ConnectPeerResponseOrBuilder {
      // Construct using lnrpc.Rpc.ConnectPeerResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.ConnectPeerResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ConnectPeerResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ConnectPeerResponse other = (lnrpc.Rpc.ConnectPeerResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ConnectPeerResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ConnectPeerResponse)
    private static final lnrpc.Rpc.ConnectPeerResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ConnectPeerResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ConnectPeerResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ConnectPeerResponse> PARSER;

    public static com.google.protobuf.Parser<ConnectPeerResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DisconnectPeerRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.DisconnectPeerRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    java.lang.String getPubKey();
    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    com.google.protobuf.ByteString
        getPubKeyBytes();
  }
  /**
   * Protobuf type {@code lnrpc.DisconnectPeerRequest}
   */
  public  static final class DisconnectPeerRequest extends
      com.google.protobuf.GeneratedMessageLite<
          DisconnectPeerRequest, DisconnectPeerRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.DisconnectPeerRequest)
      DisconnectPeerRequestOrBuilder {
    private DisconnectPeerRequest() {
      pubKey_ = "";
    }
    public static final int PUB_KEY_FIELD_NUMBER = 1;
    private java.lang.String pubKey_;
    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public java.lang.String getPubKey() {
      return pubKey_;
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubKey_);
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubKey_ = value;
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void clearPubKey() {
      
      pubKey_ = getDefaultInstance().getPubKey();
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to disconnect from
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubKey_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!pubKey_.isEmpty()) {
        output.writeString(1, getPubKey());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!pubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPubKey());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DisconnectPeerRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.DisconnectPeerRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.DisconnectPeerRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.DisconnectPeerRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.DisconnectPeerRequest)
        lnrpc.Rpc.DisconnectPeerRequestOrBuilder {
      // Construct using lnrpc.Rpc.DisconnectPeerRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The pubkey of the node to disconnect from
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public java.lang.String getPubKey() {
        return instance.getPubKey();
      }
      /**
       * <pre>
       *&#47; The pubkey of the node to disconnect from
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPubKeyBytes() {
        return instance.getPubKeyBytes();
      }
      /**
       * <pre>
       *&#47; The pubkey of the node to disconnect from
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubKey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The pubkey of the node to disconnect from
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder clearPubKey() {
        copyOnWrite();
        instance.clearPubKey();
        return this;
      }
      /**
       * <pre>
       *&#47; The pubkey of the node to disconnect from
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubKeyBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.DisconnectPeerRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.DisconnectPeerRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.DisconnectPeerRequest other = (lnrpc.Rpc.DisconnectPeerRequest) arg1;
          pubKey_ = visitor.visitString(!pubKey_.isEmpty(), pubKey_,
              !other.pubKey_.isEmpty(), other.pubKey_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  pubKey_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.DisconnectPeerRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.DisconnectPeerRequest)
    private static final lnrpc.Rpc.DisconnectPeerRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DisconnectPeerRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.DisconnectPeerRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DisconnectPeerRequest> PARSER;

    public static com.google.protobuf.Parser<DisconnectPeerRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DisconnectPeerResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.DisconnectPeerResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.DisconnectPeerResponse}
   */
  public  static final class DisconnectPeerResponse extends
      com.google.protobuf.GeneratedMessageLite<
          DisconnectPeerResponse, DisconnectPeerResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.DisconnectPeerResponse)
      DisconnectPeerResponseOrBuilder {
    private DisconnectPeerResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DisconnectPeerResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.DisconnectPeerResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.DisconnectPeerResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.DisconnectPeerResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.DisconnectPeerResponse)
        lnrpc.Rpc.DisconnectPeerResponseOrBuilder {
      // Construct using lnrpc.Rpc.DisconnectPeerResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.DisconnectPeerResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.DisconnectPeerResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.DisconnectPeerResponse other = (lnrpc.Rpc.DisconnectPeerResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.DisconnectPeerResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.DisconnectPeerResponse)
    private static final lnrpc.Rpc.DisconnectPeerResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DisconnectPeerResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.DisconnectPeerResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DisconnectPeerResponse> PARSER;

    public static com.google.protobuf.Parser<DisconnectPeerResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface HTLCOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.HTLC)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool incoming = 1;</code>
     */
    boolean getIncoming();

    /**
     * <code>optional int64 amount = 2;</code>
     */
    long getAmount();

    /**
     * <code>optional bytes hash_lock = 3;</code>
     */
    com.google.protobuf.ByteString getHashLock();

    /**
     * <code>optional uint32 expiration_height = 4;</code>
     */
    int getExpirationHeight();
  }
  /**
   * Protobuf type {@code lnrpc.HTLC}
   */
  public  static final class HTLC extends
      com.google.protobuf.GeneratedMessageLite<
          HTLC, HTLC.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.HTLC)
      HTLCOrBuilder {
    private HTLC() {
      hashLock_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int INCOMING_FIELD_NUMBER = 1;
    private boolean incoming_;
    /**
     * <code>optional bool incoming = 1;</code>
     */
    public boolean getIncoming() {
      return incoming_;
    }
    /**
     * <code>optional bool incoming = 1;</code>
     */
    private void setIncoming(boolean value) {
      
      incoming_ = value;
    }
    /**
     * <code>optional bool incoming = 1;</code>
     */
    private void clearIncoming() {
      
      incoming_ = false;
    }

    public static final int AMOUNT_FIELD_NUMBER = 2;
    private long amount_;
    /**
     * <code>optional int64 amount = 2;</code>
     */
    public long getAmount() {
      return amount_;
    }
    /**
     * <code>optional int64 amount = 2;</code>
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <code>optional int64 amount = 2;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static final int HASH_LOCK_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString hashLock_;
    /**
     * <code>optional bytes hash_lock = 3;</code>
     */
    public com.google.protobuf.ByteString getHashLock() {
      return hashLock_;
    }
    /**
     * <code>optional bytes hash_lock = 3;</code>
     */
    private void setHashLock(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hashLock_ = value;
    }
    /**
     * <code>optional bytes hash_lock = 3;</code>
     */
    private void clearHashLock() {
      
      hashLock_ = getDefaultInstance().getHashLock();
    }

    public static final int EXPIRATION_HEIGHT_FIELD_NUMBER = 4;
    private int expirationHeight_;
    /**
     * <code>optional uint32 expiration_height = 4;</code>
     */
    public int getExpirationHeight() {
      return expirationHeight_;
    }
    /**
     * <code>optional uint32 expiration_height = 4;</code>
     */
    private void setExpirationHeight(int value) {
      
      expirationHeight_ = value;
    }
    /**
     * <code>optional uint32 expiration_height = 4;</code>
     */
    private void clearExpirationHeight() {
      
      expirationHeight_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (incoming_ != false) {
        output.writeBool(1, incoming_);
      }
      if (amount_ != 0L) {
        output.writeInt64(2, amount_);
      }
      if (!hashLock_.isEmpty()) {
        output.writeBytes(3, hashLock_);
      }
      if (expirationHeight_ != 0) {
        output.writeUInt32(4, expirationHeight_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (incoming_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, incoming_);
      }
      if (amount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, amount_);
      }
      if (!hashLock_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, hashLock_);
      }
      if (expirationHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, expirationHeight_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.HTLC parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.HTLC parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.HTLC parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.HTLC parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.HTLC parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.HTLC parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.HTLC parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.HTLC parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.HTLC parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.HTLC parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.HTLC prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.HTLC}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.HTLC, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.HTLC)
        lnrpc.Rpc.HTLCOrBuilder {
      // Construct using lnrpc.Rpc.HTLC.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool incoming = 1;</code>
       */
      public boolean getIncoming() {
        return instance.getIncoming();
      }
      /**
       * <code>optional bool incoming = 1;</code>
       */
      public Builder setIncoming(boolean value) {
        copyOnWrite();
        instance.setIncoming(value);
        return this;
      }
      /**
       * <code>optional bool incoming = 1;</code>
       */
      public Builder clearIncoming() {
        copyOnWrite();
        instance.clearIncoming();
        return this;
      }

      /**
       * <code>optional int64 amount = 2;</code>
       */
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <code>optional int64 amount = 2;</code>
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <code>optional int64 amount = 2;</code>
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      /**
       * <code>optional bytes hash_lock = 3;</code>
       */
      public com.google.protobuf.ByteString getHashLock() {
        return instance.getHashLock();
      }
      /**
       * <code>optional bytes hash_lock = 3;</code>
       */
      public Builder setHashLock(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHashLock(value);
        return this;
      }
      /**
       * <code>optional bytes hash_lock = 3;</code>
       */
      public Builder clearHashLock() {
        copyOnWrite();
        instance.clearHashLock();
        return this;
      }

      /**
       * <code>optional uint32 expiration_height = 4;</code>
       */
      public int getExpirationHeight() {
        return instance.getExpirationHeight();
      }
      /**
       * <code>optional uint32 expiration_height = 4;</code>
       */
      public Builder setExpirationHeight(int value) {
        copyOnWrite();
        instance.setExpirationHeight(value);
        return this;
      }
      /**
       * <code>optional uint32 expiration_height = 4;</code>
       */
      public Builder clearExpirationHeight() {
        copyOnWrite();
        instance.clearExpirationHeight();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.HTLC)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.HTLC();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.HTLC other = (lnrpc.Rpc.HTLC) arg1;
          incoming_ = visitor.visitBoolean(incoming_ != false, incoming_,
              other.incoming_ != false, other.incoming_);
          amount_ = visitor.visitLong(amount_ != 0L, amount_,
              other.amount_ != 0L, other.amount_);
          hashLock_ = visitor.visitByteString(hashLock_ != com.google.protobuf.ByteString.EMPTY, hashLock_,
              other.hashLock_ != com.google.protobuf.ByteString.EMPTY, other.hashLock_);
          expirationHeight_ = visitor.visitInt(expirationHeight_ != 0, expirationHeight_,
              other.expirationHeight_ != 0, other.expirationHeight_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  incoming_ = input.readBool();
                  break;
                }
                case 16: {

                  amount_ = input.readInt64();
                  break;
                }
                case 26: {

                  hashLock_ = input.readBytes();
                  break;
                }
                case 32: {

                  expirationHeight_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.HTLC.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.HTLC)
    private static final lnrpc.Rpc.HTLC DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new HTLC();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.HTLC getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HTLC> PARSER;

    public static com.google.protobuf.Parser<HTLC> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Channel)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>optional bool active = 1;</code>
     */
    boolean getActive();

    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    java.lang.String getRemotePubkey();
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    com.google.protobuf.ByteString
        getRemotePubkeyBytes();

    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    java.lang.String getChannelPoint();
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    com.google.protobuf.ByteString
        getChannelPointBytes();

    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 4;</code>
     */
    long getChanId();

    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>optional int64 capacity = 5;</code>
     */
    long getCapacity();

    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>optional int64 local_balance = 6;</code>
     */
    long getLocalBalance();

    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>optional int64 remote_balance = 7;</code>
     */
    long getRemoteBalance();

    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>optional int64 commit_fee = 8;</code>
     */
    long getCommitFee();

    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>optional int64 commit_weight = 9;</code>
     */
    long getCommitWeight();

    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>optional int64 fee_per_kw = 10;</code>
     */
    long getFeePerKw();

    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>optional int64 unsettled_balance = 11;</code>
     */
    long getUnsettledBalance();

    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_sent = 12;</code>
     */
    long getTotalSatoshisSent();

    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_received = 13;</code>
     */
    long getTotalSatoshisReceived();

    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>optional uint64 num_updates = 14;</code>
     */
    long getNumUpdates();

    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    java.util.List<lnrpc.Rpc.HTLC> 
        getPendingHtlcsList();
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    lnrpc.Rpc.HTLC getPendingHtlcs(int index);
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    int getPendingHtlcsCount();

    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>optional uint32 csv_delay = 16;</code>
     */
    int getCsvDelay();

    /**
     * <pre>
     *&#47; Whether this channel is advertised to the network or not.
     * </pre>
     *
     * <code>optional bool private = 17;</code>
     */
    boolean getPrivate();

    /**
     * <pre>
     *&#47; True if we were the ones that created the channel.
     * </pre>
     *
     * <code>optional bool initiator = 18;</code>
     */
    boolean getInitiator();
  }
  /**
   * Protobuf type {@code lnrpc.Channel}
   */
  public  static final class Channel extends
      com.google.protobuf.GeneratedMessageLite<
          Channel, Channel.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Channel)
      ChannelOrBuilder {
    private Channel() {
      remotePubkey_ = "";
      channelPoint_ = "";
      pendingHtlcs_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int ACTIVE_FIELD_NUMBER = 1;
    private boolean active_;
    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>optional bool active = 1;</code>
     */
    public boolean getActive() {
      return active_;
    }
    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>optional bool active = 1;</code>
     */
    private void setActive(boolean value) {
      
      active_ = value;
    }
    /**
     * <pre>
     *&#47; Whether this channel is active or not
     * </pre>
     *
     * <code>optional bool active = 1;</code>
     */
    private void clearActive() {
      
      active_ = false;
    }

    public static final int REMOTE_PUBKEY_FIELD_NUMBER = 2;
    private java.lang.String remotePubkey_;
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    public java.lang.String getRemotePubkey() {
      return remotePubkey_;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRemotePubkeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(remotePubkey_);
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    private void setRemotePubkey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      remotePubkey_ = value;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    private void clearRemotePubkey() {
      
      remotePubkey_ = getDefaultInstance().getRemotePubkey();
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the remote node
     * </pre>
     *
     * <code>optional string remote_pubkey = 2;</code>
     */
    private void setRemotePubkeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      remotePubkey_ = value.toStringUtf8();
    }

    public static final int CHANNEL_POINT_FIELD_NUMBER = 3;
    private java.lang.String channelPoint_;
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    public java.lang.String getChannelPoint() {
      return channelPoint_;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    public com.google.protobuf.ByteString
        getChannelPointBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(channelPoint_);
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    private void setChannelPoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      channelPoint_ = value;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    private void clearChannelPoint() {
      
      channelPoint_ = getDefaultInstance().getChannelPoint();
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional string channel_point = 3;</code>
     */
    private void setChannelPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      channelPoint_ = value.toStringUtf8();
    }

    public static final int CHAN_ID_FIELD_NUMBER = 4;
    private long chanId_;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 4;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 4;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 4;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public static final int CAPACITY_FIELD_NUMBER = 5;
    private long capacity_;
    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>optional int64 capacity = 5;</code>
     */
    public long getCapacity() {
      return capacity_;
    }
    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>optional int64 capacity = 5;</code>
     */
    private void setCapacity(long value) {
      
      capacity_ = value;
    }
    /**
     * <pre>
     *&#47; The total amount of funds held in this channel
     * </pre>
     *
     * <code>optional int64 capacity = 5;</code>
     */
    private void clearCapacity() {
      
      capacity_ = 0L;
    }

    public static final int LOCAL_BALANCE_FIELD_NUMBER = 6;
    private long localBalance_;
    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>optional int64 local_balance = 6;</code>
     */
    public long getLocalBalance() {
      return localBalance_;
    }
    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>optional int64 local_balance = 6;</code>
     */
    private void setLocalBalance(long value) {
      
      localBalance_ = value;
    }
    /**
     * <pre>
     *&#47; This node's current balance in this channel
     * </pre>
     *
     * <code>optional int64 local_balance = 6;</code>
     */
    private void clearLocalBalance() {
      
      localBalance_ = 0L;
    }

    public static final int REMOTE_BALANCE_FIELD_NUMBER = 7;
    private long remoteBalance_;
    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>optional int64 remote_balance = 7;</code>
     */
    public long getRemoteBalance() {
      return remoteBalance_;
    }
    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>optional int64 remote_balance = 7;</code>
     */
    private void setRemoteBalance(long value) {
      
      remoteBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The counterparty's current balance in this channel
     * </pre>
     *
     * <code>optional int64 remote_balance = 7;</code>
     */
    private void clearRemoteBalance() {
      
      remoteBalance_ = 0L;
    }

    public static final int COMMIT_FEE_FIELD_NUMBER = 8;
    private long commitFee_;
    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>optional int64 commit_fee = 8;</code>
     */
    public long getCommitFee() {
      return commitFee_;
    }
    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>optional int64 commit_fee = 8;</code>
     */
    private void setCommitFee(long value) {
      
      commitFee_ = value;
    }
    /**
     * <pre>
     **
     *The amount calculated to be paid in fees for the current set of commitment
     *transactions. The fee amount is persisted with the channel in order to
     *allow the fee amount to be removed and recalculated with each channel state
     *update, including updates that happen after a system restart.
     * </pre>
     *
     * <code>optional int64 commit_fee = 8;</code>
     */
    private void clearCommitFee() {
      
      commitFee_ = 0L;
    }

    public static final int COMMIT_WEIGHT_FIELD_NUMBER = 9;
    private long commitWeight_;
    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>optional int64 commit_weight = 9;</code>
     */
    public long getCommitWeight() {
      return commitWeight_;
    }
    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>optional int64 commit_weight = 9;</code>
     */
    private void setCommitWeight(long value) {
      
      commitWeight_ = value;
    }
    /**
     * <pre>
     *&#47; The weight of the commitment transaction
     * </pre>
     *
     * <code>optional int64 commit_weight = 9;</code>
     */
    private void clearCommitWeight() {
      
      commitWeight_ = 0L;
    }

    public static final int FEE_PER_KW_FIELD_NUMBER = 10;
    private long feePerKw_;
    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>optional int64 fee_per_kw = 10;</code>
     */
    public long getFeePerKw() {
      return feePerKw_;
    }
    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>optional int64 fee_per_kw = 10;</code>
     */
    private void setFeePerKw(long value) {
      
      feePerKw_ = value;
    }
    /**
     * <pre>
     **
     *The required number of satoshis per kilo-weight that the requester will pay
     *at all times, for both the funding transaction and commitment transaction.
     *This value can later be updated once the channel is open.
     * </pre>
     *
     * <code>optional int64 fee_per_kw = 10;</code>
     */
    private void clearFeePerKw() {
      
      feePerKw_ = 0L;
    }

    public static final int UNSETTLED_BALANCE_FIELD_NUMBER = 11;
    private long unsettledBalance_;
    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>optional int64 unsettled_balance = 11;</code>
     */
    public long getUnsettledBalance() {
      return unsettledBalance_;
    }
    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>optional int64 unsettled_balance = 11;</code>
     */
    private void setUnsettledBalance(long value) {
      
      unsettledBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The unsettled balance in this channel
     * </pre>
     *
     * <code>optional int64 unsettled_balance = 11;</code>
     */
    private void clearUnsettledBalance() {
      
      unsettledBalance_ = 0L;
    }

    public static final int TOTAL_SATOSHIS_SENT_FIELD_NUMBER = 12;
    private long totalSatoshisSent_;
    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_sent = 12;</code>
     */
    public long getTotalSatoshisSent() {
      return totalSatoshisSent_;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_sent = 12;</code>
     */
    private void setTotalSatoshisSent(long value) {
      
      totalSatoshisSent_ = value;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've sent within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_sent = 12;</code>
     */
    private void clearTotalSatoshisSent() {
      
      totalSatoshisSent_ = 0L;
    }

    public static final int TOTAL_SATOSHIS_RECEIVED_FIELD_NUMBER = 13;
    private long totalSatoshisReceived_;
    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_received = 13;</code>
     */
    public long getTotalSatoshisReceived() {
      return totalSatoshisReceived_;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_received = 13;</code>
     */
    private void setTotalSatoshisReceived(long value) {
      
      totalSatoshisReceived_ = value;
    }
    /**
     * <pre>
     **
     *The total number of satoshis we've received within this channel.
     * </pre>
     *
     * <code>optional int64 total_satoshis_received = 13;</code>
     */
    private void clearTotalSatoshisReceived() {
      
      totalSatoshisReceived_ = 0L;
    }

    public static final int NUM_UPDATES_FIELD_NUMBER = 14;
    private long numUpdates_;
    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>optional uint64 num_updates = 14;</code>
     */
    public long getNumUpdates() {
      return numUpdates_;
    }
    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>optional uint64 num_updates = 14;</code>
     */
    private void setNumUpdates(long value) {
      
      numUpdates_ = value;
    }
    /**
     * <pre>
     **
     *The total number of updates conducted within this channel.
     * </pre>
     *
     * <code>optional uint64 num_updates = 14;</code>
     */
    private void clearNumUpdates() {
      
      numUpdates_ = 0L;
    }

    public static final int PENDING_HTLCS_FIELD_NUMBER = 15;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.HTLC> pendingHtlcs_;
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    public java.util.List<lnrpc.Rpc.HTLC> getPendingHtlcsList() {
      return pendingHtlcs_;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.HTLCOrBuilder> 
        getPendingHtlcsOrBuilderList() {
      return pendingHtlcs_;
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    public int getPendingHtlcsCount() {
      return pendingHtlcs_.size();
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    public lnrpc.Rpc.HTLC getPendingHtlcs(int index) {
      return pendingHtlcs_.get(index);
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    public lnrpc.Rpc.HTLCOrBuilder getPendingHtlcsOrBuilder(
        int index) {
      return pendingHtlcs_.get(index);
    }
    private void ensurePendingHtlcsIsMutable() {
      if (!pendingHtlcs_.isModifiable()) {
        pendingHtlcs_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingHtlcs_);
       }
    }

    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void setPendingHtlcs(
        int index, lnrpc.Rpc.HTLC value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.set(index, value);
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void setPendingHtlcs(
        int index, lnrpc.Rpc.HTLC.Builder builderForValue) {
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void addPendingHtlcs(lnrpc.Rpc.HTLC value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.add(value);
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void addPendingHtlcs(
        int index, lnrpc.Rpc.HTLC value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.add(index, value);
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void addPendingHtlcs(
        lnrpc.Rpc.HTLC.Builder builderForValue) {
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void addPendingHtlcs(
        int index, lnrpc.Rpc.HTLC.Builder builderForValue) {
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void addAllPendingHtlcs(
        java.lang.Iterable<? extends lnrpc.Rpc.HTLC> values) {
      ensurePendingHtlcsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pendingHtlcs_);
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void clearPendingHtlcs() {
      pendingHtlcs_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *The list of active, uncleared HTLCs currently pending within the channel.
     * </pre>
     *
     * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
     */
    private void removePendingHtlcs(int index) {
      ensurePendingHtlcsIsMutable();
      pendingHtlcs_.remove(index);
    }

    public static final int CSV_DELAY_FIELD_NUMBER = 16;
    private int csvDelay_;
    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>optional uint32 csv_delay = 16;</code>
     */
    public int getCsvDelay() {
      return csvDelay_;
    }
    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>optional uint32 csv_delay = 16;</code>
     */
    private void setCsvDelay(int value) {
      
      csvDelay_ = value;
    }
    /**
     * <pre>
     **
     *The CSV delay expressed in relative blocks. If the channel is force
     *closed, we'll need to wait for this many blocks before we can regain our
     *funds.
     * </pre>
     *
     * <code>optional uint32 csv_delay = 16;</code>
     */
    private void clearCsvDelay() {
      
      csvDelay_ = 0;
    }

    public static final int PRIVATE_FIELD_NUMBER = 17;
    private boolean private_;
    /**
     * <pre>
     *&#47; Whether this channel is advertised to the network or not.
     * </pre>
     *
     * <code>optional bool private = 17;</code>
     */
    public boolean getPrivate() {
      return private_;
    }
    /**
     * <pre>
     *&#47; Whether this channel is advertised to the network or not.
     * </pre>
     *
     * <code>optional bool private = 17;</code>
     */
    private void setPrivate(boolean value) {
      
      private_ = value;
    }
    /**
     * <pre>
     *&#47; Whether this channel is advertised to the network or not.
     * </pre>
     *
     * <code>optional bool private = 17;</code>
     */
    private void clearPrivate() {
      
      private_ = false;
    }

    public static final int INITIATOR_FIELD_NUMBER = 18;
    private boolean initiator_;
    /**
     * <pre>
     *&#47; True if we were the ones that created the channel.
     * </pre>
     *
     * <code>optional bool initiator = 18;</code>
     */
    public boolean getInitiator() {
      return initiator_;
    }
    /**
     * <pre>
     *&#47; True if we were the ones that created the channel.
     * </pre>
     *
     * <code>optional bool initiator = 18;</code>
     */
    private void setInitiator(boolean value) {
      
      initiator_ = value;
    }
    /**
     * <pre>
     *&#47; True if we were the ones that created the channel.
     * </pre>
     *
     * <code>optional bool initiator = 18;</code>
     */
    private void clearInitiator() {
      
      initiator_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (active_ != false) {
        output.writeBool(1, active_);
      }
      if (!remotePubkey_.isEmpty()) {
        output.writeString(2, getRemotePubkey());
      }
      if (!channelPoint_.isEmpty()) {
        output.writeString(3, getChannelPoint());
      }
      if (chanId_ != 0L) {
        output.writeUInt64(4, chanId_);
      }
      if (capacity_ != 0L) {
        output.writeInt64(5, capacity_);
      }
      if (localBalance_ != 0L) {
        output.writeInt64(6, localBalance_);
      }
      if (remoteBalance_ != 0L) {
        output.writeInt64(7, remoteBalance_);
      }
      if (commitFee_ != 0L) {
        output.writeInt64(8, commitFee_);
      }
      if (commitWeight_ != 0L) {
        output.writeInt64(9, commitWeight_);
      }
      if (feePerKw_ != 0L) {
        output.writeInt64(10, feePerKw_);
      }
      if (unsettledBalance_ != 0L) {
        output.writeInt64(11, unsettledBalance_);
      }
      if (totalSatoshisSent_ != 0L) {
        output.writeInt64(12, totalSatoshisSent_);
      }
      if (totalSatoshisReceived_ != 0L) {
        output.writeInt64(13, totalSatoshisReceived_);
      }
      if (numUpdates_ != 0L) {
        output.writeUInt64(14, numUpdates_);
      }
      for (int i = 0; i < pendingHtlcs_.size(); i++) {
        output.writeMessage(15, pendingHtlcs_.get(i));
      }
      if (csvDelay_ != 0) {
        output.writeUInt32(16, csvDelay_);
      }
      if (private_ != false) {
        output.writeBool(17, private_);
      }
      if (initiator_ != false) {
        output.writeBool(18, initiator_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (active_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, active_);
      }
      if (!remotePubkey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getRemotePubkey());
      }
      if (!channelPoint_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getChannelPoint());
      }
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, chanId_);
      }
      if (capacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, capacity_);
      }
      if (localBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, localBalance_);
      }
      if (remoteBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, remoteBalance_);
      }
      if (commitFee_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, commitFee_);
      }
      if (commitWeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, commitWeight_);
      }
      if (feePerKw_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, feePerKw_);
      }
      if (unsettledBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, unsettledBalance_);
      }
      if (totalSatoshisSent_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, totalSatoshisSent_);
      }
      if (totalSatoshisReceived_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, totalSatoshisReceived_);
      }
      if (numUpdates_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(14, numUpdates_);
      }
      for (int i = 0; i < pendingHtlcs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, pendingHtlcs_.get(i));
      }
      if (csvDelay_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, csvDelay_);
      }
      if (private_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, private_);
      }
      if (initiator_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, initiator_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Channel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Channel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Channel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Channel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Channel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Channel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Channel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Channel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Channel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Channel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Channel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Channel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Channel, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Channel)
        lnrpc.Rpc.ChannelOrBuilder {
      // Construct using lnrpc.Rpc.Channel.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Whether this channel is active or not
       * </pre>
       *
       * <code>optional bool active = 1;</code>
       */
      public boolean getActive() {
        return instance.getActive();
      }
      /**
       * <pre>
       *&#47; Whether this channel is active or not
       * </pre>
       *
       * <code>optional bool active = 1;</code>
       */
      public Builder setActive(boolean value) {
        copyOnWrite();
        instance.setActive(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether this channel is active or not
       * </pre>
       *
       * <code>optional bool active = 1;</code>
       */
      public Builder clearActive() {
        copyOnWrite();
        instance.clearActive();
        return this;
      }

      /**
       * <pre>
       *&#47; The identity pubkey of the remote node
       * </pre>
       *
       * <code>optional string remote_pubkey = 2;</code>
       */
      public java.lang.String getRemotePubkey() {
        return instance.getRemotePubkey();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the remote node
       * </pre>
       *
       * <code>optional string remote_pubkey = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRemotePubkeyBytes() {
        return instance.getRemotePubkeyBytes();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the remote node
       * </pre>
       *
       * <code>optional string remote_pubkey = 2;</code>
       */
      public Builder setRemotePubkey(
          java.lang.String value) {
        copyOnWrite();
        instance.setRemotePubkey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the remote node
       * </pre>
       *
       * <code>optional string remote_pubkey = 2;</code>
       */
      public Builder clearRemotePubkey() {
        copyOnWrite();
        instance.clearRemotePubkey();
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the remote node
       * </pre>
       *
       * <code>optional string remote_pubkey = 2;</code>
       */
      public Builder setRemotePubkeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRemotePubkeyBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional string channel_point = 3;</code>
       */
      public java.lang.String getChannelPoint() {
        return instance.getChannelPoint();
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional string channel_point = 3;</code>
       */
      public com.google.protobuf.ByteString
          getChannelPointBytes() {
        return instance.getChannelPointBytes();
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional string channel_point = 3;</code>
       */
      public Builder setChannelPoint(
          java.lang.String value) {
        copyOnWrite();
        instance.setChannelPoint(value);
        return this;
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional string channel_point = 3;</code>
       */
      public Builder clearChannelPoint() {
        copyOnWrite();
        instance.clearChannelPoint();
        return this;
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional string channel_point = 3;</code>
       */
      public Builder setChannelPointBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChannelPointBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 4;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 4;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 4;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      /**
       * <pre>
       *&#47; The total amount of funds held in this channel
       * </pre>
       *
       * <code>optional int64 capacity = 5;</code>
       */
      public long getCapacity() {
        return instance.getCapacity();
      }
      /**
       * <pre>
       *&#47; The total amount of funds held in this channel
       * </pre>
       *
       * <code>optional int64 capacity = 5;</code>
       */
      public Builder setCapacity(long value) {
        copyOnWrite();
        instance.setCapacity(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total amount of funds held in this channel
       * </pre>
       *
       * <code>optional int64 capacity = 5;</code>
       */
      public Builder clearCapacity() {
        copyOnWrite();
        instance.clearCapacity();
        return this;
      }

      /**
       * <pre>
       *&#47; This node's current balance in this channel
       * </pre>
       *
       * <code>optional int64 local_balance = 6;</code>
       */
      public long getLocalBalance() {
        return instance.getLocalBalance();
      }
      /**
       * <pre>
       *&#47; This node's current balance in this channel
       * </pre>
       *
       * <code>optional int64 local_balance = 6;</code>
       */
      public Builder setLocalBalance(long value) {
        copyOnWrite();
        instance.setLocalBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; This node's current balance in this channel
       * </pre>
       *
       * <code>optional int64 local_balance = 6;</code>
       */
      public Builder clearLocalBalance() {
        copyOnWrite();
        instance.clearLocalBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; The counterparty's current balance in this channel
       * </pre>
       *
       * <code>optional int64 remote_balance = 7;</code>
       */
      public long getRemoteBalance() {
        return instance.getRemoteBalance();
      }
      /**
       * <pre>
       *&#47; The counterparty's current balance in this channel
       * </pre>
       *
       * <code>optional int64 remote_balance = 7;</code>
       */
      public Builder setRemoteBalance(long value) {
        copyOnWrite();
        instance.setRemoteBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The counterparty's current balance in this channel
       * </pre>
       *
       * <code>optional int64 remote_balance = 7;</code>
       */
      public Builder clearRemoteBalance() {
        copyOnWrite();
        instance.clearRemoteBalance();
        return this;
      }

      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of commitment
       *transactions. The fee amount is persisted with the channel in order to
       *allow the fee amount to be removed and recalculated with each channel state
       *update, including updates that happen after a system restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 8;</code>
       */
      public long getCommitFee() {
        return instance.getCommitFee();
      }
      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of commitment
       *transactions. The fee amount is persisted with the channel in order to
       *allow the fee amount to be removed and recalculated with each channel state
       *update, including updates that happen after a system restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 8;</code>
       */
      public Builder setCommitFee(long value) {
        copyOnWrite();
        instance.setCommitFee(value);
        return this;
      }
      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of commitment
       *transactions. The fee amount is persisted with the channel in order to
       *allow the fee amount to be removed and recalculated with each channel state
       *update, including updates that happen after a system restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 8;</code>
       */
      public Builder clearCommitFee() {
        copyOnWrite();
        instance.clearCommitFee();
        return this;
      }

      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 9;</code>
       */
      public long getCommitWeight() {
        return instance.getCommitWeight();
      }
      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 9;</code>
       */
      public Builder setCommitWeight(long value) {
        copyOnWrite();
        instance.setCommitWeight(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 9;</code>
       */
      public Builder clearCommitWeight() {
        copyOnWrite();
        instance.clearCommitWeight();
        return this;
      }

      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will pay
       *at all times, for both the funding transaction and commitment transaction.
       *This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 10;</code>
       */
      public long getFeePerKw() {
        return instance.getFeePerKw();
      }
      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will pay
       *at all times, for both the funding transaction and commitment transaction.
       *This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 10;</code>
       */
      public Builder setFeePerKw(long value) {
        copyOnWrite();
        instance.setFeePerKw(value);
        return this;
      }
      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will pay
       *at all times, for both the funding transaction and commitment transaction.
       *This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 10;</code>
       */
      public Builder clearFeePerKw() {
        copyOnWrite();
        instance.clearFeePerKw();
        return this;
      }

      /**
       * <pre>
       *&#47; The unsettled balance in this channel
       * </pre>
       *
       * <code>optional int64 unsettled_balance = 11;</code>
       */
      public long getUnsettledBalance() {
        return instance.getUnsettledBalance();
      }
      /**
       * <pre>
       *&#47; The unsettled balance in this channel
       * </pre>
       *
       * <code>optional int64 unsettled_balance = 11;</code>
       */
      public Builder setUnsettledBalance(long value) {
        copyOnWrite();
        instance.setUnsettledBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The unsettled balance in this channel
       * </pre>
       *
       * <code>optional int64 unsettled_balance = 11;</code>
       */
      public Builder clearUnsettledBalance() {
        copyOnWrite();
        instance.clearUnsettledBalance();
        return this;
      }

      /**
       * <pre>
       **
       *The total number of satoshis we've sent within this channel.
       * </pre>
       *
       * <code>optional int64 total_satoshis_sent = 12;</code>
       */
      public long getTotalSatoshisSent() {
        return instance.getTotalSatoshisSent();
      }
      /**
       * <pre>
       **
       *The total number of satoshis we've sent within this channel.
       * </pre>
       *
       * <code>optional int64 total_satoshis_sent = 12;</code>
       */
      public Builder setTotalSatoshisSent(long value) {
        copyOnWrite();
        instance.setTotalSatoshisSent(value);
        return this;
      }
      /**
       * <pre>
       **
       *The total number of satoshis we've sent within this channel.
       * </pre>
       *
       * <code>optional int64 total_satoshis_sent = 12;</code>
       */
      public Builder clearTotalSatoshisSent() {
        copyOnWrite();
        instance.clearTotalSatoshisSent();
        return this;
      }

      /**
       * <pre>
       **
       *The total number of satoshis we've received within this channel.
       * </pre>
       *
       * <code>optional int64 total_satoshis_received = 13;</code>
       */
      public long getTotalSatoshisReceived() {
        return instance.getTotalSatoshisReceived();
      }
      /**
       * <pre>
       **
       *The total number of satoshis we've received within this channel.
       * </pre>
       *
       * <code>optional int64 total_satoshis_received = 13;</code>
       */
      public Builder setTotalSatoshisReceived(long value) {
        copyOnWrite();
        instance.setTotalSatoshisReceived(value);
        return this;
      }
      /**
       * <pre>
       **
       *The total number of satoshis we've received within this channel.
       * </pre>
       *
       * <code>optional int64 total_satoshis_received = 13;</code>
       */
      public Builder clearTotalSatoshisReceived() {
        copyOnWrite();
        instance.clearTotalSatoshisReceived();
        return this;
      }

      /**
       * <pre>
       **
       *The total number of updates conducted within this channel.
       * </pre>
       *
       * <code>optional uint64 num_updates = 14;</code>
       */
      public long getNumUpdates() {
        return instance.getNumUpdates();
      }
      /**
       * <pre>
       **
       *The total number of updates conducted within this channel.
       * </pre>
       *
       * <code>optional uint64 num_updates = 14;</code>
       */
      public Builder setNumUpdates(long value) {
        copyOnWrite();
        instance.setNumUpdates(value);
        return this;
      }
      /**
       * <pre>
       **
       *The total number of updates conducted within this channel.
       * </pre>
       *
       * <code>optional uint64 num_updates = 14;</code>
       */
      public Builder clearNumUpdates() {
        copyOnWrite();
        instance.clearNumUpdates();
        return this;
      }

      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public java.util.List<lnrpc.Rpc.HTLC> getPendingHtlcsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPendingHtlcsList());
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public int getPendingHtlcsCount() {
        return instance.getPendingHtlcsCount();
      }/**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public lnrpc.Rpc.HTLC getPendingHtlcs(int index) {
        return instance.getPendingHtlcs(index);
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder setPendingHtlcs(
          int index, lnrpc.Rpc.HTLC value) {
        copyOnWrite();
        instance.setPendingHtlcs(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder setPendingHtlcs(
          int index, lnrpc.Rpc.HTLC.Builder builderForValue) {
        copyOnWrite();
        instance.setPendingHtlcs(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder addPendingHtlcs(lnrpc.Rpc.HTLC value) {
        copyOnWrite();
        instance.addPendingHtlcs(value);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder addPendingHtlcs(
          int index, lnrpc.Rpc.HTLC value) {
        copyOnWrite();
        instance.addPendingHtlcs(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder addPendingHtlcs(
          lnrpc.Rpc.HTLC.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingHtlcs(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder addPendingHtlcs(
          int index, lnrpc.Rpc.HTLC.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingHtlcs(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder addAllPendingHtlcs(
          java.lang.Iterable<? extends lnrpc.Rpc.HTLC> values) {
        copyOnWrite();
        instance.addAllPendingHtlcs(values);
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder clearPendingHtlcs() {
        copyOnWrite();
        instance.clearPendingHtlcs();
        return this;
      }
      /**
       * <pre>
       **
       *The list of active, uncleared HTLCs currently pending within the channel.
       * </pre>
       *
       * <code>repeated .lnrpc.HTLC pending_htlcs = 15;</code>
       */
      public Builder removePendingHtlcs(int index) {
        copyOnWrite();
        instance.removePendingHtlcs(index);
        return this;
      }

      /**
       * <pre>
       **
       *The CSV delay expressed in relative blocks. If the channel is force
       *closed, we'll need to wait for this many blocks before we can regain our
       *funds.
       * </pre>
       *
       * <code>optional uint32 csv_delay = 16;</code>
       */
      public int getCsvDelay() {
        return instance.getCsvDelay();
      }
      /**
       * <pre>
       **
       *The CSV delay expressed in relative blocks. If the channel is force
       *closed, we'll need to wait for this many blocks before we can regain our
       *funds.
       * </pre>
       *
       * <code>optional uint32 csv_delay = 16;</code>
       */
      public Builder setCsvDelay(int value) {
        copyOnWrite();
        instance.setCsvDelay(value);
        return this;
      }
      /**
       * <pre>
       **
       *The CSV delay expressed in relative blocks. If the channel is force
       *closed, we'll need to wait for this many blocks before we can regain our
       *funds.
       * </pre>
       *
       * <code>optional uint32 csv_delay = 16;</code>
       */
      public Builder clearCsvDelay() {
        copyOnWrite();
        instance.clearCsvDelay();
        return this;
      }

      /**
       * <pre>
       *&#47; Whether this channel is advertised to the network or not.
       * </pre>
       *
       * <code>optional bool private = 17;</code>
       */
      public boolean getPrivate() {
        return instance.getPrivate();
      }
      /**
       * <pre>
       *&#47; Whether this channel is advertised to the network or not.
       * </pre>
       *
       * <code>optional bool private = 17;</code>
       */
      public Builder setPrivate(boolean value) {
        copyOnWrite();
        instance.setPrivate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether this channel is advertised to the network or not.
       * </pre>
       *
       * <code>optional bool private = 17;</code>
       */
      public Builder clearPrivate() {
        copyOnWrite();
        instance.clearPrivate();
        return this;
      }

      /**
       * <pre>
       *&#47; True if we were the ones that created the channel.
       * </pre>
       *
       * <code>optional bool initiator = 18;</code>
       */
      public boolean getInitiator() {
        return instance.getInitiator();
      }
      /**
       * <pre>
       *&#47; True if we were the ones that created the channel.
       * </pre>
       *
       * <code>optional bool initiator = 18;</code>
       */
      public Builder setInitiator(boolean value) {
        copyOnWrite();
        instance.setInitiator(value);
        return this;
      }
      /**
       * <pre>
       *&#47; True if we were the ones that created the channel.
       * </pre>
       *
       * <code>optional bool initiator = 18;</code>
       */
      public Builder clearInitiator() {
        copyOnWrite();
        instance.clearInitiator();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Channel)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Channel();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pendingHtlcs_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Channel other = (lnrpc.Rpc.Channel) arg1;
          active_ = visitor.visitBoolean(active_ != false, active_,
              other.active_ != false, other.active_);
          remotePubkey_ = visitor.visitString(!remotePubkey_.isEmpty(), remotePubkey_,
              !other.remotePubkey_.isEmpty(), other.remotePubkey_);
          channelPoint_ = visitor.visitString(!channelPoint_.isEmpty(), channelPoint_,
              !other.channelPoint_.isEmpty(), other.channelPoint_);
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          capacity_ = visitor.visitLong(capacity_ != 0L, capacity_,
              other.capacity_ != 0L, other.capacity_);
          localBalance_ = visitor.visitLong(localBalance_ != 0L, localBalance_,
              other.localBalance_ != 0L, other.localBalance_);
          remoteBalance_ = visitor.visitLong(remoteBalance_ != 0L, remoteBalance_,
              other.remoteBalance_ != 0L, other.remoteBalance_);
          commitFee_ = visitor.visitLong(commitFee_ != 0L, commitFee_,
              other.commitFee_ != 0L, other.commitFee_);
          commitWeight_ = visitor.visitLong(commitWeight_ != 0L, commitWeight_,
              other.commitWeight_ != 0L, other.commitWeight_);
          feePerKw_ = visitor.visitLong(feePerKw_ != 0L, feePerKw_,
              other.feePerKw_ != 0L, other.feePerKw_);
          unsettledBalance_ = visitor.visitLong(unsettledBalance_ != 0L, unsettledBalance_,
              other.unsettledBalance_ != 0L, other.unsettledBalance_);
          totalSatoshisSent_ = visitor.visitLong(totalSatoshisSent_ != 0L, totalSatoshisSent_,
              other.totalSatoshisSent_ != 0L, other.totalSatoshisSent_);
          totalSatoshisReceived_ = visitor.visitLong(totalSatoshisReceived_ != 0L, totalSatoshisReceived_,
              other.totalSatoshisReceived_ != 0L, other.totalSatoshisReceived_);
          numUpdates_ = visitor.visitLong(numUpdates_ != 0L, numUpdates_,
              other.numUpdates_ != 0L, other.numUpdates_);
          pendingHtlcs_= visitor.visitList(pendingHtlcs_, other.pendingHtlcs_);
          csvDelay_ = visitor.visitInt(csvDelay_ != 0, csvDelay_,
              other.csvDelay_ != 0, other.csvDelay_);
          private_ = visitor.visitBoolean(private_ != false, private_,
              other.private_ != false, other.private_);
          initiator_ = visitor.visitBoolean(initiator_ != false, initiator_,
              other.initiator_ != false, other.initiator_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  active_ = input.readBool();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  remotePubkey_ = s;
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  channelPoint_ = s;
                  break;
                }
                case 32: {

                  chanId_ = input.readUInt64();
                  break;
                }
                case 40: {

                  capacity_ = input.readInt64();
                  break;
                }
                case 48: {

                  localBalance_ = input.readInt64();
                  break;
                }
                case 56: {

                  remoteBalance_ = input.readInt64();
                  break;
                }
                case 64: {

                  commitFee_ = input.readInt64();
                  break;
                }
                case 72: {

                  commitWeight_ = input.readInt64();
                  break;
                }
                case 80: {

                  feePerKw_ = input.readInt64();
                  break;
                }
                case 88: {

                  unsettledBalance_ = input.readInt64();
                  break;
                }
                case 96: {

                  totalSatoshisSent_ = input.readInt64();
                  break;
                }
                case 104: {

                  totalSatoshisReceived_ = input.readInt64();
                  break;
                }
                case 112: {

                  numUpdates_ = input.readUInt64();
                  break;
                }
                case 122: {
                  if (!pendingHtlcs_.isModifiable()) {
                    pendingHtlcs_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingHtlcs_);
                  }
                  pendingHtlcs_.add(
                      input.readMessage(lnrpc.Rpc.HTLC.parser(), extensionRegistry));
                  break;
                }
                case 128: {

                  csvDelay_ = input.readUInt32();
                  break;
                }
                case 136: {

                  private_ = input.readBool();
                  break;
                }
                case 144: {

                  initiator_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Channel.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Channel)
    private static final lnrpc.Rpc.Channel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Channel();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Channel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Channel> PARSER;

    public static com.google.protobuf.Parser<Channel> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListChannelsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListChannelsRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool active_only = 1;</code>
     */
    boolean getActiveOnly();

    /**
     * <code>optional bool inactive_only = 2;</code>
     */
    boolean getInactiveOnly();

    /**
     * <code>optional bool public_only = 3;</code>
     */
    boolean getPublicOnly();

    /**
     * <code>optional bool private_only = 4;</code>
     */
    boolean getPrivateOnly();
  }
  /**
   * Protobuf type {@code lnrpc.ListChannelsRequest}
   */
  public  static final class ListChannelsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ListChannelsRequest, ListChannelsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListChannelsRequest)
      ListChannelsRequestOrBuilder {
    private ListChannelsRequest() {
    }
    public static final int ACTIVE_ONLY_FIELD_NUMBER = 1;
    private boolean activeOnly_;
    /**
     * <code>optional bool active_only = 1;</code>
     */
    public boolean getActiveOnly() {
      return activeOnly_;
    }
    /**
     * <code>optional bool active_only = 1;</code>
     */
    private void setActiveOnly(boolean value) {
      
      activeOnly_ = value;
    }
    /**
     * <code>optional bool active_only = 1;</code>
     */
    private void clearActiveOnly() {
      
      activeOnly_ = false;
    }

    public static final int INACTIVE_ONLY_FIELD_NUMBER = 2;
    private boolean inactiveOnly_;
    /**
     * <code>optional bool inactive_only = 2;</code>
     */
    public boolean getInactiveOnly() {
      return inactiveOnly_;
    }
    /**
     * <code>optional bool inactive_only = 2;</code>
     */
    private void setInactiveOnly(boolean value) {
      
      inactiveOnly_ = value;
    }
    /**
     * <code>optional bool inactive_only = 2;</code>
     */
    private void clearInactiveOnly() {
      
      inactiveOnly_ = false;
    }

    public static final int PUBLIC_ONLY_FIELD_NUMBER = 3;
    private boolean publicOnly_;
    /**
     * <code>optional bool public_only = 3;</code>
     */
    public boolean getPublicOnly() {
      return publicOnly_;
    }
    /**
     * <code>optional bool public_only = 3;</code>
     */
    private void setPublicOnly(boolean value) {
      
      publicOnly_ = value;
    }
    /**
     * <code>optional bool public_only = 3;</code>
     */
    private void clearPublicOnly() {
      
      publicOnly_ = false;
    }

    public static final int PRIVATE_ONLY_FIELD_NUMBER = 4;
    private boolean privateOnly_;
    /**
     * <code>optional bool private_only = 4;</code>
     */
    public boolean getPrivateOnly() {
      return privateOnly_;
    }
    /**
     * <code>optional bool private_only = 4;</code>
     */
    private void setPrivateOnly(boolean value) {
      
      privateOnly_ = value;
    }
    /**
     * <code>optional bool private_only = 4;</code>
     */
    private void clearPrivateOnly() {
      
      privateOnly_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (activeOnly_ != false) {
        output.writeBool(1, activeOnly_);
      }
      if (inactiveOnly_ != false) {
        output.writeBool(2, inactiveOnly_);
      }
      if (publicOnly_ != false) {
        output.writeBool(3, publicOnly_);
      }
      if (privateOnly_ != false) {
        output.writeBool(4, privateOnly_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (activeOnly_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, activeOnly_);
      }
      if (inactiveOnly_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, inactiveOnly_);
      }
      if (publicOnly_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, publicOnly_);
      }
      if (privateOnly_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, privateOnly_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListChannelsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListChannelsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListChannelsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListChannelsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListChannelsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListChannelsRequest)
        lnrpc.Rpc.ListChannelsRequestOrBuilder {
      // Construct using lnrpc.Rpc.ListChannelsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool active_only = 1;</code>
       */
      public boolean getActiveOnly() {
        return instance.getActiveOnly();
      }
      /**
       * <code>optional bool active_only = 1;</code>
       */
      public Builder setActiveOnly(boolean value) {
        copyOnWrite();
        instance.setActiveOnly(value);
        return this;
      }
      /**
       * <code>optional bool active_only = 1;</code>
       */
      public Builder clearActiveOnly() {
        copyOnWrite();
        instance.clearActiveOnly();
        return this;
      }

      /**
       * <code>optional bool inactive_only = 2;</code>
       */
      public boolean getInactiveOnly() {
        return instance.getInactiveOnly();
      }
      /**
       * <code>optional bool inactive_only = 2;</code>
       */
      public Builder setInactiveOnly(boolean value) {
        copyOnWrite();
        instance.setInactiveOnly(value);
        return this;
      }
      /**
       * <code>optional bool inactive_only = 2;</code>
       */
      public Builder clearInactiveOnly() {
        copyOnWrite();
        instance.clearInactiveOnly();
        return this;
      }

      /**
       * <code>optional bool public_only = 3;</code>
       */
      public boolean getPublicOnly() {
        return instance.getPublicOnly();
      }
      /**
       * <code>optional bool public_only = 3;</code>
       */
      public Builder setPublicOnly(boolean value) {
        copyOnWrite();
        instance.setPublicOnly(value);
        return this;
      }
      /**
       * <code>optional bool public_only = 3;</code>
       */
      public Builder clearPublicOnly() {
        copyOnWrite();
        instance.clearPublicOnly();
        return this;
      }

      /**
       * <code>optional bool private_only = 4;</code>
       */
      public boolean getPrivateOnly() {
        return instance.getPrivateOnly();
      }
      /**
       * <code>optional bool private_only = 4;</code>
       */
      public Builder setPrivateOnly(boolean value) {
        copyOnWrite();
        instance.setPrivateOnly(value);
        return this;
      }
      /**
       * <code>optional bool private_only = 4;</code>
       */
      public Builder clearPrivateOnly() {
        copyOnWrite();
        instance.clearPrivateOnly();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListChannelsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListChannelsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListChannelsRequest other = (lnrpc.Rpc.ListChannelsRequest) arg1;
          activeOnly_ = visitor.visitBoolean(activeOnly_ != false, activeOnly_,
              other.activeOnly_ != false, other.activeOnly_);
          inactiveOnly_ = visitor.visitBoolean(inactiveOnly_ != false, inactiveOnly_,
              other.inactiveOnly_ != false, other.inactiveOnly_);
          publicOnly_ = visitor.visitBoolean(publicOnly_ != false, publicOnly_,
              other.publicOnly_ != false, other.publicOnly_);
          privateOnly_ = visitor.visitBoolean(privateOnly_ != false, privateOnly_,
              other.privateOnly_ != false, other.privateOnly_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  activeOnly_ = input.readBool();
                  break;
                }
                case 16: {

                  inactiveOnly_ = input.readBool();
                  break;
                }
                case 24: {

                  publicOnly_ = input.readBool();
                  break;
                }
                case 32: {

                  privateOnly_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListChannelsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListChannelsRequest)
    private static final lnrpc.Rpc.ListChannelsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListChannelsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListChannelsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListChannelsRequest> PARSER;

    public static com.google.protobuf.Parser<ListChannelsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListChannelsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListChannelsResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    java.util.List<lnrpc.Rpc.Channel> 
        getChannelsList();
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    lnrpc.Rpc.Channel getChannels(int index);
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    int getChannelsCount();
  }
  /**
   * Protobuf type {@code lnrpc.ListChannelsResponse}
   */
  public  static final class ListChannelsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ListChannelsResponse, ListChannelsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListChannelsResponse)
      ListChannelsResponseOrBuilder {
    private ListChannelsResponse() {
      channels_ = emptyProtobufList();
    }
    public static final int CHANNELS_FIELD_NUMBER = 11;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Channel> channels_;
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    public java.util.List<lnrpc.Rpc.Channel> getChannelsList() {
      return channels_;
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ChannelOrBuilder> 
        getChannelsOrBuilderList() {
      return channels_;
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    public int getChannelsCount() {
      return channels_.size();
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    public lnrpc.Rpc.Channel getChannels(int index) {
      return channels_.get(index);
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    public lnrpc.Rpc.ChannelOrBuilder getChannelsOrBuilder(
        int index) {
      return channels_.get(index);
    }
    private void ensureChannelsIsMutable() {
      if (!channels_.isModifiable()) {
        channels_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(channels_);
       }
    }

    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void setChannels(
        int index, lnrpc.Rpc.Channel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelsIsMutable();
      channels_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void setChannels(
        int index, lnrpc.Rpc.Channel.Builder builderForValue) {
      ensureChannelsIsMutable();
      channels_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void addChannels(lnrpc.Rpc.Channel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelsIsMutable();
      channels_.add(value);
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void addChannels(
        int index, lnrpc.Rpc.Channel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelsIsMutable();
      channels_.add(index, value);
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void addChannels(
        lnrpc.Rpc.Channel.Builder builderForValue) {
      ensureChannelsIsMutable();
      channels_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void addChannels(
        int index, lnrpc.Rpc.Channel.Builder builderForValue) {
      ensureChannelsIsMutable();
      channels_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void addAllChannels(
        java.lang.Iterable<? extends lnrpc.Rpc.Channel> values) {
      ensureChannelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, channels_);
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void clearChannels() {
      channels_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The list of active channels
     * </pre>
     *
     * <code>repeated .lnrpc.Channel channels = 11;</code>
     */
    private void removeChannels(int index) {
      ensureChannelsIsMutable();
      channels_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < channels_.size(); i++) {
        output.writeMessage(11, channels_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < channels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, channels_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListChannelsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListChannelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListChannelsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListChannelsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListChannelsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListChannelsResponse)
        lnrpc.Rpc.ListChannelsResponseOrBuilder {
      // Construct using lnrpc.Rpc.ListChannelsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public java.util.List<lnrpc.Rpc.Channel> getChannelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getChannelsList());
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public int getChannelsCount() {
        return instance.getChannelsCount();
      }/**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public lnrpc.Rpc.Channel getChannels(int index) {
        return instance.getChannels(index);
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder setChannels(
          int index, lnrpc.Rpc.Channel value) {
        copyOnWrite();
        instance.setChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder setChannels(
          int index, lnrpc.Rpc.Channel.Builder builderForValue) {
        copyOnWrite();
        instance.setChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder addChannels(lnrpc.Rpc.Channel value) {
        copyOnWrite();
        instance.addChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder addChannels(
          int index, lnrpc.Rpc.Channel value) {
        copyOnWrite();
        instance.addChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder addChannels(
          lnrpc.Rpc.Channel.Builder builderForValue) {
        copyOnWrite();
        instance.addChannels(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder addChannels(
          int index, lnrpc.Rpc.Channel.Builder builderForValue) {
        copyOnWrite();
        instance.addChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder addAllChannels(
          java.lang.Iterable<? extends lnrpc.Rpc.Channel> values) {
        copyOnWrite();
        instance.addAllChannels(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder clearChannels() {
        copyOnWrite();
        instance.clearChannels();
        return this;
      }
      /**
       * <pre>
       *&#47; The list of active channels
       * </pre>
       *
       * <code>repeated .lnrpc.Channel channels = 11;</code>
       */
      public Builder removeChannels(int index) {
        copyOnWrite();
        instance.removeChannels(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListChannelsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListChannelsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          channels_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListChannelsResponse other = (lnrpc.Rpc.ListChannelsResponse) arg1;
          channels_= visitor.visitList(channels_, other.channels_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 90: {
                  if (!channels_.isModifiable()) {
                    channels_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(channels_);
                  }
                  channels_.add(
                      input.readMessage(lnrpc.Rpc.Channel.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListChannelsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListChannelsResponse)
    private static final lnrpc.Rpc.ListChannelsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListChannelsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListChannelsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListChannelsResponse> PARSER;

    public static com.google.protobuf.Parser<ListChannelsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelCloseSummaryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelCloseSummary)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    java.lang.String getChannelPoint();
    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    com.google.protobuf.ByteString
        getChannelPointBytes();

    /**
     * <pre>
     *&#47;  The unique channel ID for the channel. 
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    long getChanId();

    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    java.lang.String getChainHash();
    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    com.google.protobuf.ByteString
        getChainHashBytes();

    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    java.lang.String getClosingTxHash();
    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    com.google.protobuf.ByteString
        getClosingTxHashBytes();

    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    java.lang.String getRemotePubkey();
    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    com.google.protobuf.ByteString
        getRemotePubkeyBytes();

    /**
     * <pre>
     *&#47; Total capacity of the channel.
     * </pre>
     *
     * <code>optional int64 capacity = 6;</code>
     */
    long getCapacity();

    /**
     * <pre>
     *&#47; Height at which the funding transaction was spent.
     * </pre>
     *
     * <code>optional uint32 close_height = 7;</code>
     */
    int getCloseHeight();

    /**
     * <pre>
     *&#47; Settled balance at the time of channel closure
     * </pre>
     *
     * <code>optional int64 settled_balance = 8;</code>
     */
    long getSettledBalance();

    /**
     * <pre>
     *&#47; The sum of all the time-locked outputs at the time of channel closure
     * </pre>
     *
     * <code>optional int64 time_locked_balance = 9;</code>
     */
    long getTimeLockedBalance();

    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    int getCloseTypeValue();
    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    lnrpc.Rpc.ChannelCloseSummary.ClosureType getCloseType();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelCloseSummary}
   */
  public  static final class ChannelCloseSummary extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelCloseSummary, ChannelCloseSummary.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelCloseSummary)
      ChannelCloseSummaryOrBuilder {
    private ChannelCloseSummary() {
      channelPoint_ = "";
      chainHash_ = "";
      closingTxHash_ = "";
      remotePubkey_ = "";
    }
    /**
     * Protobuf enum {@code lnrpc.ChannelCloseSummary.ClosureType}
     */
    public enum ClosureType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>COOPERATIVE_CLOSE = 0;</code>
       */
      COOPERATIVE_CLOSE(0),
      /**
       * <code>LOCAL_FORCE_CLOSE = 1;</code>
       */
      LOCAL_FORCE_CLOSE(1),
      /**
       * <code>REMOTE_FORCE_CLOSE = 2;</code>
       */
      REMOTE_FORCE_CLOSE(2),
      /**
       * <code>BREACH_CLOSE = 3;</code>
       */
      BREACH_CLOSE(3),
      /**
       * <code>FUNDING_CANCELED = 4;</code>
       */
      FUNDING_CANCELED(4),
      /**
       * <code>ABANDONED = 5;</code>
       */
      ABANDONED(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>COOPERATIVE_CLOSE = 0;</code>
       */
      public static final int COOPERATIVE_CLOSE_VALUE = 0;
      /**
       * <code>LOCAL_FORCE_CLOSE = 1;</code>
       */
      public static final int LOCAL_FORCE_CLOSE_VALUE = 1;
      /**
       * <code>REMOTE_FORCE_CLOSE = 2;</code>
       */
      public static final int REMOTE_FORCE_CLOSE_VALUE = 2;
      /**
       * <code>BREACH_CLOSE = 3;</code>
       */
      public static final int BREACH_CLOSE_VALUE = 3;
      /**
       * <code>FUNDING_CANCELED = 4;</code>
       */
      public static final int FUNDING_CANCELED_VALUE = 4;
      /**
       * <code>ABANDONED = 5;</code>
       */
      public static final int ABANDONED_VALUE = 5;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ClosureType valueOf(int value) {
        return forNumber(value);
      }

      public static ClosureType forNumber(int value) {
        switch (value) {
          case 0: return COOPERATIVE_CLOSE;
          case 1: return LOCAL_FORCE_CLOSE;
          case 2: return REMOTE_FORCE_CLOSE;
          case 3: return BREACH_CLOSE;
          case 4: return FUNDING_CANCELED;
          case 5: return ABANDONED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ClosureType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ClosureType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ClosureType>() {
              public ClosureType findValueByNumber(int number) {
                return ClosureType.forNumber(number);
              }
            };

      private final int value;

      private ClosureType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:lnrpc.ChannelCloseSummary.ClosureType)
    }

    public static final int CHANNEL_POINT_FIELD_NUMBER = 1;
    private java.lang.String channelPoint_;
    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    public java.lang.String getChannelPoint() {
      return channelPoint_;
    }
    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    public com.google.protobuf.ByteString
        getChannelPointBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(channelPoint_);
    }
    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    private void setChannelPoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      channelPoint_ = value;
    }
    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    private void clearChannelPoint() {
      
      channelPoint_ = getDefaultInstance().getChannelPoint();
    }
    /**
     * <pre>
     *&#47; The outpoint (txid:index) of the funding transaction. 
     * </pre>
     *
     * <code>optional string channel_point = 1;</code>
     */
    private void setChannelPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      channelPoint_ = value.toStringUtf8();
    }

    public static final int CHAN_ID_FIELD_NUMBER = 2;
    private long chanId_;
    /**
     * <pre>
     *&#47;  The unique channel ID for the channel. 
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     *&#47;  The unique channel ID for the channel. 
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     *&#47;  The unique channel ID for the channel. 
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public static final int CHAIN_HASH_FIELD_NUMBER = 3;
    private java.lang.String chainHash_;
    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    public java.lang.String getChainHash() {
      return chainHash_;
    }
    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    public com.google.protobuf.ByteString
        getChainHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(chainHash_);
    }
    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    private void setChainHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      chainHash_ = value;
    }
    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    private void clearChainHash() {
      
      chainHash_ = getDefaultInstance().getChainHash();
    }
    /**
     * <pre>
     *&#47; The hash of the genesis block that this channel resides within.
     * </pre>
     *
     * <code>optional string chain_hash = 3;</code>
     */
    private void setChainHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      chainHash_ = value.toStringUtf8();
    }

    public static final int CLOSING_TX_HASH_FIELD_NUMBER = 4;
    private java.lang.String closingTxHash_;
    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    public java.lang.String getClosingTxHash() {
      return closingTxHash_;
    }
    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    public com.google.protobuf.ByteString
        getClosingTxHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(closingTxHash_);
    }
    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    private void setClosingTxHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      closingTxHash_ = value;
    }
    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    private void clearClosingTxHash() {
      
      closingTxHash_ = getDefaultInstance().getClosingTxHash();
    }
    /**
     * <pre>
     *&#47; The txid of the transaction which ultimately closed this channel.
     * </pre>
     *
     * <code>optional string closing_tx_hash = 4;</code>
     */
    private void setClosingTxHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      closingTxHash_ = value.toStringUtf8();
    }

    public static final int REMOTE_PUBKEY_FIELD_NUMBER = 5;
    private java.lang.String remotePubkey_;
    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    public java.lang.String getRemotePubkey() {
      return remotePubkey_;
    }
    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    public com.google.protobuf.ByteString
        getRemotePubkeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(remotePubkey_);
    }
    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    private void setRemotePubkey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      remotePubkey_ = value;
    }
    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    private void clearRemotePubkey() {
      
      remotePubkey_ = getDefaultInstance().getRemotePubkey();
    }
    /**
     * <pre>
     *&#47; Public key of the remote peer that we formerly had a channel with.
     * </pre>
     *
     * <code>optional string remote_pubkey = 5;</code>
     */
    private void setRemotePubkeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      remotePubkey_ = value.toStringUtf8();
    }

    public static final int CAPACITY_FIELD_NUMBER = 6;
    private long capacity_;
    /**
     * <pre>
     *&#47; Total capacity of the channel.
     * </pre>
     *
     * <code>optional int64 capacity = 6;</code>
     */
    public long getCapacity() {
      return capacity_;
    }
    /**
     * <pre>
     *&#47; Total capacity of the channel.
     * </pre>
     *
     * <code>optional int64 capacity = 6;</code>
     */
    private void setCapacity(long value) {
      
      capacity_ = value;
    }
    /**
     * <pre>
     *&#47; Total capacity of the channel.
     * </pre>
     *
     * <code>optional int64 capacity = 6;</code>
     */
    private void clearCapacity() {
      
      capacity_ = 0L;
    }

    public static final int CLOSE_HEIGHT_FIELD_NUMBER = 7;
    private int closeHeight_;
    /**
     * <pre>
     *&#47; Height at which the funding transaction was spent.
     * </pre>
     *
     * <code>optional uint32 close_height = 7;</code>
     */
    public int getCloseHeight() {
      return closeHeight_;
    }
    /**
     * <pre>
     *&#47; Height at which the funding transaction was spent.
     * </pre>
     *
     * <code>optional uint32 close_height = 7;</code>
     */
    private void setCloseHeight(int value) {
      
      closeHeight_ = value;
    }
    /**
     * <pre>
     *&#47; Height at which the funding transaction was spent.
     * </pre>
     *
     * <code>optional uint32 close_height = 7;</code>
     */
    private void clearCloseHeight() {
      
      closeHeight_ = 0;
    }

    public static final int SETTLED_BALANCE_FIELD_NUMBER = 8;
    private long settledBalance_;
    /**
     * <pre>
     *&#47; Settled balance at the time of channel closure
     * </pre>
     *
     * <code>optional int64 settled_balance = 8;</code>
     */
    public long getSettledBalance() {
      return settledBalance_;
    }
    /**
     * <pre>
     *&#47; Settled balance at the time of channel closure
     * </pre>
     *
     * <code>optional int64 settled_balance = 8;</code>
     */
    private void setSettledBalance(long value) {
      
      settledBalance_ = value;
    }
    /**
     * <pre>
     *&#47; Settled balance at the time of channel closure
     * </pre>
     *
     * <code>optional int64 settled_balance = 8;</code>
     */
    private void clearSettledBalance() {
      
      settledBalance_ = 0L;
    }

    public static final int TIME_LOCKED_BALANCE_FIELD_NUMBER = 9;
    private long timeLockedBalance_;
    /**
     * <pre>
     *&#47; The sum of all the time-locked outputs at the time of channel closure
     * </pre>
     *
     * <code>optional int64 time_locked_balance = 9;</code>
     */
    public long getTimeLockedBalance() {
      return timeLockedBalance_;
    }
    /**
     * <pre>
     *&#47; The sum of all the time-locked outputs at the time of channel closure
     * </pre>
     *
     * <code>optional int64 time_locked_balance = 9;</code>
     */
    private void setTimeLockedBalance(long value) {
      
      timeLockedBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The sum of all the time-locked outputs at the time of channel closure
     * </pre>
     *
     * <code>optional int64 time_locked_balance = 9;</code>
     */
    private void clearTimeLockedBalance() {
      
      timeLockedBalance_ = 0L;
    }

    public static final int CLOSE_TYPE_FIELD_NUMBER = 10;
    private int closeType_;
    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    public int getCloseTypeValue() {
      return closeType_;
    }
    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    public lnrpc.Rpc.ChannelCloseSummary.ClosureType getCloseType() {
      lnrpc.Rpc.ChannelCloseSummary.ClosureType result = lnrpc.Rpc.ChannelCloseSummary.ClosureType.forNumber(closeType_);
      return result == null ? lnrpc.Rpc.ChannelCloseSummary.ClosureType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    private void setCloseTypeValue(int value) {
        closeType_ = value;
    }
    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    private void setCloseType(lnrpc.Rpc.ChannelCloseSummary.ClosureType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      closeType_ = value.getNumber();
    }
    /**
     * <pre>
     *&#47; Details on how the channel was closed.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
     */
    private void clearCloseType() {
      
      closeType_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!channelPoint_.isEmpty()) {
        output.writeString(1, getChannelPoint());
      }
      if (chanId_ != 0L) {
        output.writeUInt64(2, chanId_);
      }
      if (!chainHash_.isEmpty()) {
        output.writeString(3, getChainHash());
      }
      if (!closingTxHash_.isEmpty()) {
        output.writeString(4, getClosingTxHash());
      }
      if (!remotePubkey_.isEmpty()) {
        output.writeString(5, getRemotePubkey());
      }
      if (capacity_ != 0L) {
        output.writeInt64(6, capacity_);
      }
      if (closeHeight_ != 0) {
        output.writeUInt32(7, closeHeight_);
      }
      if (settledBalance_ != 0L) {
        output.writeInt64(8, settledBalance_);
      }
      if (timeLockedBalance_ != 0L) {
        output.writeInt64(9, timeLockedBalance_);
      }
      if (closeType_ != lnrpc.Rpc.ChannelCloseSummary.ClosureType.COOPERATIVE_CLOSE.getNumber()) {
        output.writeEnum(10, closeType_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!channelPoint_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getChannelPoint());
      }
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, chanId_);
      }
      if (!chainHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getChainHash());
      }
      if (!closingTxHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getClosingTxHash());
      }
      if (!remotePubkey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getRemotePubkey());
      }
      if (capacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, capacity_);
      }
      if (closeHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, closeHeight_);
      }
      if (settledBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, settledBalance_);
      }
      if (timeLockedBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, timeLockedBalance_);
      }
      if (closeType_ != lnrpc.Rpc.ChannelCloseSummary.ClosureType.COOPERATIVE_CLOSE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, closeType_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelCloseSummary parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelCloseSummary prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelCloseSummary}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelCloseSummary, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelCloseSummary)
        lnrpc.Rpc.ChannelCloseSummaryOrBuilder {
      // Construct using lnrpc.Rpc.ChannelCloseSummary.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The outpoint (txid:index) of the funding transaction. 
       * </pre>
       *
       * <code>optional string channel_point = 1;</code>
       */
      public java.lang.String getChannelPoint() {
        return instance.getChannelPoint();
      }
      /**
       * <pre>
       *&#47; The outpoint (txid:index) of the funding transaction. 
       * </pre>
       *
       * <code>optional string channel_point = 1;</code>
       */
      public com.google.protobuf.ByteString
          getChannelPointBytes() {
        return instance.getChannelPointBytes();
      }
      /**
       * <pre>
       *&#47; The outpoint (txid:index) of the funding transaction. 
       * </pre>
       *
       * <code>optional string channel_point = 1;</code>
       */
      public Builder setChannelPoint(
          java.lang.String value) {
        copyOnWrite();
        instance.setChannelPoint(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The outpoint (txid:index) of the funding transaction. 
       * </pre>
       *
       * <code>optional string channel_point = 1;</code>
       */
      public Builder clearChannelPoint() {
        copyOnWrite();
        instance.clearChannelPoint();
        return this;
      }
      /**
       * <pre>
       *&#47; The outpoint (txid:index) of the funding transaction. 
       * </pre>
       *
       * <code>optional string channel_point = 1;</code>
       */
      public Builder setChannelPointBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChannelPointBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47;  The unique channel ID for the channel. 
       * </pre>
       *
       * <code>optional uint64 chan_id = 2;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       *&#47;  The unique channel ID for the channel. 
       * </pre>
       *
       * <code>optional uint64 chan_id = 2;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       *&#47;  The unique channel ID for the channel. 
       * </pre>
       *
       * <code>optional uint64 chan_id = 2;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      /**
       * <pre>
       *&#47; The hash of the genesis block that this channel resides within.
       * </pre>
       *
       * <code>optional string chain_hash = 3;</code>
       */
      public java.lang.String getChainHash() {
        return instance.getChainHash();
      }
      /**
       * <pre>
       *&#47; The hash of the genesis block that this channel resides within.
       * </pre>
       *
       * <code>optional string chain_hash = 3;</code>
       */
      public com.google.protobuf.ByteString
          getChainHashBytes() {
        return instance.getChainHashBytes();
      }
      /**
       * <pre>
       *&#47; The hash of the genesis block that this channel resides within.
       * </pre>
       *
       * <code>optional string chain_hash = 3;</code>
       */
      public Builder setChainHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setChainHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hash of the genesis block that this channel resides within.
       * </pre>
       *
       * <code>optional string chain_hash = 3;</code>
       */
      public Builder clearChainHash() {
        copyOnWrite();
        instance.clearChainHash();
        return this;
      }
      /**
       * <pre>
       *&#47; The hash of the genesis block that this channel resides within.
       * </pre>
       *
       * <code>optional string chain_hash = 3;</code>
       */
      public Builder setChainHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChainHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The txid of the transaction which ultimately closed this channel.
       * </pre>
       *
       * <code>optional string closing_tx_hash = 4;</code>
       */
      public java.lang.String getClosingTxHash() {
        return instance.getClosingTxHash();
      }
      /**
       * <pre>
       *&#47; The txid of the transaction which ultimately closed this channel.
       * </pre>
       *
       * <code>optional string closing_tx_hash = 4;</code>
       */
      public com.google.protobuf.ByteString
          getClosingTxHashBytes() {
        return instance.getClosingTxHashBytes();
      }
      /**
       * <pre>
       *&#47; The txid of the transaction which ultimately closed this channel.
       * </pre>
       *
       * <code>optional string closing_tx_hash = 4;</code>
       */
      public Builder setClosingTxHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setClosingTxHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The txid of the transaction which ultimately closed this channel.
       * </pre>
       *
       * <code>optional string closing_tx_hash = 4;</code>
       */
      public Builder clearClosingTxHash() {
        copyOnWrite();
        instance.clearClosingTxHash();
        return this;
      }
      /**
       * <pre>
       *&#47; The txid of the transaction which ultimately closed this channel.
       * </pre>
       *
       * <code>optional string closing_tx_hash = 4;</code>
       */
      public Builder setClosingTxHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setClosingTxHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Public key of the remote peer that we formerly had a channel with.
       * </pre>
       *
       * <code>optional string remote_pubkey = 5;</code>
       */
      public java.lang.String getRemotePubkey() {
        return instance.getRemotePubkey();
      }
      /**
       * <pre>
       *&#47; Public key of the remote peer that we formerly had a channel with.
       * </pre>
       *
       * <code>optional string remote_pubkey = 5;</code>
       */
      public com.google.protobuf.ByteString
          getRemotePubkeyBytes() {
        return instance.getRemotePubkeyBytes();
      }
      /**
       * <pre>
       *&#47; Public key of the remote peer that we formerly had a channel with.
       * </pre>
       *
       * <code>optional string remote_pubkey = 5;</code>
       */
      public Builder setRemotePubkey(
          java.lang.String value) {
        copyOnWrite();
        instance.setRemotePubkey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Public key of the remote peer that we formerly had a channel with.
       * </pre>
       *
       * <code>optional string remote_pubkey = 5;</code>
       */
      public Builder clearRemotePubkey() {
        copyOnWrite();
        instance.clearRemotePubkey();
        return this;
      }
      /**
       * <pre>
       *&#47; Public key of the remote peer that we formerly had a channel with.
       * </pre>
       *
       * <code>optional string remote_pubkey = 5;</code>
       */
      public Builder setRemotePubkeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRemotePubkeyBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Total capacity of the channel.
       * </pre>
       *
       * <code>optional int64 capacity = 6;</code>
       */
      public long getCapacity() {
        return instance.getCapacity();
      }
      /**
       * <pre>
       *&#47; Total capacity of the channel.
       * </pre>
       *
       * <code>optional int64 capacity = 6;</code>
       */
      public Builder setCapacity(long value) {
        copyOnWrite();
        instance.setCapacity(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Total capacity of the channel.
       * </pre>
       *
       * <code>optional int64 capacity = 6;</code>
       */
      public Builder clearCapacity() {
        copyOnWrite();
        instance.clearCapacity();
        return this;
      }

      /**
       * <pre>
       *&#47; Height at which the funding transaction was spent.
       * </pre>
       *
       * <code>optional uint32 close_height = 7;</code>
       */
      public int getCloseHeight() {
        return instance.getCloseHeight();
      }
      /**
       * <pre>
       *&#47; Height at which the funding transaction was spent.
       * </pre>
       *
       * <code>optional uint32 close_height = 7;</code>
       */
      public Builder setCloseHeight(int value) {
        copyOnWrite();
        instance.setCloseHeight(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Height at which the funding transaction was spent.
       * </pre>
       *
       * <code>optional uint32 close_height = 7;</code>
       */
      public Builder clearCloseHeight() {
        copyOnWrite();
        instance.clearCloseHeight();
        return this;
      }

      /**
       * <pre>
       *&#47; Settled balance at the time of channel closure
       * </pre>
       *
       * <code>optional int64 settled_balance = 8;</code>
       */
      public long getSettledBalance() {
        return instance.getSettledBalance();
      }
      /**
       * <pre>
       *&#47; Settled balance at the time of channel closure
       * </pre>
       *
       * <code>optional int64 settled_balance = 8;</code>
       */
      public Builder setSettledBalance(long value) {
        copyOnWrite();
        instance.setSettledBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Settled balance at the time of channel closure
       * </pre>
       *
       * <code>optional int64 settled_balance = 8;</code>
       */
      public Builder clearSettledBalance() {
        copyOnWrite();
        instance.clearSettledBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; The sum of all the time-locked outputs at the time of channel closure
       * </pre>
       *
       * <code>optional int64 time_locked_balance = 9;</code>
       */
      public long getTimeLockedBalance() {
        return instance.getTimeLockedBalance();
      }
      /**
       * <pre>
       *&#47; The sum of all the time-locked outputs at the time of channel closure
       * </pre>
       *
       * <code>optional int64 time_locked_balance = 9;</code>
       */
      public Builder setTimeLockedBalance(long value) {
        copyOnWrite();
        instance.setTimeLockedBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The sum of all the time-locked outputs at the time of channel closure
       * </pre>
       *
       * <code>optional int64 time_locked_balance = 9;</code>
       */
      public Builder clearTimeLockedBalance() {
        copyOnWrite();
        instance.clearTimeLockedBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; Details on how the channel was closed.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
       */
      public int getCloseTypeValue() {
        return instance.getCloseTypeValue();
      }
      /**
       * <pre>
       *&#47; Details on how the channel was closed.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
       */
      public Builder setCloseTypeValue(int value) {
        copyOnWrite();
        instance.setCloseTypeValue(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Details on how the channel was closed.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
       */
      public lnrpc.Rpc.ChannelCloseSummary.ClosureType getCloseType() {
        return instance.getCloseType();
      }
      /**
       * <pre>
       *&#47; Details on how the channel was closed.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
       */
      public Builder setCloseType(lnrpc.Rpc.ChannelCloseSummary.ClosureType value) {
        copyOnWrite();
        instance.setCloseType(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Details on how the channel was closed.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;</code>
       */
      public Builder clearCloseType() {
        copyOnWrite();
        instance.clearCloseType();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelCloseSummary)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelCloseSummary();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelCloseSummary other = (lnrpc.Rpc.ChannelCloseSummary) arg1;
          channelPoint_ = visitor.visitString(!channelPoint_.isEmpty(), channelPoint_,
              !other.channelPoint_.isEmpty(), other.channelPoint_);
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          chainHash_ = visitor.visitString(!chainHash_.isEmpty(), chainHash_,
              !other.chainHash_.isEmpty(), other.chainHash_);
          closingTxHash_ = visitor.visitString(!closingTxHash_.isEmpty(), closingTxHash_,
              !other.closingTxHash_.isEmpty(), other.closingTxHash_);
          remotePubkey_ = visitor.visitString(!remotePubkey_.isEmpty(), remotePubkey_,
              !other.remotePubkey_.isEmpty(), other.remotePubkey_);
          capacity_ = visitor.visitLong(capacity_ != 0L, capacity_,
              other.capacity_ != 0L, other.capacity_);
          closeHeight_ = visitor.visitInt(closeHeight_ != 0, closeHeight_,
              other.closeHeight_ != 0, other.closeHeight_);
          settledBalance_ = visitor.visitLong(settledBalance_ != 0L, settledBalance_,
              other.settledBalance_ != 0L, other.settledBalance_);
          timeLockedBalance_ = visitor.visitLong(timeLockedBalance_ != 0L, timeLockedBalance_,
              other.timeLockedBalance_ != 0L, other.timeLockedBalance_);
          closeType_ = visitor.visitInt(closeType_ != 0, closeType_,    other.closeType_ != 0, other.closeType_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  channelPoint_ = s;
                  break;
                }
                case 16: {

                  chanId_ = input.readUInt64();
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  chainHash_ = s;
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  closingTxHash_ = s;
                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  remotePubkey_ = s;
                  break;
                }
                case 48: {

                  capacity_ = input.readInt64();
                  break;
                }
                case 56: {

                  closeHeight_ = input.readUInt32();
                  break;
                }
                case 64: {

                  settledBalance_ = input.readInt64();
                  break;
                }
                case 72: {

                  timeLockedBalance_ = input.readInt64();
                  break;
                }
                case 80: {
                  int rawValue = input.readEnum();

                  closeType_ = rawValue;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelCloseSummary.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelCloseSummary)
    private static final lnrpc.Rpc.ChannelCloseSummary DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelCloseSummary();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelCloseSummary getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelCloseSummary> PARSER;

    public static com.google.protobuf.Parser<ChannelCloseSummary> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClosedChannelsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ClosedChannelsRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool cooperative = 1;</code>
     */
    boolean getCooperative();

    /**
     * <code>optional bool local_force = 2;</code>
     */
    boolean getLocalForce();

    /**
     * <code>optional bool remote_force = 3;</code>
     */
    boolean getRemoteForce();

    /**
     * <code>optional bool breach = 4;</code>
     */
    boolean getBreach();

    /**
     * <code>optional bool funding_canceled = 5;</code>
     */
    boolean getFundingCanceled();

    /**
     * <code>optional bool abandoned = 6;</code>
     */
    boolean getAbandoned();
  }
  /**
   * Protobuf type {@code lnrpc.ClosedChannelsRequest}
   */
  public  static final class ClosedChannelsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ClosedChannelsRequest, ClosedChannelsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ClosedChannelsRequest)
      ClosedChannelsRequestOrBuilder {
    private ClosedChannelsRequest() {
    }
    public static final int COOPERATIVE_FIELD_NUMBER = 1;
    private boolean cooperative_;
    /**
     * <code>optional bool cooperative = 1;</code>
     */
    public boolean getCooperative() {
      return cooperative_;
    }
    /**
     * <code>optional bool cooperative = 1;</code>
     */
    private void setCooperative(boolean value) {
      
      cooperative_ = value;
    }
    /**
     * <code>optional bool cooperative = 1;</code>
     */
    private void clearCooperative() {
      
      cooperative_ = false;
    }

    public static final int LOCAL_FORCE_FIELD_NUMBER = 2;
    private boolean localForce_;
    /**
     * <code>optional bool local_force = 2;</code>
     */
    public boolean getLocalForce() {
      return localForce_;
    }
    /**
     * <code>optional bool local_force = 2;</code>
     */
    private void setLocalForce(boolean value) {
      
      localForce_ = value;
    }
    /**
     * <code>optional bool local_force = 2;</code>
     */
    private void clearLocalForce() {
      
      localForce_ = false;
    }

    public static final int REMOTE_FORCE_FIELD_NUMBER = 3;
    private boolean remoteForce_;
    /**
     * <code>optional bool remote_force = 3;</code>
     */
    public boolean getRemoteForce() {
      return remoteForce_;
    }
    /**
     * <code>optional bool remote_force = 3;</code>
     */
    private void setRemoteForce(boolean value) {
      
      remoteForce_ = value;
    }
    /**
     * <code>optional bool remote_force = 3;</code>
     */
    private void clearRemoteForce() {
      
      remoteForce_ = false;
    }

    public static final int BREACH_FIELD_NUMBER = 4;
    private boolean breach_;
    /**
     * <code>optional bool breach = 4;</code>
     */
    public boolean getBreach() {
      return breach_;
    }
    /**
     * <code>optional bool breach = 4;</code>
     */
    private void setBreach(boolean value) {
      
      breach_ = value;
    }
    /**
     * <code>optional bool breach = 4;</code>
     */
    private void clearBreach() {
      
      breach_ = false;
    }

    public static final int FUNDING_CANCELED_FIELD_NUMBER = 5;
    private boolean fundingCanceled_;
    /**
     * <code>optional bool funding_canceled = 5;</code>
     */
    public boolean getFundingCanceled() {
      return fundingCanceled_;
    }
    /**
     * <code>optional bool funding_canceled = 5;</code>
     */
    private void setFundingCanceled(boolean value) {
      
      fundingCanceled_ = value;
    }
    /**
     * <code>optional bool funding_canceled = 5;</code>
     */
    private void clearFundingCanceled() {
      
      fundingCanceled_ = false;
    }

    public static final int ABANDONED_FIELD_NUMBER = 6;
    private boolean abandoned_;
    /**
     * <code>optional bool abandoned = 6;</code>
     */
    public boolean getAbandoned() {
      return abandoned_;
    }
    /**
     * <code>optional bool abandoned = 6;</code>
     */
    private void setAbandoned(boolean value) {
      
      abandoned_ = value;
    }
    /**
     * <code>optional bool abandoned = 6;</code>
     */
    private void clearAbandoned() {
      
      abandoned_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (cooperative_ != false) {
        output.writeBool(1, cooperative_);
      }
      if (localForce_ != false) {
        output.writeBool(2, localForce_);
      }
      if (remoteForce_ != false) {
        output.writeBool(3, remoteForce_);
      }
      if (breach_ != false) {
        output.writeBool(4, breach_);
      }
      if (fundingCanceled_ != false) {
        output.writeBool(5, fundingCanceled_);
      }
      if (abandoned_ != false) {
        output.writeBool(6, abandoned_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (cooperative_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, cooperative_);
      }
      if (localForce_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, localForce_);
      }
      if (remoteForce_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, remoteForce_);
      }
      if (breach_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, breach_);
      }
      if (fundingCanceled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, fundingCanceled_);
      }
      if (abandoned_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, abandoned_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ClosedChannelsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ClosedChannelsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ClosedChannelsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ClosedChannelsRequest)
        lnrpc.Rpc.ClosedChannelsRequestOrBuilder {
      // Construct using lnrpc.Rpc.ClosedChannelsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool cooperative = 1;</code>
       */
      public boolean getCooperative() {
        return instance.getCooperative();
      }
      /**
       * <code>optional bool cooperative = 1;</code>
       */
      public Builder setCooperative(boolean value) {
        copyOnWrite();
        instance.setCooperative(value);
        return this;
      }
      /**
       * <code>optional bool cooperative = 1;</code>
       */
      public Builder clearCooperative() {
        copyOnWrite();
        instance.clearCooperative();
        return this;
      }

      /**
       * <code>optional bool local_force = 2;</code>
       */
      public boolean getLocalForce() {
        return instance.getLocalForce();
      }
      /**
       * <code>optional bool local_force = 2;</code>
       */
      public Builder setLocalForce(boolean value) {
        copyOnWrite();
        instance.setLocalForce(value);
        return this;
      }
      /**
       * <code>optional bool local_force = 2;</code>
       */
      public Builder clearLocalForce() {
        copyOnWrite();
        instance.clearLocalForce();
        return this;
      }

      /**
       * <code>optional bool remote_force = 3;</code>
       */
      public boolean getRemoteForce() {
        return instance.getRemoteForce();
      }
      /**
       * <code>optional bool remote_force = 3;</code>
       */
      public Builder setRemoteForce(boolean value) {
        copyOnWrite();
        instance.setRemoteForce(value);
        return this;
      }
      /**
       * <code>optional bool remote_force = 3;</code>
       */
      public Builder clearRemoteForce() {
        copyOnWrite();
        instance.clearRemoteForce();
        return this;
      }

      /**
       * <code>optional bool breach = 4;</code>
       */
      public boolean getBreach() {
        return instance.getBreach();
      }
      /**
       * <code>optional bool breach = 4;</code>
       */
      public Builder setBreach(boolean value) {
        copyOnWrite();
        instance.setBreach(value);
        return this;
      }
      /**
       * <code>optional bool breach = 4;</code>
       */
      public Builder clearBreach() {
        copyOnWrite();
        instance.clearBreach();
        return this;
      }

      /**
       * <code>optional bool funding_canceled = 5;</code>
       */
      public boolean getFundingCanceled() {
        return instance.getFundingCanceled();
      }
      /**
       * <code>optional bool funding_canceled = 5;</code>
       */
      public Builder setFundingCanceled(boolean value) {
        copyOnWrite();
        instance.setFundingCanceled(value);
        return this;
      }
      /**
       * <code>optional bool funding_canceled = 5;</code>
       */
      public Builder clearFundingCanceled() {
        copyOnWrite();
        instance.clearFundingCanceled();
        return this;
      }

      /**
       * <code>optional bool abandoned = 6;</code>
       */
      public boolean getAbandoned() {
        return instance.getAbandoned();
      }
      /**
       * <code>optional bool abandoned = 6;</code>
       */
      public Builder setAbandoned(boolean value) {
        copyOnWrite();
        instance.setAbandoned(value);
        return this;
      }
      /**
       * <code>optional bool abandoned = 6;</code>
       */
      public Builder clearAbandoned() {
        copyOnWrite();
        instance.clearAbandoned();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ClosedChannelsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ClosedChannelsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ClosedChannelsRequest other = (lnrpc.Rpc.ClosedChannelsRequest) arg1;
          cooperative_ = visitor.visitBoolean(cooperative_ != false, cooperative_,
              other.cooperative_ != false, other.cooperative_);
          localForce_ = visitor.visitBoolean(localForce_ != false, localForce_,
              other.localForce_ != false, other.localForce_);
          remoteForce_ = visitor.visitBoolean(remoteForce_ != false, remoteForce_,
              other.remoteForce_ != false, other.remoteForce_);
          breach_ = visitor.visitBoolean(breach_ != false, breach_,
              other.breach_ != false, other.breach_);
          fundingCanceled_ = visitor.visitBoolean(fundingCanceled_ != false, fundingCanceled_,
              other.fundingCanceled_ != false, other.fundingCanceled_);
          abandoned_ = visitor.visitBoolean(abandoned_ != false, abandoned_,
              other.abandoned_ != false, other.abandoned_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  cooperative_ = input.readBool();
                  break;
                }
                case 16: {

                  localForce_ = input.readBool();
                  break;
                }
                case 24: {

                  remoteForce_ = input.readBool();
                  break;
                }
                case 32: {

                  breach_ = input.readBool();
                  break;
                }
                case 40: {

                  fundingCanceled_ = input.readBool();
                  break;
                }
                case 48: {

                  abandoned_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ClosedChannelsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ClosedChannelsRequest)
    private static final lnrpc.Rpc.ClosedChannelsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClosedChannelsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ClosedChannelsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ClosedChannelsRequest> PARSER;

    public static com.google.protobuf.Parser<ClosedChannelsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClosedChannelsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ClosedChannelsResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    java.util.List<lnrpc.Rpc.ChannelCloseSummary> 
        getChannelsList();
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    lnrpc.Rpc.ChannelCloseSummary getChannels(int index);
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    int getChannelsCount();
  }
  /**
   * Protobuf type {@code lnrpc.ClosedChannelsResponse}
   */
  public  static final class ClosedChannelsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ClosedChannelsResponse, ClosedChannelsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ClosedChannelsResponse)
      ClosedChannelsResponseOrBuilder {
    private ClosedChannelsResponse() {
      channels_ = emptyProtobufList();
    }
    public static final int CHANNELS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.ChannelCloseSummary> channels_;
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.ChannelCloseSummary> getChannelsList() {
      return channels_;
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ChannelCloseSummaryOrBuilder> 
        getChannelsOrBuilderList() {
      return channels_;
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    public int getChannelsCount() {
      return channels_.size();
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    public lnrpc.Rpc.ChannelCloseSummary getChannels(int index) {
      return channels_.get(index);
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    public lnrpc.Rpc.ChannelCloseSummaryOrBuilder getChannelsOrBuilder(
        int index) {
      return channels_.get(index);
    }
    private void ensureChannelsIsMutable() {
      if (!channels_.isModifiable()) {
        channels_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(channels_);
       }
    }

    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void setChannels(
        int index, lnrpc.Rpc.ChannelCloseSummary value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelsIsMutable();
      channels_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void setChannels(
        int index, lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
      ensureChannelsIsMutable();
      channels_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void addChannels(lnrpc.Rpc.ChannelCloseSummary value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelsIsMutable();
      channels_.add(value);
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void addChannels(
        int index, lnrpc.Rpc.ChannelCloseSummary value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelsIsMutable();
      channels_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void addChannels(
        lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
      ensureChannelsIsMutable();
      channels_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void addChannels(
        int index, lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
      ensureChannelsIsMutable();
      channels_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void addAllChannels(
        java.lang.Iterable<? extends lnrpc.Rpc.ChannelCloseSummary> values) {
      ensureChannelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, channels_);
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void clearChannels() {
      channels_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
     */
    private void removeChannels(int index) {
      ensureChannelsIsMutable();
      channels_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < channels_.size(); i++) {
        output.writeMessage(1, channels_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < channels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, channels_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ClosedChannelsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ClosedChannelsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ClosedChannelsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ClosedChannelsResponse)
        lnrpc.Rpc.ClosedChannelsResponseOrBuilder {
      // Construct using lnrpc.Rpc.ClosedChannelsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.ChannelCloseSummary> getChannelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getChannelsList());
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public int getChannelsCount() {
        return instance.getChannelsCount();
      }/**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public lnrpc.Rpc.ChannelCloseSummary getChannels(int index) {
        return instance.getChannels(index);
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder setChannels(
          int index, lnrpc.Rpc.ChannelCloseSummary value) {
        copyOnWrite();
        instance.setChannels(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder setChannels(
          int index, lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
        copyOnWrite();
        instance.setChannels(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder addChannels(lnrpc.Rpc.ChannelCloseSummary value) {
        copyOnWrite();
        instance.addChannels(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder addChannels(
          int index, lnrpc.Rpc.ChannelCloseSummary value) {
        copyOnWrite();
        instance.addChannels(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder addChannels(
          lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
        copyOnWrite();
        instance.addChannels(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder addChannels(
          int index, lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
        copyOnWrite();
        instance.addChannels(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder addAllChannels(
          java.lang.Iterable<? extends lnrpc.Rpc.ChannelCloseSummary> values) {
        copyOnWrite();
        instance.addAllChannels(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder clearChannels() {
        copyOnWrite();
        instance.clearChannels();
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelCloseSummary channels = 1;</code>
       */
      public Builder removeChannels(int index) {
        copyOnWrite();
        instance.removeChannels(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ClosedChannelsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ClosedChannelsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          channels_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ClosedChannelsResponse other = (lnrpc.Rpc.ClosedChannelsResponse) arg1;
          channels_= visitor.visitList(channels_, other.channels_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!channels_.isModifiable()) {
                    channels_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(channels_);
                  }
                  channels_.add(
                      input.readMessage(lnrpc.Rpc.ChannelCloseSummary.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ClosedChannelsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ClosedChannelsResponse)
    private static final lnrpc.Rpc.ClosedChannelsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClosedChannelsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ClosedChannelsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ClosedChannelsResponse> PARSER;

    public static com.google.protobuf.Parser<ClosedChannelsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PeerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Peer)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    java.lang.String getPubKey();
    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    com.google.protobuf.ByteString
        getPubKeyBytes();

    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    java.lang.String getAddress();
    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <pre>
     *&#47; Bytes of data transmitted to this peer
     * </pre>
     *
     * <code>optional uint64 bytes_sent = 4;</code>
     */
    long getBytesSent();

    /**
     * <pre>
     *&#47; Bytes of data transmitted from this peer
     * </pre>
     *
     * <code>optional uint64 bytes_recv = 5;</code>
     */
    long getBytesRecv();

    /**
     * <pre>
     *&#47; Satoshis sent to this peer
     * </pre>
     *
     * <code>optional int64 sat_sent = 6;</code>
     */
    long getSatSent();

    /**
     * <pre>
     *&#47; Satoshis received from this peer
     * </pre>
     *
     * <code>optional int64 sat_recv = 7;</code>
     */
    long getSatRecv();

    /**
     * <pre>
     *&#47; A channel is inbound if the counterparty initiated the channel
     * </pre>
     *
     * <code>optional bool inbound = 8;</code>
     */
    boolean getInbound();

    /**
     * <pre>
     *&#47; Ping time to this peer
     * </pre>
     *
     * <code>optional int64 ping_time = 9;</code>
     */
    long getPingTime();
  }
  /**
   * Protobuf type {@code lnrpc.Peer}
   */
  public  static final class Peer extends
      com.google.protobuf.GeneratedMessageLite<
          Peer, Peer.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Peer)
      PeerOrBuilder {
    private Peer() {
      pubKey_ = "";
      address_ = "";
    }
    public static final int PUB_KEY_FIELD_NUMBER = 1;
    private java.lang.String pubKey_;
    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public java.lang.String getPubKey() {
      return pubKey_;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubKey_);
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubKey_ = value;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void clearPubKey() {
      
      pubKey_ = getDefaultInstance().getPubKey();
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the peer
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubKey_ = value.toStringUtf8();
    }

    public static final int ADDRESS_FIELD_NUMBER = 3;
    private java.lang.String address_;
    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    public java.lang.String getAddress() {
      return address_;
    }
    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    public com.google.protobuf.ByteString
        getAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(address_);
    }
    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    private void setAddress(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      address_ = value;
    }
    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    private void clearAddress() {
      
      address_ = getDefaultInstance().getAddress();
    }
    /**
     * <pre>
     *&#47; Network address of the peer; eg `127.0.0.1:10011`
     * </pre>
     *
     * <code>optional string address = 3;</code>
     */
    private void setAddressBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      address_ = value.toStringUtf8();
    }

    public static final int BYTES_SENT_FIELD_NUMBER = 4;
    private long bytesSent_;
    /**
     * <pre>
     *&#47; Bytes of data transmitted to this peer
     * </pre>
     *
     * <code>optional uint64 bytes_sent = 4;</code>
     */
    public long getBytesSent() {
      return bytesSent_;
    }
    /**
     * <pre>
     *&#47; Bytes of data transmitted to this peer
     * </pre>
     *
     * <code>optional uint64 bytes_sent = 4;</code>
     */
    private void setBytesSent(long value) {
      
      bytesSent_ = value;
    }
    /**
     * <pre>
     *&#47; Bytes of data transmitted to this peer
     * </pre>
     *
     * <code>optional uint64 bytes_sent = 4;</code>
     */
    private void clearBytesSent() {
      
      bytesSent_ = 0L;
    }

    public static final int BYTES_RECV_FIELD_NUMBER = 5;
    private long bytesRecv_;
    /**
     * <pre>
     *&#47; Bytes of data transmitted from this peer
     * </pre>
     *
     * <code>optional uint64 bytes_recv = 5;</code>
     */
    public long getBytesRecv() {
      return bytesRecv_;
    }
    /**
     * <pre>
     *&#47; Bytes of data transmitted from this peer
     * </pre>
     *
     * <code>optional uint64 bytes_recv = 5;</code>
     */
    private void setBytesRecv(long value) {
      
      bytesRecv_ = value;
    }
    /**
     * <pre>
     *&#47; Bytes of data transmitted from this peer
     * </pre>
     *
     * <code>optional uint64 bytes_recv = 5;</code>
     */
    private void clearBytesRecv() {
      
      bytesRecv_ = 0L;
    }

    public static final int SAT_SENT_FIELD_NUMBER = 6;
    private long satSent_;
    /**
     * <pre>
     *&#47; Satoshis sent to this peer
     * </pre>
     *
     * <code>optional int64 sat_sent = 6;</code>
     */
    public long getSatSent() {
      return satSent_;
    }
    /**
     * <pre>
     *&#47; Satoshis sent to this peer
     * </pre>
     *
     * <code>optional int64 sat_sent = 6;</code>
     */
    private void setSatSent(long value) {
      
      satSent_ = value;
    }
    /**
     * <pre>
     *&#47; Satoshis sent to this peer
     * </pre>
     *
     * <code>optional int64 sat_sent = 6;</code>
     */
    private void clearSatSent() {
      
      satSent_ = 0L;
    }

    public static final int SAT_RECV_FIELD_NUMBER = 7;
    private long satRecv_;
    /**
     * <pre>
     *&#47; Satoshis received from this peer
     * </pre>
     *
     * <code>optional int64 sat_recv = 7;</code>
     */
    public long getSatRecv() {
      return satRecv_;
    }
    /**
     * <pre>
     *&#47; Satoshis received from this peer
     * </pre>
     *
     * <code>optional int64 sat_recv = 7;</code>
     */
    private void setSatRecv(long value) {
      
      satRecv_ = value;
    }
    /**
     * <pre>
     *&#47; Satoshis received from this peer
     * </pre>
     *
     * <code>optional int64 sat_recv = 7;</code>
     */
    private void clearSatRecv() {
      
      satRecv_ = 0L;
    }

    public static final int INBOUND_FIELD_NUMBER = 8;
    private boolean inbound_;
    /**
     * <pre>
     *&#47; A channel is inbound if the counterparty initiated the channel
     * </pre>
     *
     * <code>optional bool inbound = 8;</code>
     */
    public boolean getInbound() {
      return inbound_;
    }
    /**
     * <pre>
     *&#47; A channel is inbound if the counterparty initiated the channel
     * </pre>
     *
     * <code>optional bool inbound = 8;</code>
     */
    private void setInbound(boolean value) {
      
      inbound_ = value;
    }
    /**
     * <pre>
     *&#47; A channel is inbound if the counterparty initiated the channel
     * </pre>
     *
     * <code>optional bool inbound = 8;</code>
     */
    private void clearInbound() {
      
      inbound_ = false;
    }

    public static final int PING_TIME_FIELD_NUMBER = 9;
    private long pingTime_;
    /**
     * <pre>
     *&#47; Ping time to this peer
     * </pre>
     *
     * <code>optional int64 ping_time = 9;</code>
     */
    public long getPingTime() {
      return pingTime_;
    }
    /**
     * <pre>
     *&#47; Ping time to this peer
     * </pre>
     *
     * <code>optional int64 ping_time = 9;</code>
     */
    private void setPingTime(long value) {
      
      pingTime_ = value;
    }
    /**
     * <pre>
     *&#47; Ping time to this peer
     * </pre>
     *
     * <code>optional int64 ping_time = 9;</code>
     */
    private void clearPingTime() {
      
      pingTime_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!pubKey_.isEmpty()) {
        output.writeString(1, getPubKey());
      }
      if (!address_.isEmpty()) {
        output.writeString(3, getAddress());
      }
      if (bytesSent_ != 0L) {
        output.writeUInt64(4, bytesSent_);
      }
      if (bytesRecv_ != 0L) {
        output.writeUInt64(5, bytesRecv_);
      }
      if (satSent_ != 0L) {
        output.writeInt64(6, satSent_);
      }
      if (satRecv_ != 0L) {
        output.writeInt64(7, satRecv_);
      }
      if (inbound_ != false) {
        output.writeBool(8, inbound_);
      }
      if (pingTime_ != 0L) {
        output.writeInt64(9, pingTime_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!pubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPubKey());
      }
      if (!address_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getAddress());
      }
      if (bytesSent_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, bytesSent_);
      }
      if (bytesRecv_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, bytesRecv_);
      }
      if (satSent_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, satSent_);
      }
      if (satRecv_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, satRecv_);
      }
      if (inbound_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, inbound_);
      }
      if (pingTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, pingTime_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Peer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Peer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Peer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Peer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Peer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Peer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Peer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Peer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Peer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Peer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Peer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Peer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Peer, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Peer)
        lnrpc.Rpc.PeerOrBuilder {
      // Construct using lnrpc.Rpc.Peer.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The identity pubkey of the peer
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public java.lang.String getPubKey() {
        return instance.getPubKey();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the peer
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPubKeyBytes() {
        return instance.getPubKeyBytes();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the peer
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubKey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the peer
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder clearPubKey() {
        copyOnWrite();
        instance.clearPubKey();
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the peer
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubKeyBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Network address of the peer; eg `127.0.0.1:10011`
       * </pre>
       *
       * <code>optional string address = 3;</code>
       */
      public java.lang.String getAddress() {
        return instance.getAddress();
      }
      /**
       * <pre>
       *&#47; Network address of the peer; eg `127.0.0.1:10011`
       * </pre>
       *
       * <code>optional string address = 3;</code>
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        return instance.getAddressBytes();
      }
      /**
       * <pre>
       *&#47; Network address of the peer; eg `127.0.0.1:10011`
       * </pre>
       *
       * <code>optional string address = 3;</code>
       */
      public Builder setAddress(
          java.lang.String value) {
        copyOnWrite();
        instance.setAddress(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Network address of the peer; eg `127.0.0.1:10011`
       * </pre>
       *
       * <code>optional string address = 3;</code>
       */
      public Builder clearAddress() {
        copyOnWrite();
        instance.clearAddress();
        return this;
      }
      /**
       * <pre>
       *&#47; Network address of the peer; eg `127.0.0.1:10011`
       * </pre>
       *
       * <code>optional string address = 3;</code>
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAddressBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Bytes of data transmitted to this peer
       * </pre>
       *
       * <code>optional uint64 bytes_sent = 4;</code>
       */
      public long getBytesSent() {
        return instance.getBytesSent();
      }
      /**
       * <pre>
       *&#47; Bytes of data transmitted to this peer
       * </pre>
       *
       * <code>optional uint64 bytes_sent = 4;</code>
       */
      public Builder setBytesSent(long value) {
        copyOnWrite();
        instance.setBytesSent(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Bytes of data transmitted to this peer
       * </pre>
       *
       * <code>optional uint64 bytes_sent = 4;</code>
       */
      public Builder clearBytesSent() {
        copyOnWrite();
        instance.clearBytesSent();
        return this;
      }

      /**
       * <pre>
       *&#47; Bytes of data transmitted from this peer
       * </pre>
       *
       * <code>optional uint64 bytes_recv = 5;</code>
       */
      public long getBytesRecv() {
        return instance.getBytesRecv();
      }
      /**
       * <pre>
       *&#47; Bytes of data transmitted from this peer
       * </pre>
       *
       * <code>optional uint64 bytes_recv = 5;</code>
       */
      public Builder setBytesRecv(long value) {
        copyOnWrite();
        instance.setBytesRecv(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Bytes of data transmitted from this peer
       * </pre>
       *
       * <code>optional uint64 bytes_recv = 5;</code>
       */
      public Builder clearBytesRecv() {
        copyOnWrite();
        instance.clearBytesRecv();
        return this;
      }

      /**
       * <pre>
       *&#47; Satoshis sent to this peer
       * </pre>
       *
       * <code>optional int64 sat_sent = 6;</code>
       */
      public long getSatSent() {
        return instance.getSatSent();
      }
      /**
       * <pre>
       *&#47; Satoshis sent to this peer
       * </pre>
       *
       * <code>optional int64 sat_sent = 6;</code>
       */
      public Builder setSatSent(long value) {
        copyOnWrite();
        instance.setSatSent(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Satoshis sent to this peer
       * </pre>
       *
       * <code>optional int64 sat_sent = 6;</code>
       */
      public Builder clearSatSent() {
        copyOnWrite();
        instance.clearSatSent();
        return this;
      }

      /**
       * <pre>
       *&#47; Satoshis received from this peer
       * </pre>
       *
       * <code>optional int64 sat_recv = 7;</code>
       */
      public long getSatRecv() {
        return instance.getSatRecv();
      }
      /**
       * <pre>
       *&#47; Satoshis received from this peer
       * </pre>
       *
       * <code>optional int64 sat_recv = 7;</code>
       */
      public Builder setSatRecv(long value) {
        copyOnWrite();
        instance.setSatRecv(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Satoshis received from this peer
       * </pre>
       *
       * <code>optional int64 sat_recv = 7;</code>
       */
      public Builder clearSatRecv() {
        copyOnWrite();
        instance.clearSatRecv();
        return this;
      }

      /**
       * <pre>
       *&#47; A channel is inbound if the counterparty initiated the channel
       * </pre>
       *
       * <code>optional bool inbound = 8;</code>
       */
      public boolean getInbound() {
        return instance.getInbound();
      }
      /**
       * <pre>
       *&#47; A channel is inbound if the counterparty initiated the channel
       * </pre>
       *
       * <code>optional bool inbound = 8;</code>
       */
      public Builder setInbound(boolean value) {
        copyOnWrite();
        instance.setInbound(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A channel is inbound if the counterparty initiated the channel
       * </pre>
       *
       * <code>optional bool inbound = 8;</code>
       */
      public Builder clearInbound() {
        copyOnWrite();
        instance.clearInbound();
        return this;
      }

      /**
       * <pre>
       *&#47; Ping time to this peer
       * </pre>
       *
       * <code>optional int64 ping_time = 9;</code>
       */
      public long getPingTime() {
        return instance.getPingTime();
      }
      /**
       * <pre>
       *&#47; Ping time to this peer
       * </pre>
       *
       * <code>optional int64 ping_time = 9;</code>
       */
      public Builder setPingTime(long value) {
        copyOnWrite();
        instance.setPingTime(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Ping time to this peer
       * </pre>
       *
       * <code>optional int64 ping_time = 9;</code>
       */
      public Builder clearPingTime() {
        copyOnWrite();
        instance.clearPingTime();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Peer)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Peer();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Peer other = (lnrpc.Rpc.Peer) arg1;
          pubKey_ = visitor.visitString(!pubKey_.isEmpty(), pubKey_,
              !other.pubKey_.isEmpty(), other.pubKey_);
          address_ = visitor.visitString(!address_.isEmpty(), address_,
              !other.address_.isEmpty(), other.address_);
          bytesSent_ = visitor.visitLong(bytesSent_ != 0L, bytesSent_,
              other.bytesSent_ != 0L, other.bytesSent_);
          bytesRecv_ = visitor.visitLong(bytesRecv_ != 0L, bytesRecv_,
              other.bytesRecv_ != 0L, other.bytesRecv_);
          satSent_ = visitor.visitLong(satSent_ != 0L, satSent_,
              other.satSent_ != 0L, other.satSent_);
          satRecv_ = visitor.visitLong(satRecv_ != 0L, satRecv_,
              other.satRecv_ != 0L, other.satRecv_);
          inbound_ = visitor.visitBoolean(inbound_ != false, inbound_,
              other.inbound_ != false, other.inbound_);
          pingTime_ = visitor.visitLong(pingTime_ != 0L, pingTime_,
              other.pingTime_ != 0L, other.pingTime_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  pubKey_ = s;
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  address_ = s;
                  break;
                }
                case 32: {

                  bytesSent_ = input.readUInt64();
                  break;
                }
                case 40: {

                  bytesRecv_ = input.readUInt64();
                  break;
                }
                case 48: {

                  satSent_ = input.readInt64();
                  break;
                }
                case 56: {

                  satRecv_ = input.readInt64();
                  break;
                }
                case 64: {

                  inbound_ = input.readBool();
                  break;
                }
                case 72: {

                  pingTime_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Peer.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Peer)
    private static final lnrpc.Rpc.Peer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Peer();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Peer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Peer> PARSER;

    public static com.google.protobuf.Parser<Peer> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListPeersRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListPeersRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.ListPeersRequest}
   */
  public  static final class ListPeersRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ListPeersRequest, ListPeersRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListPeersRequest)
      ListPeersRequestOrBuilder {
    private ListPeersRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListPeersRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPeersRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPeersRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListPeersRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListPeersRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListPeersRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListPeersRequest)
        lnrpc.Rpc.ListPeersRequestOrBuilder {
      // Construct using lnrpc.Rpc.ListPeersRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.ListPeersRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListPeersRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListPeersRequest other = (lnrpc.Rpc.ListPeersRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListPeersRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListPeersRequest)
    private static final lnrpc.Rpc.ListPeersRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListPeersRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListPeersRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListPeersRequest> PARSER;

    public static com.google.protobuf.Parser<ListPeersRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListPeersResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListPeersResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    java.util.List<lnrpc.Rpc.Peer> 
        getPeersList();
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    lnrpc.Rpc.Peer getPeers(int index);
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    int getPeersCount();
  }
  /**
   * Protobuf type {@code lnrpc.ListPeersResponse}
   */
  public  static final class ListPeersResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ListPeersResponse, ListPeersResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListPeersResponse)
      ListPeersResponseOrBuilder {
    private ListPeersResponse() {
      peers_ = emptyProtobufList();
    }
    public static final int PEERS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Peer> peers_;
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.Peer> getPeersList() {
      return peers_;
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.PeerOrBuilder> 
        getPeersOrBuilderList() {
      return peers_;
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    public int getPeersCount() {
      return peers_.size();
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    public lnrpc.Rpc.Peer getPeers(int index) {
      return peers_.get(index);
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    public lnrpc.Rpc.PeerOrBuilder getPeersOrBuilder(
        int index) {
      return peers_.get(index);
    }
    private void ensurePeersIsMutable() {
      if (!peers_.isModifiable()) {
        peers_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(peers_);
       }
    }

    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void setPeers(
        int index, lnrpc.Rpc.Peer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePeersIsMutable();
      peers_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void setPeers(
        int index, lnrpc.Rpc.Peer.Builder builderForValue) {
      ensurePeersIsMutable();
      peers_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void addPeers(lnrpc.Rpc.Peer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePeersIsMutable();
      peers_.add(value);
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void addPeers(
        int index, lnrpc.Rpc.Peer value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePeersIsMutable();
      peers_.add(index, value);
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void addPeers(
        lnrpc.Rpc.Peer.Builder builderForValue) {
      ensurePeersIsMutable();
      peers_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void addPeers(
        int index, lnrpc.Rpc.Peer.Builder builderForValue) {
      ensurePeersIsMutable();
      peers_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void addAllPeers(
        java.lang.Iterable<? extends lnrpc.Rpc.Peer> values) {
      ensurePeersIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, peers_);
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void clearPeers() {
      peers_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The list of currently connected peers
     * </pre>
     *
     * <code>repeated .lnrpc.Peer peers = 1;</code>
     */
    private void removePeers(int index) {
      ensurePeersIsMutable();
      peers_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < peers_.size(); i++) {
        output.writeMessage(1, peers_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < peers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, peers_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListPeersResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPeersResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPeersResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListPeersResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListPeersResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListPeersResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListPeersResponse)
        lnrpc.Rpc.ListPeersResponseOrBuilder {
      // Construct using lnrpc.Rpc.ListPeersResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.Peer> getPeersList() {
        return java.util.Collections.unmodifiableList(
            instance.getPeersList());
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public int getPeersCount() {
        return instance.getPeersCount();
      }/**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public lnrpc.Rpc.Peer getPeers(int index) {
        return instance.getPeers(index);
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder setPeers(
          int index, lnrpc.Rpc.Peer value) {
        copyOnWrite();
        instance.setPeers(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder setPeers(
          int index, lnrpc.Rpc.Peer.Builder builderForValue) {
        copyOnWrite();
        instance.setPeers(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder addPeers(lnrpc.Rpc.Peer value) {
        copyOnWrite();
        instance.addPeers(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder addPeers(
          int index, lnrpc.Rpc.Peer value) {
        copyOnWrite();
        instance.addPeers(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder addPeers(
          lnrpc.Rpc.Peer.Builder builderForValue) {
        copyOnWrite();
        instance.addPeers(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder addPeers(
          int index, lnrpc.Rpc.Peer.Builder builderForValue) {
        copyOnWrite();
        instance.addPeers(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder addAllPeers(
          java.lang.Iterable<? extends lnrpc.Rpc.Peer> values) {
        copyOnWrite();
        instance.addAllPeers(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder clearPeers() {
        copyOnWrite();
        instance.clearPeers();
        return this;
      }
      /**
       * <pre>
       *&#47; The list of currently connected peers
       * </pre>
       *
       * <code>repeated .lnrpc.Peer peers = 1;</code>
       */
      public Builder removePeers(int index) {
        copyOnWrite();
        instance.removePeers(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListPeersResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListPeersResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          peers_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListPeersResponse other = (lnrpc.Rpc.ListPeersResponse) arg1;
          peers_= visitor.visitList(peers_, other.peers_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!peers_.isModifiable()) {
                    peers_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(peers_);
                  }
                  peers_.add(
                      input.readMessage(lnrpc.Rpc.Peer.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListPeersResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListPeersResponse)
    private static final lnrpc.Rpc.ListPeersResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListPeersResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListPeersResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListPeersResponse> PARSER;

    public static com.google.protobuf.Parser<ListPeersResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GetInfoRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GetInfoRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.GetInfoRequest}
   */
  public  static final class GetInfoRequest extends
      com.google.protobuf.GeneratedMessageLite<
          GetInfoRequest, GetInfoRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GetInfoRequest)
      GetInfoRequestOrBuilder {
    private GetInfoRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GetInfoRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetInfoRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GetInfoRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GetInfoRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GetInfoRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GetInfoRequest)
        lnrpc.Rpc.GetInfoRequestOrBuilder {
      // Construct using lnrpc.Rpc.GetInfoRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.GetInfoRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GetInfoRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GetInfoRequest other = (lnrpc.Rpc.GetInfoRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GetInfoRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GetInfoRequest)
    private static final lnrpc.Rpc.GetInfoRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GetInfoRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GetInfoRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GetInfoRequest> PARSER;

    public static com.google.protobuf.Parser<GetInfoRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GetInfoResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GetInfoResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    java.lang.String getIdentityPubkey();
    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdentityPubkeyBytes();

    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    java.lang.String getAlias();
    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    com.google.protobuf.ByteString
        getAliasBytes();

    /**
     * <pre>
     *&#47; Number of pending channels
     * </pre>
     *
     * <code>optional uint32 num_pending_channels = 3;</code>
     */
    int getNumPendingChannels();

    /**
     * <pre>
     *&#47; Number of active channels
     * </pre>
     *
     * <code>optional uint32 num_active_channels = 4;</code>
     */
    int getNumActiveChannels();

    /**
     * <pre>
     *&#47; Number of peers
     * </pre>
     *
     * <code>optional uint32 num_peers = 5;</code>
     */
    int getNumPeers();

    /**
     * <pre>
     *&#47; The node's current view of the height of the best block
     * </pre>
     *
     * <code>optional uint32 block_height = 6;</code>
     */
    int getBlockHeight();

    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    java.lang.String getBlockHash();
    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    com.google.protobuf.ByteString
        getBlockHashBytes();

    /**
     * <pre>
     *&#47; Whether the wallet's view is synced to the main chain
     * </pre>
     *
     * <code>optional bool synced_to_chain = 9;</code>
     */
    boolean getSyncedToChain();

    /**
     * <pre>
     ** 
     *Whether the current node is connected to testnet. This field is 
     *deprecated and the network field should be used instead 
     * </pre>
     *
     * <code>optional bool testnet = 10 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean getTestnet();

    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    java.util.List<String>
        getUrisList();
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    int getUrisCount();
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    java.lang.String getUris(int index);
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    com.google.protobuf.ByteString
        getUrisBytes(int index);

    /**
     * <pre>
     *&#47; Timestamp of the block best known to the wallet
     * </pre>
     *
     * <code>optional int64 best_header_timestamp = 13;</code>
     */
    long getBestHeaderTimestamp();

    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    java.lang.String getVersion();
    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    com.google.protobuf.ByteString
        getVersionBytes();

    /**
     * <pre>
     *&#47; Number of inactive channels
     * </pre>
     *
     * <code>optional uint32 num_inactive_channels = 15;</code>
     */
    int getNumInactiveChannels();

    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    java.util.List<lnrpc.Rpc.Chain> 
        getChainsList();
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    lnrpc.Rpc.Chain getChains(int index);
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    int getChainsCount();
  }
  /**
   * Protobuf type {@code lnrpc.GetInfoResponse}
   */
  public  static final class GetInfoResponse extends
      com.google.protobuf.GeneratedMessageLite<
          GetInfoResponse, GetInfoResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GetInfoResponse)
      GetInfoResponseOrBuilder {
    private GetInfoResponse() {
      identityPubkey_ = "";
      alias_ = "";
      blockHash_ = "";
      uris_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      version_ = "";
      chains_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int IDENTITY_PUBKEY_FIELD_NUMBER = 1;
    private java.lang.String identityPubkey_;
    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    public java.lang.String getIdentityPubkey() {
      return identityPubkey_;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdentityPubkeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(identityPubkey_);
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    private void setIdentityPubkey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      identityPubkey_ = value;
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    private void clearIdentityPubkey() {
      
      identityPubkey_ = getDefaultInstance().getIdentityPubkey();
    }
    /**
     * <pre>
     *&#47; The identity pubkey of the current node.
     * </pre>
     *
     * <code>optional string identity_pubkey = 1;</code>
     */
    private void setIdentityPubkeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      identityPubkey_ = value.toStringUtf8();
    }

    public static final int ALIAS_FIELD_NUMBER = 2;
    private java.lang.String alias_;
    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    public java.lang.String getAlias() {
      return alias_;
    }
    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAliasBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(alias_);
    }
    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    private void setAlias(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      alias_ = value;
    }
    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    private void clearAlias() {
      
      alias_ = getDefaultInstance().getAlias();
    }
    /**
     * <pre>
     *&#47; If applicable, the alias of the current node, e.g. "bob"
     * </pre>
     *
     * <code>optional string alias = 2;</code>
     */
    private void setAliasBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      alias_ = value.toStringUtf8();
    }

    public static final int NUM_PENDING_CHANNELS_FIELD_NUMBER = 3;
    private int numPendingChannels_;
    /**
     * <pre>
     *&#47; Number of pending channels
     * </pre>
     *
     * <code>optional uint32 num_pending_channels = 3;</code>
     */
    public int getNumPendingChannels() {
      return numPendingChannels_;
    }
    /**
     * <pre>
     *&#47; Number of pending channels
     * </pre>
     *
     * <code>optional uint32 num_pending_channels = 3;</code>
     */
    private void setNumPendingChannels(int value) {
      
      numPendingChannels_ = value;
    }
    /**
     * <pre>
     *&#47; Number of pending channels
     * </pre>
     *
     * <code>optional uint32 num_pending_channels = 3;</code>
     */
    private void clearNumPendingChannels() {
      
      numPendingChannels_ = 0;
    }

    public static final int NUM_ACTIVE_CHANNELS_FIELD_NUMBER = 4;
    private int numActiveChannels_;
    /**
     * <pre>
     *&#47; Number of active channels
     * </pre>
     *
     * <code>optional uint32 num_active_channels = 4;</code>
     */
    public int getNumActiveChannels() {
      return numActiveChannels_;
    }
    /**
     * <pre>
     *&#47; Number of active channels
     * </pre>
     *
     * <code>optional uint32 num_active_channels = 4;</code>
     */
    private void setNumActiveChannels(int value) {
      
      numActiveChannels_ = value;
    }
    /**
     * <pre>
     *&#47; Number of active channels
     * </pre>
     *
     * <code>optional uint32 num_active_channels = 4;</code>
     */
    private void clearNumActiveChannels() {
      
      numActiveChannels_ = 0;
    }

    public static final int NUM_PEERS_FIELD_NUMBER = 5;
    private int numPeers_;
    /**
     * <pre>
     *&#47; Number of peers
     * </pre>
     *
     * <code>optional uint32 num_peers = 5;</code>
     */
    public int getNumPeers() {
      return numPeers_;
    }
    /**
     * <pre>
     *&#47; Number of peers
     * </pre>
     *
     * <code>optional uint32 num_peers = 5;</code>
     */
    private void setNumPeers(int value) {
      
      numPeers_ = value;
    }
    /**
     * <pre>
     *&#47; Number of peers
     * </pre>
     *
     * <code>optional uint32 num_peers = 5;</code>
     */
    private void clearNumPeers() {
      
      numPeers_ = 0;
    }

    public static final int BLOCK_HEIGHT_FIELD_NUMBER = 6;
    private int blockHeight_;
    /**
     * <pre>
     *&#47; The node's current view of the height of the best block
     * </pre>
     *
     * <code>optional uint32 block_height = 6;</code>
     */
    public int getBlockHeight() {
      return blockHeight_;
    }
    /**
     * <pre>
     *&#47; The node's current view of the height of the best block
     * </pre>
     *
     * <code>optional uint32 block_height = 6;</code>
     */
    private void setBlockHeight(int value) {
      
      blockHeight_ = value;
    }
    /**
     * <pre>
     *&#47; The node's current view of the height of the best block
     * </pre>
     *
     * <code>optional uint32 block_height = 6;</code>
     */
    private void clearBlockHeight() {
      
      blockHeight_ = 0;
    }

    public static final int BLOCK_HASH_FIELD_NUMBER = 8;
    private java.lang.String blockHash_;
    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    public java.lang.String getBlockHash() {
      return blockHash_;
    }
    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    public com.google.protobuf.ByteString
        getBlockHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(blockHash_);
    }
    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    private void setBlockHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      blockHash_ = value;
    }
    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    private void clearBlockHash() {
      
      blockHash_ = getDefaultInstance().getBlockHash();
    }
    /**
     * <pre>
     *&#47; The node's current view of the hash of the best block
     * </pre>
     *
     * <code>optional string block_hash = 8;</code>
     */
    private void setBlockHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      blockHash_ = value.toStringUtf8();
    }

    public static final int SYNCED_TO_CHAIN_FIELD_NUMBER = 9;
    private boolean syncedToChain_;
    /**
     * <pre>
     *&#47; Whether the wallet's view is synced to the main chain
     * </pre>
     *
     * <code>optional bool synced_to_chain = 9;</code>
     */
    public boolean getSyncedToChain() {
      return syncedToChain_;
    }
    /**
     * <pre>
     *&#47; Whether the wallet's view is synced to the main chain
     * </pre>
     *
     * <code>optional bool synced_to_chain = 9;</code>
     */
    private void setSyncedToChain(boolean value) {
      
      syncedToChain_ = value;
    }
    /**
     * <pre>
     *&#47; Whether the wallet's view is synced to the main chain
     * </pre>
     *
     * <code>optional bool synced_to_chain = 9;</code>
     */
    private void clearSyncedToChain() {
      
      syncedToChain_ = false;
    }

    public static final int TESTNET_FIELD_NUMBER = 10;
    private boolean testnet_;
    /**
     * <pre>
     ** 
     *Whether the current node is connected to testnet. This field is 
     *deprecated and the network field should be used instead 
     * </pre>
     *
     * <code>optional bool testnet = 10 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getTestnet() {
      return testnet_;
    }
    /**
     * <pre>
     ** 
     *Whether the current node is connected to testnet. This field is 
     *deprecated and the network field should be used instead 
     * </pre>
     *
     * <code>optional bool testnet = 10 [deprecated = true];</code>
     */
    private void setTestnet(boolean value) {
      
      testnet_ = value;
    }
    /**
     * <pre>
     ** 
     *Whether the current node is connected to testnet. This field is 
     *deprecated and the network field should be used instead 
     * </pre>
     *
     * <code>optional bool testnet = 10 [deprecated = true];</code>
     */
    private void clearTestnet() {
      
      testnet_ = false;
    }

    public static final int URIS_FIELD_NUMBER = 12;
    private com.google.protobuf.Internal.ProtobufList<String> uris_;
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    public java.util.List<String> getUrisList() {
      return uris_;
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    public int getUrisCount() {
      return uris_.size();
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    public java.lang.String getUris(int index) {
      return uris_.get(index);
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    public com.google.protobuf.ByteString
        getUrisBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          uris_.get(index));
    }
    private void ensureUrisIsMutable() {
      if (!uris_.isModifiable()) {
        uris_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(uris_);
       }
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    private void setUris(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUrisIsMutable();
      uris_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    private void addUris(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureUrisIsMutable();
      uris_.add(value);
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    private void addAllUris(
        java.lang.Iterable<java.lang.String> values) {
      ensureUrisIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, uris_);
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    private void clearUris() {
      uris_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The URIs of the current node.
     * </pre>
     *
     * <code>repeated string uris = 12;</code>
     */
    private void addUrisBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureUrisIsMutable();
      uris_.add(value.toStringUtf8());
    }

    public static final int BEST_HEADER_TIMESTAMP_FIELD_NUMBER = 13;
    private long bestHeaderTimestamp_;
    /**
     * <pre>
     *&#47; Timestamp of the block best known to the wallet
     * </pre>
     *
     * <code>optional int64 best_header_timestamp = 13;</code>
     */
    public long getBestHeaderTimestamp() {
      return bestHeaderTimestamp_;
    }
    /**
     * <pre>
     *&#47; Timestamp of the block best known to the wallet
     * </pre>
     *
     * <code>optional int64 best_header_timestamp = 13;</code>
     */
    private void setBestHeaderTimestamp(long value) {
      
      bestHeaderTimestamp_ = value;
    }
    /**
     * <pre>
     *&#47; Timestamp of the block best known to the wallet
     * </pre>
     *
     * <code>optional int64 best_header_timestamp = 13;</code>
     */
    private void clearBestHeaderTimestamp() {
      
      bestHeaderTimestamp_ = 0L;
    }

    public static final int VERSION_FIELD_NUMBER = 14;
    private java.lang.String version_;
    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    public java.lang.String getVersion() {
      return version_;
    }
    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    public com.google.protobuf.ByteString
        getVersionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(version_);
    }
    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    private void setVersion(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      version_ = value;
    }
    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    private void clearVersion() {
      
      version_ = getDefaultInstance().getVersion();
    }
    /**
     * <pre>
     *&#47; The version of the LND software that the node is running.
     * </pre>
     *
     * <code>optional string version = 14;</code>
     */
    private void setVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      version_ = value.toStringUtf8();
    }

    public static final int NUM_INACTIVE_CHANNELS_FIELD_NUMBER = 15;
    private int numInactiveChannels_;
    /**
     * <pre>
     *&#47; Number of inactive channels
     * </pre>
     *
     * <code>optional uint32 num_inactive_channels = 15;</code>
     */
    public int getNumInactiveChannels() {
      return numInactiveChannels_;
    }
    /**
     * <pre>
     *&#47; Number of inactive channels
     * </pre>
     *
     * <code>optional uint32 num_inactive_channels = 15;</code>
     */
    private void setNumInactiveChannels(int value) {
      
      numInactiveChannels_ = value;
    }
    /**
     * <pre>
     *&#47; Number of inactive channels
     * </pre>
     *
     * <code>optional uint32 num_inactive_channels = 15;</code>
     */
    private void clearNumInactiveChannels() {
      
      numInactiveChannels_ = 0;
    }

    public static final int CHAINS_FIELD_NUMBER = 16;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Chain> chains_;
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    public java.util.List<lnrpc.Rpc.Chain> getChainsList() {
      return chains_;
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ChainOrBuilder> 
        getChainsOrBuilderList() {
      return chains_;
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    public int getChainsCount() {
      return chains_.size();
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    public lnrpc.Rpc.Chain getChains(int index) {
      return chains_.get(index);
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    public lnrpc.Rpc.ChainOrBuilder getChainsOrBuilder(
        int index) {
      return chains_.get(index);
    }
    private void ensureChainsIsMutable() {
      if (!chains_.isModifiable()) {
        chains_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(chains_);
       }
    }

    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void setChains(
        int index, lnrpc.Rpc.Chain value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChainsIsMutable();
      chains_.set(index, value);
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void setChains(
        int index, lnrpc.Rpc.Chain.Builder builderForValue) {
      ensureChainsIsMutable();
      chains_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void addChains(lnrpc.Rpc.Chain value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChainsIsMutable();
      chains_.add(value);
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void addChains(
        int index, lnrpc.Rpc.Chain value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChainsIsMutable();
      chains_.add(index, value);
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void addChains(
        lnrpc.Rpc.Chain.Builder builderForValue) {
      ensureChainsIsMutable();
      chains_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void addChains(
        int index, lnrpc.Rpc.Chain.Builder builderForValue) {
      ensureChainsIsMutable();
      chains_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void addAllChains(
        java.lang.Iterable<? extends lnrpc.Rpc.Chain> values) {
      ensureChainsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, chains_);
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void clearChains() {
      chains_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; A list of active chains the node is connected to
     * </pre>
     *
     * <code>repeated .lnrpc.Chain chains = 16;</code>
     */
    private void removeChains(int index) {
      ensureChainsIsMutable();
      chains_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!identityPubkey_.isEmpty()) {
        output.writeString(1, getIdentityPubkey());
      }
      if (!alias_.isEmpty()) {
        output.writeString(2, getAlias());
      }
      if (numPendingChannels_ != 0) {
        output.writeUInt32(3, numPendingChannels_);
      }
      if (numActiveChannels_ != 0) {
        output.writeUInt32(4, numActiveChannels_);
      }
      if (numPeers_ != 0) {
        output.writeUInt32(5, numPeers_);
      }
      if (blockHeight_ != 0) {
        output.writeUInt32(6, blockHeight_);
      }
      if (!blockHash_.isEmpty()) {
        output.writeString(8, getBlockHash());
      }
      if (syncedToChain_ != false) {
        output.writeBool(9, syncedToChain_);
      }
      if (testnet_ != false) {
        output.writeBool(10, testnet_);
      }
      for (int i = 0; i < uris_.size(); i++) {
        output.writeString(12, uris_.get(i));
      }
      if (bestHeaderTimestamp_ != 0L) {
        output.writeInt64(13, bestHeaderTimestamp_);
      }
      if (!version_.isEmpty()) {
        output.writeString(14, getVersion());
      }
      if (numInactiveChannels_ != 0) {
        output.writeUInt32(15, numInactiveChannels_);
      }
      for (int i = 0; i < chains_.size(); i++) {
        output.writeMessage(16, chains_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!identityPubkey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getIdentityPubkey());
      }
      if (!alias_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getAlias());
      }
      if (numPendingChannels_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, numPendingChannels_);
      }
      if (numActiveChannels_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, numActiveChannels_);
      }
      if (numPeers_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, numPeers_);
      }
      if (blockHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, blockHeight_);
      }
      if (!blockHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getBlockHash());
      }
      if (syncedToChain_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, syncedToChain_);
      }
      if (testnet_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, testnet_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < uris_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(uris_.get(i));
        }
        size += dataSize;
        size += 1 * getUrisList().size();
      }
      if (bestHeaderTimestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, bestHeaderTimestamp_);
      }
      if (!version_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(14, getVersion());
      }
      if (numInactiveChannels_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, numInactiveChannels_);
      }
      for (int i = 0; i < chains_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, chains_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GetInfoResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetInfoResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GetInfoResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GetInfoResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GetInfoResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GetInfoResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GetInfoResponse)
        lnrpc.Rpc.GetInfoResponseOrBuilder {
      // Construct using lnrpc.Rpc.GetInfoResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The identity pubkey of the current node.
       * </pre>
       *
       * <code>optional string identity_pubkey = 1;</code>
       */
      public java.lang.String getIdentityPubkey() {
        return instance.getIdentityPubkey();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the current node.
       * </pre>
       *
       * <code>optional string identity_pubkey = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdentityPubkeyBytes() {
        return instance.getIdentityPubkeyBytes();
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the current node.
       * </pre>
       *
       * <code>optional string identity_pubkey = 1;</code>
       */
      public Builder setIdentityPubkey(
          java.lang.String value) {
        copyOnWrite();
        instance.setIdentityPubkey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the current node.
       * </pre>
       *
       * <code>optional string identity_pubkey = 1;</code>
       */
      public Builder clearIdentityPubkey() {
        copyOnWrite();
        instance.clearIdentityPubkey();
        return this;
      }
      /**
       * <pre>
       *&#47; The identity pubkey of the current node.
       * </pre>
       *
       * <code>optional string identity_pubkey = 1;</code>
       */
      public Builder setIdentityPubkeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdentityPubkeyBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; If applicable, the alias of the current node, e.g. "bob"
       * </pre>
       *
       * <code>optional string alias = 2;</code>
       */
      public java.lang.String getAlias() {
        return instance.getAlias();
      }
      /**
       * <pre>
       *&#47; If applicable, the alias of the current node, e.g. "bob"
       * </pre>
       *
       * <code>optional string alias = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAliasBytes() {
        return instance.getAliasBytes();
      }
      /**
       * <pre>
       *&#47; If applicable, the alias of the current node, e.g. "bob"
       * </pre>
       *
       * <code>optional string alias = 2;</code>
       */
      public Builder setAlias(
          java.lang.String value) {
        copyOnWrite();
        instance.setAlias(value);
        return this;
      }
      /**
       * <pre>
       *&#47; If applicable, the alias of the current node, e.g. "bob"
       * </pre>
       *
       * <code>optional string alias = 2;</code>
       */
      public Builder clearAlias() {
        copyOnWrite();
        instance.clearAlias();
        return this;
      }
      /**
       * <pre>
       *&#47; If applicable, the alias of the current node, e.g. "bob"
       * </pre>
       *
       * <code>optional string alias = 2;</code>
       */
      public Builder setAliasBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAliasBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Number of pending channels
       * </pre>
       *
       * <code>optional uint32 num_pending_channels = 3;</code>
       */
      public int getNumPendingChannels() {
        return instance.getNumPendingChannels();
      }
      /**
       * <pre>
       *&#47; Number of pending channels
       * </pre>
       *
       * <code>optional uint32 num_pending_channels = 3;</code>
       */
      public Builder setNumPendingChannels(int value) {
        copyOnWrite();
        instance.setNumPendingChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Number of pending channels
       * </pre>
       *
       * <code>optional uint32 num_pending_channels = 3;</code>
       */
      public Builder clearNumPendingChannels() {
        copyOnWrite();
        instance.clearNumPendingChannels();
        return this;
      }

      /**
       * <pre>
       *&#47; Number of active channels
       * </pre>
       *
       * <code>optional uint32 num_active_channels = 4;</code>
       */
      public int getNumActiveChannels() {
        return instance.getNumActiveChannels();
      }
      /**
       * <pre>
       *&#47; Number of active channels
       * </pre>
       *
       * <code>optional uint32 num_active_channels = 4;</code>
       */
      public Builder setNumActiveChannels(int value) {
        copyOnWrite();
        instance.setNumActiveChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Number of active channels
       * </pre>
       *
       * <code>optional uint32 num_active_channels = 4;</code>
       */
      public Builder clearNumActiveChannels() {
        copyOnWrite();
        instance.clearNumActiveChannels();
        return this;
      }

      /**
       * <pre>
       *&#47; Number of peers
       * </pre>
       *
       * <code>optional uint32 num_peers = 5;</code>
       */
      public int getNumPeers() {
        return instance.getNumPeers();
      }
      /**
       * <pre>
       *&#47; Number of peers
       * </pre>
       *
       * <code>optional uint32 num_peers = 5;</code>
       */
      public Builder setNumPeers(int value) {
        copyOnWrite();
        instance.setNumPeers(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Number of peers
       * </pre>
       *
       * <code>optional uint32 num_peers = 5;</code>
       */
      public Builder clearNumPeers() {
        copyOnWrite();
        instance.clearNumPeers();
        return this;
      }

      /**
       * <pre>
       *&#47; The node's current view of the height of the best block
       * </pre>
       *
       * <code>optional uint32 block_height = 6;</code>
       */
      public int getBlockHeight() {
        return instance.getBlockHeight();
      }
      /**
       * <pre>
       *&#47; The node's current view of the height of the best block
       * </pre>
       *
       * <code>optional uint32 block_height = 6;</code>
       */
      public Builder setBlockHeight(int value) {
        copyOnWrite();
        instance.setBlockHeight(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The node's current view of the height of the best block
       * </pre>
       *
       * <code>optional uint32 block_height = 6;</code>
       */
      public Builder clearBlockHeight() {
        copyOnWrite();
        instance.clearBlockHeight();
        return this;
      }

      /**
       * <pre>
       *&#47; The node's current view of the hash of the best block
       * </pre>
       *
       * <code>optional string block_hash = 8;</code>
       */
      public java.lang.String getBlockHash() {
        return instance.getBlockHash();
      }
      /**
       * <pre>
       *&#47; The node's current view of the hash of the best block
       * </pre>
       *
       * <code>optional string block_hash = 8;</code>
       */
      public com.google.protobuf.ByteString
          getBlockHashBytes() {
        return instance.getBlockHashBytes();
      }
      /**
       * <pre>
       *&#47; The node's current view of the hash of the best block
       * </pre>
       *
       * <code>optional string block_hash = 8;</code>
       */
      public Builder setBlockHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setBlockHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The node's current view of the hash of the best block
       * </pre>
       *
       * <code>optional string block_hash = 8;</code>
       */
      public Builder clearBlockHash() {
        copyOnWrite();
        instance.clearBlockHash();
        return this;
      }
      /**
       * <pre>
       *&#47; The node's current view of the hash of the best block
       * </pre>
       *
       * <code>optional string block_hash = 8;</code>
       */
      public Builder setBlockHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBlockHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Whether the wallet's view is synced to the main chain
       * </pre>
       *
       * <code>optional bool synced_to_chain = 9;</code>
       */
      public boolean getSyncedToChain() {
        return instance.getSyncedToChain();
      }
      /**
       * <pre>
       *&#47; Whether the wallet's view is synced to the main chain
       * </pre>
       *
       * <code>optional bool synced_to_chain = 9;</code>
       */
      public Builder setSyncedToChain(boolean value) {
        copyOnWrite();
        instance.setSyncedToChain(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether the wallet's view is synced to the main chain
       * </pre>
       *
       * <code>optional bool synced_to_chain = 9;</code>
       */
      public Builder clearSyncedToChain() {
        copyOnWrite();
        instance.clearSyncedToChain();
        return this;
      }

      /**
       * <pre>
       ** 
       *Whether the current node is connected to testnet. This field is 
       *deprecated and the network field should be used instead 
       * </pre>
       *
       * <code>optional bool testnet = 10 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean getTestnet() {
        return instance.getTestnet();
      }
      /**
       * <pre>
       ** 
       *Whether the current node is connected to testnet. This field is 
       *deprecated and the network field should be used instead 
       * </pre>
       *
       * <code>optional bool testnet = 10 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setTestnet(boolean value) {
        copyOnWrite();
        instance.setTestnet(value);
        return this;
      }
      /**
       * <pre>
       ** 
       *Whether the current node is connected to testnet. This field is 
       *deprecated and the network field should be used instead 
       * </pre>
       *
       * <code>optional bool testnet = 10 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearTestnet() {
        copyOnWrite();
        instance.clearTestnet();
        return this;
      }

      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public java.util.List<String>
          getUrisList() {
        return java.util.Collections.unmodifiableList(
            instance.getUrisList());
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public int getUrisCount() {
        return instance.getUrisCount();
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public java.lang.String getUris(int index) {
        return instance.getUris(index);
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public com.google.protobuf.ByteString
          getUrisBytes(int index) {
        return instance.getUrisBytes(index);
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public Builder setUris(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setUris(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public Builder addUris(
          java.lang.String value) {
        copyOnWrite();
        instance.addUris(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public Builder addAllUris(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllUris(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public Builder clearUris() {
        copyOnWrite();
        instance.clearUris();
        return this;
      }
      /**
       * <pre>
       *&#47; The URIs of the current node.
       * </pre>
       *
       * <code>repeated string uris = 12;</code>
       */
      public Builder addUrisBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addUrisBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Timestamp of the block best known to the wallet
       * </pre>
       *
       * <code>optional int64 best_header_timestamp = 13;</code>
       */
      public long getBestHeaderTimestamp() {
        return instance.getBestHeaderTimestamp();
      }
      /**
       * <pre>
       *&#47; Timestamp of the block best known to the wallet
       * </pre>
       *
       * <code>optional int64 best_header_timestamp = 13;</code>
       */
      public Builder setBestHeaderTimestamp(long value) {
        copyOnWrite();
        instance.setBestHeaderTimestamp(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Timestamp of the block best known to the wallet
       * </pre>
       *
       * <code>optional int64 best_header_timestamp = 13;</code>
       */
      public Builder clearBestHeaderTimestamp() {
        copyOnWrite();
        instance.clearBestHeaderTimestamp();
        return this;
      }

      /**
       * <pre>
       *&#47; The version of the LND software that the node is running.
       * </pre>
       *
       * <code>optional string version = 14;</code>
       */
      public java.lang.String getVersion() {
        return instance.getVersion();
      }
      /**
       * <pre>
       *&#47; The version of the LND software that the node is running.
       * </pre>
       *
       * <code>optional string version = 14;</code>
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        return instance.getVersionBytes();
      }
      /**
       * <pre>
       *&#47; The version of the LND software that the node is running.
       * </pre>
       *
       * <code>optional string version = 14;</code>
       */
      public Builder setVersion(
          java.lang.String value) {
        copyOnWrite();
        instance.setVersion(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The version of the LND software that the node is running.
       * </pre>
       *
       * <code>optional string version = 14;</code>
       */
      public Builder clearVersion() {
        copyOnWrite();
        instance.clearVersion();
        return this;
      }
      /**
       * <pre>
       *&#47; The version of the LND software that the node is running.
       * </pre>
       *
       * <code>optional string version = 14;</code>
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setVersionBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Number of inactive channels
       * </pre>
       *
       * <code>optional uint32 num_inactive_channels = 15;</code>
       */
      public int getNumInactiveChannels() {
        return instance.getNumInactiveChannels();
      }
      /**
       * <pre>
       *&#47; Number of inactive channels
       * </pre>
       *
       * <code>optional uint32 num_inactive_channels = 15;</code>
       */
      public Builder setNumInactiveChannels(int value) {
        copyOnWrite();
        instance.setNumInactiveChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Number of inactive channels
       * </pre>
       *
       * <code>optional uint32 num_inactive_channels = 15;</code>
       */
      public Builder clearNumInactiveChannels() {
        copyOnWrite();
        instance.clearNumInactiveChannels();
        return this;
      }

      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public java.util.List<lnrpc.Rpc.Chain> getChainsList() {
        return java.util.Collections.unmodifiableList(
            instance.getChainsList());
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public int getChainsCount() {
        return instance.getChainsCount();
      }/**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public lnrpc.Rpc.Chain getChains(int index) {
        return instance.getChains(index);
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder setChains(
          int index, lnrpc.Rpc.Chain value) {
        copyOnWrite();
        instance.setChains(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder setChains(
          int index, lnrpc.Rpc.Chain.Builder builderForValue) {
        copyOnWrite();
        instance.setChains(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder addChains(lnrpc.Rpc.Chain value) {
        copyOnWrite();
        instance.addChains(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder addChains(
          int index, lnrpc.Rpc.Chain value) {
        copyOnWrite();
        instance.addChains(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder addChains(
          lnrpc.Rpc.Chain.Builder builderForValue) {
        copyOnWrite();
        instance.addChains(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder addChains(
          int index, lnrpc.Rpc.Chain.Builder builderForValue) {
        copyOnWrite();
        instance.addChains(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder addAllChains(
          java.lang.Iterable<? extends lnrpc.Rpc.Chain> values) {
        copyOnWrite();
        instance.addAllChains(values);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder clearChains() {
        copyOnWrite();
        instance.clearChains();
        return this;
      }
      /**
       * <pre>
       *&#47; A list of active chains the node is connected to
       * </pre>
       *
       * <code>repeated .lnrpc.Chain chains = 16;</code>
       */
      public Builder removeChains(int index) {
        copyOnWrite();
        instance.removeChains(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.GetInfoResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GetInfoResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          uris_.makeImmutable();
          chains_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GetInfoResponse other = (lnrpc.Rpc.GetInfoResponse) arg1;
          identityPubkey_ = visitor.visitString(!identityPubkey_.isEmpty(), identityPubkey_,
              !other.identityPubkey_.isEmpty(), other.identityPubkey_);
          alias_ = visitor.visitString(!alias_.isEmpty(), alias_,
              !other.alias_.isEmpty(), other.alias_);
          numPendingChannels_ = visitor.visitInt(numPendingChannels_ != 0, numPendingChannels_,
              other.numPendingChannels_ != 0, other.numPendingChannels_);
          numActiveChannels_ = visitor.visitInt(numActiveChannels_ != 0, numActiveChannels_,
              other.numActiveChannels_ != 0, other.numActiveChannels_);
          numPeers_ = visitor.visitInt(numPeers_ != 0, numPeers_,
              other.numPeers_ != 0, other.numPeers_);
          blockHeight_ = visitor.visitInt(blockHeight_ != 0, blockHeight_,
              other.blockHeight_ != 0, other.blockHeight_);
          blockHash_ = visitor.visitString(!blockHash_.isEmpty(), blockHash_,
              !other.blockHash_.isEmpty(), other.blockHash_);
          syncedToChain_ = visitor.visitBoolean(syncedToChain_ != false, syncedToChain_,
              other.syncedToChain_ != false, other.syncedToChain_);
          testnet_ = visitor.visitBoolean(testnet_ != false, testnet_,
              other.testnet_ != false, other.testnet_);
          uris_= visitor.visitList(uris_, other.uris_);
          bestHeaderTimestamp_ = visitor.visitLong(bestHeaderTimestamp_ != 0L, bestHeaderTimestamp_,
              other.bestHeaderTimestamp_ != 0L, other.bestHeaderTimestamp_);
          version_ = visitor.visitString(!version_.isEmpty(), version_,
              !other.version_.isEmpty(), other.version_);
          numInactiveChannels_ = visitor.visitInt(numInactiveChannels_ != 0, numInactiveChannels_,
              other.numInactiveChannels_ != 0, other.numInactiveChannels_);
          chains_= visitor.visitList(chains_, other.chains_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  identityPubkey_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  alias_ = s;
                  break;
                }
                case 24: {

                  numPendingChannels_ = input.readUInt32();
                  break;
                }
                case 32: {

                  numActiveChannels_ = input.readUInt32();
                  break;
                }
                case 40: {

                  numPeers_ = input.readUInt32();
                  break;
                }
                case 48: {

                  blockHeight_ = input.readUInt32();
                  break;
                }
                case 66: {
                  String s = input.readStringRequireUtf8();

                  blockHash_ = s;
                  break;
                }
                case 72: {

                  syncedToChain_ = input.readBool();
                  break;
                }
                case 80: {

                  testnet_ = input.readBool();
                  break;
                }
                case 98: {
                  String s = input.readStringRequireUtf8();
                  if (!uris_.isModifiable()) {
                    uris_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(uris_);
                  }
                  uris_.add(s);
                  break;
                }
                case 104: {

                  bestHeaderTimestamp_ = input.readInt64();
                  break;
                }
                case 114: {
                  String s = input.readStringRequireUtf8();

                  version_ = s;
                  break;
                }
                case 120: {

                  numInactiveChannels_ = input.readUInt32();
                  break;
                }
                case 130: {
                  if (!chains_.isModifiable()) {
                    chains_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(chains_);
                  }
                  chains_.add(
                      input.readMessage(lnrpc.Rpc.Chain.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GetInfoResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GetInfoResponse)
    private static final lnrpc.Rpc.GetInfoResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GetInfoResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GetInfoResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GetInfoResponse> PARSER;

    public static com.google.protobuf.Parser<GetInfoResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChainOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Chain)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    java.lang.String getChain();
    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    com.google.protobuf.ByteString
        getChainBytes();

    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    java.lang.String getNetwork();
    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    com.google.protobuf.ByteString
        getNetworkBytes();
  }
  /**
   * Protobuf type {@code lnrpc.Chain}
   */
  public  static final class Chain extends
      com.google.protobuf.GeneratedMessageLite<
          Chain, Chain.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Chain)
      ChainOrBuilder {
    private Chain() {
      chain_ = "";
      network_ = "";
    }
    public static final int CHAIN_FIELD_NUMBER = 1;
    private java.lang.String chain_;
    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    public java.lang.String getChain() {
      return chain_;
    }
    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    public com.google.protobuf.ByteString
        getChainBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(chain_);
    }
    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    private void setChain(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      chain_ = value;
    }
    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    private void clearChain() {
      
      chain_ = getDefaultInstance().getChain();
    }
    /**
     * <pre>
     *&#47; The blockchain the node is on (eg bitcoin, litecoin)
     * </pre>
     *
     * <code>optional string chain = 1;</code>
     */
    private void setChainBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      chain_ = value.toStringUtf8();
    }

    public static final int NETWORK_FIELD_NUMBER = 2;
    private java.lang.String network_;
    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    public java.lang.String getNetwork() {
      return network_;
    }
    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNetworkBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(network_);
    }
    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    private void setNetwork(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      network_ = value;
    }
    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    private void clearNetwork() {
      
      network_ = getDefaultInstance().getNetwork();
    }
    /**
     * <pre>
     *&#47; The network the node is on (eg regtest, testnet, mainnet)
     * </pre>
     *
     * <code>optional string network = 2;</code>
     */
    private void setNetworkBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      network_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!chain_.isEmpty()) {
        output.writeString(1, getChain());
      }
      if (!network_.isEmpty()) {
        output.writeString(2, getNetwork());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!chain_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getChain());
      }
      if (!network_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getNetwork());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Chain parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Chain parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Chain parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Chain parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Chain parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Chain parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Chain parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Chain parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Chain parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Chain parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Chain prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Chain}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Chain, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Chain)
        lnrpc.Rpc.ChainOrBuilder {
      // Construct using lnrpc.Rpc.Chain.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The blockchain the node is on (eg bitcoin, litecoin)
       * </pre>
       *
       * <code>optional string chain = 1;</code>
       */
      public java.lang.String getChain() {
        return instance.getChain();
      }
      /**
       * <pre>
       *&#47; The blockchain the node is on (eg bitcoin, litecoin)
       * </pre>
       *
       * <code>optional string chain = 1;</code>
       */
      public com.google.protobuf.ByteString
          getChainBytes() {
        return instance.getChainBytes();
      }
      /**
       * <pre>
       *&#47; The blockchain the node is on (eg bitcoin, litecoin)
       * </pre>
       *
       * <code>optional string chain = 1;</code>
       */
      public Builder setChain(
          java.lang.String value) {
        copyOnWrite();
        instance.setChain(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The blockchain the node is on (eg bitcoin, litecoin)
       * </pre>
       *
       * <code>optional string chain = 1;</code>
       */
      public Builder clearChain() {
        copyOnWrite();
        instance.clearChain();
        return this;
      }
      /**
       * <pre>
       *&#47; The blockchain the node is on (eg bitcoin, litecoin)
       * </pre>
       *
       * <code>optional string chain = 1;</code>
       */
      public Builder setChainBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChainBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The network the node is on (eg regtest, testnet, mainnet)
       * </pre>
       *
       * <code>optional string network = 2;</code>
       */
      public java.lang.String getNetwork() {
        return instance.getNetwork();
      }
      /**
       * <pre>
       *&#47; The network the node is on (eg regtest, testnet, mainnet)
       * </pre>
       *
       * <code>optional string network = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNetworkBytes() {
        return instance.getNetworkBytes();
      }
      /**
       * <pre>
       *&#47; The network the node is on (eg regtest, testnet, mainnet)
       * </pre>
       *
       * <code>optional string network = 2;</code>
       */
      public Builder setNetwork(
          java.lang.String value) {
        copyOnWrite();
        instance.setNetwork(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The network the node is on (eg regtest, testnet, mainnet)
       * </pre>
       *
       * <code>optional string network = 2;</code>
       */
      public Builder clearNetwork() {
        copyOnWrite();
        instance.clearNetwork();
        return this;
      }
      /**
       * <pre>
       *&#47; The network the node is on (eg regtest, testnet, mainnet)
       * </pre>
       *
       * <code>optional string network = 2;</code>
       */
      public Builder setNetworkBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNetworkBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Chain)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Chain();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Chain other = (lnrpc.Rpc.Chain) arg1;
          chain_ = visitor.visitString(!chain_.isEmpty(), chain_,
              !other.chain_.isEmpty(), other.chain_);
          network_ = visitor.visitString(!network_.isEmpty(), network_,
              !other.network_.isEmpty(), other.network_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  chain_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  network_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Chain.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Chain)
    private static final lnrpc.Rpc.Chain DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Chain();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Chain getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Chain> PARSER;

    public static com.google.protobuf.Parser<Chain> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ConfirmationUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ConfirmationUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bytes block_sha = 1;</code>
     */
    com.google.protobuf.ByteString getBlockSha();

    /**
     * <code>optional int32 block_height = 2;</code>
     */
    int getBlockHeight();

    /**
     * <code>optional uint32 num_confs_left = 3;</code>
     */
    int getNumConfsLeft();
  }
  /**
   * Protobuf type {@code lnrpc.ConfirmationUpdate}
   */
  public  static final class ConfirmationUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          ConfirmationUpdate, ConfirmationUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ConfirmationUpdate)
      ConfirmationUpdateOrBuilder {
    private ConfirmationUpdate() {
      blockSha_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int BLOCK_SHA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString blockSha_;
    /**
     * <code>optional bytes block_sha = 1;</code>
     */
    public com.google.protobuf.ByteString getBlockSha() {
      return blockSha_;
    }
    /**
     * <code>optional bytes block_sha = 1;</code>
     */
    private void setBlockSha(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      blockSha_ = value;
    }
    /**
     * <code>optional bytes block_sha = 1;</code>
     */
    private void clearBlockSha() {
      
      blockSha_ = getDefaultInstance().getBlockSha();
    }

    public static final int BLOCK_HEIGHT_FIELD_NUMBER = 2;
    private int blockHeight_;
    /**
     * <code>optional int32 block_height = 2;</code>
     */
    public int getBlockHeight() {
      return blockHeight_;
    }
    /**
     * <code>optional int32 block_height = 2;</code>
     */
    private void setBlockHeight(int value) {
      
      blockHeight_ = value;
    }
    /**
     * <code>optional int32 block_height = 2;</code>
     */
    private void clearBlockHeight() {
      
      blockHeight_ = 0;
    }

    public static final int NUM_CONFS_LEFT_FIELD_NUMBER = 3;
    private int numConfsLeft_;
    /**
     * <code>optional uint32 num_confs_left = 3;</code>
     */
    public int getNumConfsLeft() {
      return numConfsLeft_;
    }
    /**
     * <code>optional uint32 num_confs_left = 3;</code>
     */
    private void setNumConfsLeft(int value) {
      
      numConfsLeft_ = value;
    }
    /**
     * <code>optional uint32 num_confs_left = 3;</code>
     */
    private void clearNumConfsLeft() {
      
      numConfsLeft_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!blockSha_.isEmpty()) {
        output.writeBytes(1, blockSha_);
      }
      if (blockHeight_ != 0) {
        output.writeInt32(2, blockHeight_);
      }
      if (numConfsLeft_ != 0) {
        output.writeUInt32(3, numConfsLeft_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!blockSha_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, blockSha_);
      }
      if (blockHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, blockHeight_);
      }
      if (numConfsLeft_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, numConfsLeft_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ConfirmationUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ConfirmationUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ConfirmationUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ConfirmationUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ConfirmationUpdate)
        lnrpc.Rpc.ConfirmationUpdateOrBuilder {
      // Construct using lnrpc.Rpc.ConfirmationUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes block_sha = 1;</code>
       */
      public com.google.protobuf.ByteString getBlockSha() {
        return instance.getBlockSha();
      }
      /**
       * <code>optional bytes block_sha = 1;</code>
       */
      public Builder setBlockSha(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBlockSha(value);
        return this;
      }
      /**
       * <code>optional bytes block_sha = 1;</code>
       */
      public Builder clearBlockSha() {
        copyOnWrite();
        instance.clearBlockSha();
        return this;
      }

      /**
       * <code>optional int32 block_height = 2;</code>
       */
      public int getBlockHeight() {
        return instance.getBlockHeight();
      }
      /**
       * <code>optional int32 block_height = 2;</code>
       */
      public Builder setBlockHeight(int value) {
        copyOnWrite();
        instance.setBlockHeight(value);
        return this;
      }
      /**
       * <code>optional int32 block_height = 2;</code>
       */
      public Builder clearBlockHeight() {
        copyOnWrite();
        instance.clearBlockHeight();
        return this;
      }

      /**
       * <code>optional uint32 num_confs_left = 3;</code>
       */
      public int getNumConfsLeft() {
        return instance.getNumConfsLeft();
      }
      /**
       * <code>optional uint32 num_confs_left = 3;</code>
       */
      public Builder setNumConfsLeft(int value) {
        copyOnWrite();
        instance.setNumConfsLeft(value);
        return this;
      }
      /**
       * <code>optional uint32 num_confs_left = 3;</code>
       */
      public Builder clearNumConfsLeft() {
        copyOnWrite();
        instance.clearNumConfsLeft();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ConfirmationUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ConfirmationUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ConfirmationUpdate other = (lnrpc.Rpc.ConfirmationUpdate) arg1;
          blockSha_ = visitor.visitByteString(blockSha_ != com.google.protobuf.ByteString.EMPTY, blockSha_,
              other.blockSha_ != com.google.protobuf.ByteString.EMPTY, other.blockSha_);
          blockHeight_ = visitor.visitInt(blockHeight_ != 0, blockHeight_,
              other.blockHeight_ != 0, other.blockHeight_);
          numConfsLeft_ = visitor.visitInt(numConfsLeft_ != 0, numConfsLeft_,
              other.numConfsLeft_ != 0, other.numConfsLeft_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  blockSha_ = input.readBytes();
                  break;
                }
                case 16: {

                  blockHeight_ = input.readInt32();
                  break;
                }
                case 24: {

                  numConfsLeft_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ConfirmationUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ConfirmationUpdate)
    private static final lnrpc.Rpc.ConfirmationUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ConfirmationUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ConfirmationUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ConfirmationUpdate> PARSER;

    public static com.google.protobuf.Parser<ConfirmationUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelOpenUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelOpenUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    boolean hasChannelPoint();
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    lnrpc.Rpc.ChannelPoint getChannelPoint();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelOpenUpdate}
   */
  public  static final class ChannelOpenUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelOpenUpdate, ChannelOpenUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelOpenUpdate)
      ChannelOpenUpdateOrBuilder {
    private ChannelOpenUpdate() {
    }
    public static final int CHANNEL_POINT_FIELD_NUMBER = 1;
    private lnrpc.Rpc.ChannelPoint channelPoint_;
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public boolean hasChannelPoint() {
      return channelPoint_ != null;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public lnrpc.Rpc.ChannelPoint getChannelPoint() {
      return channelPoint_ == null ? lnrpc.Rpc.ChannelPoint.getDefaultInstance() : channelPoint_;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void setChannelPoint(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channelPoint_ = value;
      
      }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void setChannelPoint(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      channelPoint_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void mergeChannelPoint(lnrpc.Rpc.ChannelPoint value) {
      if (channelPoint_ != null &&
          channelPoint_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        channelPoint_ =
          lnrpc.Rpc.ChannelPoint.newBuilder(channelPoint_).mergeFrom(value).buildPartial();
      } else {
        channelPoint_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void clearChannelPoint() {  channelPoint_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelPoint_ != null) {
        output.writeMessage(1, getChannelPoint());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelPoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getChannelPoint());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelOpenUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelOpenUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelOpenUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelOpenUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelOpenUpdate)
        lnrpc.Rpc.ChannelOpenUpdateOrBuilder {
      // Construct using lnrpc.Rpc.ChannelOpenUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public boolean hasChannelPoint() {
        return instance.hasChannelPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public lnrpc.Rpc.ChannelPoint getChannelPoint() {
        return instance.getChannelPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder setChannelPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setChannelPoint(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder setChannelPoint(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setChannelPoint(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder mergeChannelPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeChannelPoint(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder clearChannelPoint() {  copyOnWrite();
        instance.clearChannelPoint();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelOpenUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelOpenUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelOpenUpdate other = (lnrpc.Rpc.ChannelOpenUpdate) arg1;
          channelPoint_ = visitor.visitMessage(channelPoint_, other.channelPoint_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (channelPoint_ != null) {
                    subBuilder = channelPoint_.toBuilder();
                  }
                  channelPoint_ = input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(channelPoint_);
                    channelPoint_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelOpenUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelOpenUpdate)
    private static final lnrpc.Rpc.ChannelOpenUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelOpenUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelOpenUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelOpenUpdate> PARSER;

    public static com.google.protobuf.Parser<ChannelOpenUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelCloseUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelCloseUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bytes closing_txid = 1;</code>
     */
    com.google.protobuf.ByteString getClosingTxid();

    /**
     * <code>optional bool success = 2;</code>
     */
    boolean getSuccess();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelCloseUpdate}
   */
  public  static final class ChannelCloseUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelCloseUpdate, ChannelCloseUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelCloseUpdate)
      ChannelCloseUpdateOrBuilder {
    private ChannelCloseUpdate() {
      closingTxid_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int CLOSING_TXID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString closingTxid_;
    /**
     * <code>optional bytes closing_txid = 1;</code>
     */
    public com.google.protobuf.ByteString getClosingTxid() {
      return closingTxid_;
    }
    /**
     * <code>optional bytes closing_txid = 1;</code>
     */
    private void setClosingTxid(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      closingTxid_ = value;
    }
    /**
     * <code>optional bytes closing_txid = 1;</code>
     */
    private void clearClosingTxid() {
      
      closingTxid_ = getDefaultInstance().getClosingTxid();
    }

    public static final int SUCCESS_FIELD_NUMBER = 2;
    private boolean success_;
    /**
     * <code>optional bool success = 2;</code>
     */
    public boolean getSuccess() {
      return success_;
    }
    /**
     * <code>optional bool success = 2;</code>
     */
    private void setSuccess(boolean value) {
      
      success_ = value;
    }
    /**
     * <code>optional bool success = 2;</code>
     */
    private void clearSuccess() {
      
      success_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!closingTxid_.isEmpty()) {
        output.writeBytes(1, closingTxid_);
      }
      if (success_ != false) {
        output.writeBool(2, success_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!closingTxid_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, closingTxid_);
      }
      if (success_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, success_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelCloseUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelCloseUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelCloseUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelCloseUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelCloseUpdate)
        lnrpc.Rpc.ChannelCloseUpdateOrBuilder {
      // Construct using lnrpc.Rpc.ChannelCloseUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes closing_txid = 1;</code>
       */
      public com.google.protobuf.ByteString getClosingTxid() {
        return instance.getClosingTxid();
      }
      /**
       * <code>optional bytes closing_txid = 1;</code>
       */
      public Builder setClosingTxid(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setClosingTxid(value);
        return this;
      }
      /**
       * <code>optional bytes closing_txid = 1;</code>
       */
      public Builder clearClosingTxid() {
        copyOnWrite();
        instance.clearClosingTxid();
        return this;
      }

      /**
       * <code>optional bool success = 2;</code>
       */
      public boolean getSuccess() {
        return instance.getSuccess();
      }
      /**
       * <code>optional bool success = 2;</code>
       */
      public Builder setSuccess(boolean value) {
        copyOnWrite();
        instance.setSuccess(value);
        return this;
      }
      /**
       * <code>optional bool success = 2;</code>
       */
      public Builder clearSuccess() {
        copyOnWrite();
        instance.clearSuccess();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelCloseUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelCloseUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelCloseUpdate other = (lnrpc.Rpc.ChannelCloseUpdate) arg1;
          closingTxid_ = visitor.visitByteString(closingTxid_ != com.google.protobuf.ByteString.EMPTY, closingTxid_,
              other.closingTxid_ != com.google.protobuf.ByteString.EMPTY, other.closingTxid_);
          success_ = visitor.visitBoolean(success_ != false, success_,
              other.success_ != false, other.success_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  closingTxid_ = input.readBytes();
                  break;
                }
                case 16: {

                  success_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelCloseUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelCloseUpdate)
    private static final lnrpc.Rpc.ChannelCloseUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelCloseUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelCloseUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelCloseUpdate> PARSER;

    public static com.google.protobuf.Parser<ChannelCloseUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CloseChannelRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.CloseChannelRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    boolean hasChannelPoint();
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    lnrpc.Rpc.ChannelPoint getChannelPoint();

    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>optional bool force = 2;</code>
     */
    boolean getForce();

    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    int getTargetConf();

    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 4;</code>
     */
    long getSatPerByte();
  }
  /**
   * Protobuf type {@code lnrpc.CloseChannelRequest}
   */
  public  static final class CloseChannelRequest extends
      com.google.protobuf.GeneratedMessageLite<
          CloseChannelRequest, CloseChannelRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.CloseChannelRequest)
      CloseChannelRequestOrBuilder {
    private CloseChannelRequest() {
    }
    public static final int CHANNEL_POINT_FIELD_NUMBER = 1;
    private lnrpc.Rpc.ChannelPoint channelPoint_;
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public boolean hasChannelPoint() {
      return channelPoint_ != null;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public lnrpc.Rpc.ChannelPoint getChannelPoint() {
      return channelPoint_ == null ? lnrpc.Rpc.ChannelPoint.getDefaultInstance() : channelPoint_;
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void setChannelPoint(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channelPoint_ = value;
      
      }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void setChannelPoint(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      channelPoint_ = builderForValue.build();
      
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void mergeChannelPoint(lnrpc.Rpc.ChannelPoint value) {
      if (channelPoint_ != null &&
          channelPoint_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        channelPoint_ =
          lnrpc.Rpc.ChannelPoint.newBuilder(channelPoint_).mergeFrom(value).buildPartial();
      } else {
        channelPoint_ = value;
      }
      
    }
    /**
     * <pre>
     **
     *The outpoint (txid:index) of the funding transaction. With this value, Bob
     *will be able to generate a signature for Alice's version of the commitment
     *transaction.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void clearChannelPoint() {  channelPoint_ = null;
      
    }

    public static final int FORCE_FIELD_NUMBER = 2;
    private boolean force_;
    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>optional bool force = 2;</code>
     */
    public boolean getForce() {
      return force_;
    }
    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>optional bool force = 2;</code>
     */
    private void setForce(boolean value) {
      
      force_ = value;
    }
    /**
     * <pre>
     *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
     * </pre>
     *
     * <code>optional bool force = 2;</code>
     */
    private void clearForce() {
      
      force_ = false;
    }

    public static final int TARGET_CONF_FIELD_NUMBER = 3;
    private int targetConf_;
    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    private void setTargetConf(int value) {
      
      targetConf_ = value;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the closure transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 3;</code>
     */
    private void clearTargetConf() {
      
      targetConf_ = 0;
    }

    public static final int SAT_PER_BYTE_FIELD_NUMBER = 4;
    private long satPerByte_;
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 4;</code>
     */
    public long getSatPerByte() {
      return satPerByte_;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 4;</code>
     */
    private void setSatPerByte(long value) {
      
      satPerByte_ = value;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 4;</code>
     */
    private void clearSatPerByte() {
      
      satPerByte_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelPoint_ != null) {
        output.writeMessage(1, getChannelPoint());
      }
      if (force_ != false) {
        output.writeBool(2, force_);
      }
      if (targetConf_ != 0) {
        output.writeInt32(3, targetConf_);
      }
      if (satPerByte_ != 0L) {
        output.writeInt64(4, satPerByte_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelPoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getChannelPoint());
      }
      if (force_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, force_);
      }
      if (targetConf_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, targetConf_);
      }
      if (satPerByte_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, satPerByte_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.CloseChannelRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.CloseChannelRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.CloseChannelRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.CloseChannelRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.CloseChannelRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.CloseChannelRequest)
        lnrpc.Rpc.CloseChannelRequestOrBuilder {
      // Construct using lnrpc.Rpc.CloseChannelRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public boolean hasChannelPoint() {
        return instance.hasChannelPoint();
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public lnrpc.Rpc.ChannelPoint getChannelPoint() {
        return instance.getChannelPoint();
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder setChannelPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setChannelPoint(value);
        return this;
        }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder setChannelPoint(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setChannelPoint(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder mergeChannelPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeChannelPoint(value);
        return this;
      }
      /**
       * <pre>
       **
       *The outpoint (txid:index) of the funding transaction. With this value, Bob
       *will be able to generate a signature for Alice's version of the commitment
       *transaction.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder clearChannelPoint() {  copyOnWrite();
        instance.clearChannelPoint();
        return this;
      }

      /**
       * <pre>
       *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
       * </pre>
       *
       * <code>optional bool force = 2;</code>
       */
      public boolean getForce() {
        return instance.getForce();
      }
      /**
       * <pre>
       *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
       * </pre>
       *
       * <code>optional bool force = 2;</code>
       */
      public Builder setForce(boolean value) {
        copyOnWrite();
        instance.setForce(value);
        return this;
      }
      /**
       * <pre>
       *&#47; If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
       * </pre>
       *
       * <code>optional bool force = 2;</code>
       */
      public Builder clearForce() {
        copyOnWrite();
        instance.clearForce();
        return this;
      }

      /**
       * <pre>
       *&#47; The target number of blocks that the closure transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public int getTargetConf() {
        return instance.getTargetConf();
      }
      /**
       * <pre>
       *&#47; The target number of blocks that the closure transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public Builder setTargetConf(int value) {
        copyOnWrite();
        instance.setTargetConf(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The target number of blocks that the closure transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 3;</code>
       */
      public Builder clearTargetConf() {
        copyOnWrite();
        instance.clearTargetConf();
        return this;
      }

      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 4;</code>
       */
      public long getSatPerByte() {
        return instance.getSatPerByte();
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 4;</code>
       */
      public Builder setSatPerByte(long value) {
        copyOnWrite();
        instance.setSatPerByte(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 4;</code>
       */
      public Builder clearSatPerByte() {
        copyOnWrite();
        instance.clearSatPerByte();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.CloseChannelRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.CloseChannelRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.CloseChannelRequest other = (lnrpc.Rpc.CloseChannelRequest) arg1;
          channelPoint_ = visitor.visitMessage(channelPoint_, other.channelPoint_);
          force_ = visitor.visitBoolean(force_ != false, force_,
              other.force_ != false, other.force_);
          targetConf_ = visitor.visitInt(targetConf_ != 0, targetConf_,
              other.targetConf_ != 0, other.targetConf_);
          satPerByte_ = visitor.visitLong(satPerByte_ != 0L, satPerByte_,
              other.satPerByte_ != 0L, other.satPerByte_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (channelPoint_ != null) {
                    subBuilder = channelPoint_.toBuilder();
                  }
                  channelPoint_ = input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(channelPoint_);
                    channelPoint_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  force_ = input.readBool();
                  break;
                }
                case 24: {

                  targetConf_ = input.readInt32();
                  break;
                }
                case 32: {

                  satPerByte_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.CloseChannelRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.CloseChannelRequest)
    private static final lnrpc.Rpc.CloseChannelRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CloseChannelRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.CloseChannelRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CloseChannelRequest> PARSER;

    public static com.google.protobuf.Parser<CloseChannelRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface CloseStatusUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.CloseStatusUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
     */
    lnrpc.Rpc.PendingUpdate getClosePending();

    /**
     * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
     */
    lnrpc.Rpc.ChannelCloseUpdate getChanClose();

    public lnrpc.Rpc.CloseStatusUpdate.UpdateCase getUpdateCase();
  }
  /**
   * Protobuf type {@code lnrpc.CloseStatusUpdate}
   */
  public  static final class CloseStatusUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          CloseStatusUpdate, CloseStatusUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.CloseStatusUpdate)
      CloseStatusUpdateOrBuilder {
    private CloseStatusUpdate() {
    }
    private int updateCase_ = 0;
    private java.lang.Object update_;
    public enum UpdateCase
        implements com.google.protobuf.Internal.EnumLite {
      CLOSE_PENDING(1),
      CHAN_CLOSE(3),
      UPDATE_NOT_SET(0);
      private final int value;
      private UpdateCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static UpdateCase valueOf(int value) {
        return forNumber(value);
      }

      public static UpdateCase forNumber(int value) {
        switch (value) {
          case 1: return CLOSE_PENDING;
          case 3: return CHAN_CLOSE;
          case 0: return UPDATE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public UpdateCase
    getUpdateCase() {
      return UpdateCase.forNumber(
          updateCase_);
    }

    private void clearUpdate() {
      updateCase_ = 0;
      update_ = null;
    }

    public static final int CLOSE_PENDING_FIELD_NUMBER = 1;
    /**
     * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
     */
    public lnrpc.Rpc.PendingUpdate getClosePending() {
      if (updateCase_ == 1) {
         return (lnrpc.Rpc.PendingUpdate) update_;
      }
      return lnrpc.Rpc.PendingUpdate.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
     */
    private void setClosePending(lnrpc.Rpc.PendingUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      update_ = value;
      updateCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
     */
    private void setClosePending(
        lnrpc.Rpc.PendingUpdate.Builder builderForValue) {
      update_ = builderForValue.build();
      updateCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
     */
    private void mergeClosePending(lnrpc.Rpc.PendingUpdate value) {
      if (updateCase_ == 1 &&
          update_ != lnrpc.Rpc.PendingUpdate.getDefaultInstance()) {
        update_ = lnrpc.Rpc.PendingUpdate.newBuilder((lnrpc.Rpc.PendingUpdate) update_)
            .mergeFrom(value).buildPartial();
      } else {
        update_ = value;
      }
      updateCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
     */
    private void clearClosePending() {
      if (updateCase_ == 1) {
        updateCase_ = 0;
        update_ = null;
      }
    }

    public static final int CHAN_CLOSE_FIELD_NUMBER = 3;
    /**
     * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
     */
    public lnrpc.Rpc.ChannelCloseUpdate getChanClose() {
      if (updateCase_ == 3) {
         return (lnrpc.Rpc.ChannelCloseUpdate) update_;
      }
      return lnrpc.Rpc.ChannelCloseUpdate.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
     */
    private void setChanClose(lnrpc.Rpc.ChannelCloseUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      update_ = value;
      updateCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
     */
    private void setChanClose(
        lnrpc.Rpc.ChannelCloseUpdate.Builder builderForValue) {
      update_ = builderForValue.build();
      updateCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
     */
    private void mergeChanClose(lnrpc.Rpc.ChannelCloseUpdate value) {
      if (updateCase_ == 3 &&
          update_ != lnrpc.Rpc.ChannelCloseUpdate.getDefaultInstance()) {
        update_ = lnrpc.Rpc.ChannelCloseUpdate.newBuilder((lnrpc.Rpc.ChannelCloseUpdate) update_)
            .mergeFrom(value).buildPartial();
      } else {
        update_ = value;
      }
      updateCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
     */
    private void clearChanClose() {
      if (updateCase_ == 3) {
        updateCase_ = 0;
        update_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (updateCase_ == 1) {
        output.writeMessage(1, (lnrpc.Rpc.PendingUpdate) update_);
      }
      if (updateCase_ == 3) {
        output.writeMessage(3, (lnrpc.Rpc.ChannelCloseUpdate) update_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (updateCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (lnrpc.Rpc.PendingUpdate) update_);
      }
      if (updateCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (lnrpc.Rpc.ChannelCloseUpdate) update_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.CloseStatusUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.CloseStatusUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.CloseStatusUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.CloseStatusUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.CloseStatusUpdate)
        lnrpc.Rpc.CloseStatusUpdateOrBuilder {
      // Construct using lnrpc.Rpc.CloseStatusUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public UpdateCase
          getUpdateCase() {
        return instance.getUpdateCase();
      }

      public Builder clearUpdate() {
        copyOnWrite();
        instance.clearUpdate();
        return this;
      }


      /**
       * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
       */
      public lnrpc.Rpc.PendingUpdate getClosePending() {
        return instance.getClosePending();
      }
      /**
       * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
       */
      public Builder setClosePending(lnrpc.Rpc.PendingUpdate value) {
        copyOnWrite();
        instance.setClosePending(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
       */
      public Builder setClosePending(
          lnrpc.Rpc.PendingUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setClosePending(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
       */
      public Builder mergeClosePending(lnrpc.Rpc.PendingUpdate value) {
        copyOnWrite();
        instance.mergeClosePending(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.PendingUpdate close_pending = 1;</code>
       */
      public Builder clearClosePending() {
        copyOnWrite();
        instance.clearClosePending();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
       */
      public lnrpc.Rpc.ChannelCloseUpdate getChanClose() {
        return instance.getChanClose();
      }
      /**
       * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
       */
      public Builder setChanClose(lnrpc.Rpc.ChannelCloseUpdate value) {
        copyOnWrite();
        instance.setChanClose(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
       */
      public Builder setChanClose(
          lnrpc.Rpc.ChannelCloseUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setChanClose(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
       */
      public Builder mergeChanClose(lnrpc.Rpc.ChannelCloseUpdate value) {
        copyOnWrite();
        instance.mergeChanClose(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelCloseUpdate chan_close = 3;</code>
       */
      public Builder clearChanClose() {
        copyOnWrite();
        instance.clearChanClose();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.CloseStatusUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.CloseStatusUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.CloseStatusUpdate other = (lnrpc.Rpc.CloseStatusUpdate) arg1;
          switch (other.getUpdateCase()) {
            case CLOSE_PENDING: {
              update_ = visitor.visitOneofMessage(
                  updateCase_ == 1,
                  update_,
                  other.update_);
              break;
            }
            case CHAN_CLOSE: {
              update_ = visitor.visitOneofMessage(
                  updateCase_ == 3,
                  update_,
                  other.update_);
              break;
            }
            case UPDATE_NOT_SET: {
              visitor.visitOneofNotSet(updateCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.updateCase_ != 0) {
              updateCase_ = other.updateCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.PendingUpdate.Builder subBuilder = null;
                  if (updateCase_ == 1) {
                    subBuilder = ((lnrpc.Rpc.PendingUpdate) update_).toBuilder();
                  }
                  update_ =
                       input.readMessage(lnrpc.Rpc.PendingUpdate.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.PendingUpdate) update_);
                    update_ = subBuilder.buildPartial();
                  }
                  updateCase_ = 1;
                  break;
                }
                case 26: {
                  lnrpc.Rpc.ChannelCloseUpdate.Builder subBuilder = null;
                  if (updateCase_ == 3) {
                    subBuilder = ((lnrpc.Rpc.ChannelCloseUpdate) update_).toBuilder();
                  }
                  update_ =
                       input.readMessage(lnrpc.Rpc.ChannelCloseUpdate.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.ChannelCloseUpdate) update_);
                    update_ = subBuilder.buildPartial();
                  }
                  updateCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.CloseStatusUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.CloseStatusUpdate)
    private static final lnrpc.Rpc.CloseStatusUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new CloseStatusUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.CloseStatusUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<CloseStatusUpdate> PARSER;

    public static com.google.protobuf.Parser<CloseStatusUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PendingUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PendingUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bytes txid = 1;</code>
     */
    com.google.protobuf.ByteString getTxid();

    /**
     * <code>optional uint32 output_index = 2;</code>
     */
    int getOutputIndex();
  }
  /**
   * Protobuf type {@code lnrpc.PendingUpdate}
   */
  public  static final class PendingUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          PendingUpdate, PendingUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PendingUpdate)
      PendingUpdateOrBuilder {
    private PendingUpdate() {
      txid_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int TXID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString txid_;
    /**
     * <code>optional bytes txid = 1;</code>
     */
    public com.google.protobuf.ByteString getTxid() {
      return txid_;
    }
    /**
     * <code>optional bytes txid = 1;</code>
     */
    private void setTxid(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      txid_ = value;
    }
    /**
     * <code>optional bytes txid = 1;</code>
     */
    private void clearTxid() {
      
      txid_ = getDefaultInstance().getTxid();
    }

    public static final int OUTPUT_INDEX_FIELD_NUMBER = 2;
    private int outputIndex_;
    /**
     * <code>optional uint32 output_index = 2;</code>
     */
    public int getOutputIndex() {
      return outputIndex_;
    }
    /**
     * <code>optional uint32 output_index = 2;</code>
     */
    private void setOutputIndex(int value) {
      
      outputIndex_ = value;
    }
    /**
     * <code>optional uint32 output_index = 2;</code>
     */
    private void clearOutputIndex() {
      
      outputIndex_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!txid_.isEmpty()) {
        output.writeBytes(1, txid_);
      }
      if (outputIndex_ != 0) {
        output.writeUInt32(2, outputIndex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!txid_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, txid_);
      }
      if (outputIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, outputIndex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PendingUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PendingUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PendingUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PendingUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PendingUpdate)
        lnrpc.Rpc.PendingUpdateOrBuilder {
      // Construct using lnrpc.Rpc.PendingUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes txid = 1;</code>
       */
      public com.google.protobuf.ByteString getTxid() {
        return instance.getTxid();
      }
      /**
       * <code>optional bytes txid = 1;</code>
       */
      public Builder setTxid(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTxid(value);
        return this;
      }
      /**
       * <code>optional bytes txid = 1;</code>
       */
      public Builder clearTxid() {
        copyOnWrite();
        instance.clearTxid();
        return this;
      }

      /**
       * <code>optional uint32 output_index = 2;</code>
       */
      public int getOutputIndex() {
        return instance.getOutputIndex();
      }
      /**
       * <code>optional uint32 output_index = 2;</code>
       */
      public Builder setOutputIndex(int value) {
        copyOnWrite();
        instance.setOutputIndex(value);
        return this;
      }
      /**
       * <code>optional uint32 output_index = 2;</code>
       */
      public Builder clearOutputIndex() {
        copyOnWrite();
        instance.clearOutputIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PendingUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PendingUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PendingUpdate other = (lnrpc.Rpc.PendingUpdate) arg1;
          txid_ = visitor.visitByteString(txid_ != com.google.protobuf.ByteString.EMPTY, txid_,
              other.txid_ != com.google.protobuf.ByteString.EMPTY, other.txid_);
          outputIndex_ = visitor.visitInt(outputIndex_ != 0, outputIndex_,
              other.outputIndex_ != 0, other.outputIndex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  txid_ = input.readBytes();
                  break;
                }
                case 16: {

                  outputIndex_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PendingUpdate)
    private static final lnrpc.Rpc.PendingUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PendingUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PendingUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PendingUpdate> PARSER;

    public static com.google.protobuf.Parser<PendingUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface OpenChannelRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.OpenChannelRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional bytes node_pubkey = 2;</code>
     */
    com.google.protobuf.ByteString getNodePubkey();

    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    java.lang.String getNodePubkeyString();
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    com.google.protobuf.ByteString
        getNodePubkeyStringBytes();

    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>optional int64 local_funding_amount = 4;</code>
     */
    long getLocalFundingAmount();

    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>optional int64 push_sat = 5;</code>
     */
    long getPushSat();

    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 6;</code>
     */
    int getTargetConf();

    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 7;</code>
     */
    long getSatPerByte();

    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>optional bool private = 8;</code>
     */
    boolean getPrivate();

    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>optional int64 min_htlc_msat = 9;</code>
     */
    long getMinHtlcMsat();

    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>optional uint32 remote_csv_delay = 10;</code>
     */
    int getRemoteCsvDelay();

    /**
     * <pre>
     *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
     * </pre>
     *
     * <code>optional int32 min_confs = 11;</code>
     */
    int getMinConfs();

    /**
     * <pre>
     *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
     * </pre>
     *
     * <code>optional bool spend_unconfirmed = 12;</code>
     */
    boolean getSpendUnconfirmed();
  }
  /**
   * Protobuf type {@code lnrpc.OpenChannelRequest}
   */
  public  static final class OpenChannelRequest extends
      com.google.protobuf.GeneratedMessageLite<
          OpenChannelRequest, OpenChannelRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.OpenChannelRequest)
      OpenChannelRequestOrBuilder {
    private OpenChannelRequest() {
      nodePubkey_ = com.google.protobuf.ByteString.EMPTY;
      nodePubkeyString_ = "";
    }
    public static final int NODE_PUBKEY_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString nodePubkey_;
    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional bytes node_pubkey = 2;</code>
     */
    public com.google.protobuf.ByteString getNodePubkey() {
      return nodePubkey_;
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional bytes node_pubkey = 2;</code>
     */
    private void setNodePubkey(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nodePubkey_ = value;
    }
    /**
     * <pre>
     *&#47; The pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional bytes node_pubkey = 2;</code>
     */
    private void clearNodePubkey() {
      
      nodePubkey_ = getDefaultInstance().getNodePubkey();
    }

    public static final int NODE_PUBKEY_STRING_FIELD_NUMBER = 3;
    private java.lang.String nodePubkeyString_;
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    public java.lang.String getNodePubkeyString() {
      return nodePubkeyString_;
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNodePubkeyStringBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(nodePubkeyString_);
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    private void setNodePubkeyString(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nodePubkeyString_ = value;
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    private void clearNodePubkeyString() {
      
      nodePubkeyString_ = getDefaultInstance().getNodePubkeyString();
    }
    /**
     * <pre>
     *&#47; The hex encoded pubkey of the node to open a channel with
     * </pre>
     *
     * <code>optional string node_pubkey_string = 3;</code>
     */
    private void setNodePubkeyStringBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      nodePubkeyString_ = value.toStringUtf8();
    }

    public static final int LOCAL_FUNDING_AMOUNT_FIELD_NUMBER = 4;
    private long localFundingAmount_;
    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>optional int64 local_funding_amount = 4;</code>
     */
    public long getLocalFundingAmount() {
      return localFundingAmount_;
    }
    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>optional int64 local_funding_amount = 4;</code>
     */
    private void setLocalFundingAmount(long value) {
      
      localFundingAmount_ = value;
    }
    /**
     * <pre>
     *&#47; The number of satoshis the wallet should commit to the channel
     * </pre>
     *
     * <code>optional int64 local_funding_amount = 4;</code>
     */
    private void clearLocalFundingAmount() {
      
      localFundingAmount_ = 0L;
    }

    public static final int PUSH_SAT_FIELD_NUMBER = 5;
    private long pushSat_;
    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>optional int64 push_sat = 5;</code>
     */
    public long getPushSat() {
      return pushSat_;
    }
    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>optional int64 push_sat = 5;</code>
     */
    private void setPushSat(long value) {
      
      pushSat_ = value;
    }
    /**
     * <pre>
     *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
     * </pre>
     *
     * <code>optional int64 push_sat = 5;</code>
     */
    private void clearPushSat() {
      
      pushSat_ = 0L;
    }

    public static final int TARGET_CONF_FIELD_NUMBER = 6;
    private int targetConf_;
    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 6;</code>
     */
    public int getTargetConf() {
      return targetConf_;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 6;</code>
     */
    private void setTargetConf(int value) {
      
      targetConf_ = value;
    }
    /**
     * <pre>
     *&#47; The target number of blocks that the funding transaction should be confirmed by.
     * </pre>
     *
     * <code>optional int32 target_conf = 6;</code>
     */
    private void clearTargetConf() {
      
      targetConf_ = 0;
    }

    public static final int SAT_PER_BYTE_FIELD_NUMBER = 7;
    private long satPerByte_;
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 7;</code>
     */
    public long getSatPerByte() {
      return satPerByte_;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 7;</code>
     */
    private void setSatPerByte(long value) {
      
      satPerByte_ = value;
    }
    /**
     * <pre>
     *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
     * </pre>
     *
     * <code>optional int64 sat_per_byte = 7;</code>
     */
    private void clearSatPerByte() {
      
      satPerByte_ = 0L;
    }

    public static final int PRIVATE_FIELD_NUMBER = 8;
    private boolean private_;
    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>optional bool private = 8;</code>
     */
    public boolean getPrivate() {
      return private_;
    }
    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>optional bool private = 8;</code>
     */
    private void setPrivate(boolean value) {
      
      private_ = value;
    }
    /**
     * <pre>
     *&#47; Whether this channel should be private, not announced to the greater network.
     * </pre>
     *
     * <code>optional bool private = 8;</code>
     */
    private void clearPrivate() {
      
      private_ = false;
    }

    public static final int MIN_HTLC_MSAT_FIELD_NUMBER = 9;
    private long minHtlcMsat_;
    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>optional int64 min_htlc_msat = 9;</code>
     */
    public long getMinHtlcMsat() {
      return minHtlcMsat_;
    }
    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>optional int64 min_htlc_msat = 9;</code>
     */
    private void setMinHtlcMsat(long value) {
      
      minHtlcMsat_ = value;
    }
    /**
     * <pre>
     *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
     * </pre>
     *
     * <code>optional int64 min_htlc_msat = 9;</code>
     */
    private void clearMinHtlcMsat() {
      
      minHtlcMsat_ = 0L;
    }

    public static final int REMOTE_CSV_DELAY_FIELD_NUMBER = 10;
    private int remoteCsvDelay_;
    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>optional uint32 remote_csv_delay = 10;</code>
     */
    public int getRemoteCsvDelay() {
      return remoteCsvDelay_;
    }
    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>optional uint32 remote_csv_delay = 10;</code>
     */
    private void setRemoteCsvDelay(int value) {
      
      remoteCsvDelay_ = value;
    }
    /**
     * <pre>
     *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
     * </pre>
     *
     * <code>optional uint32 remote_csv_delay = 10;</code>
     */
    private void clearRemoteCsvDelay() {
      
      remoteCsvDelay_ = 0;
    }

    public static final int MIN_CONFS_FIELD_NUMBER = 11;
    private int minConfs_;
    /**
     * <pre>
     *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
     * </pre>
     *
     * <code>optional int32 min_confs = 11;</code>
     */
    public int getMinConfs() {
      return minConfs_;
    }
    /**
     * <pre>
     *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
     * </pre>
     *
     * <code>optional int32 min_confs = 11;</code>
     */
    private void setMinConfs(int value) {
      
      minConfs_ = value;
    }
    /**
     * <pre>
     *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
     * </pre>
     *
     * <code>optional int32 min_confs = 11;</code>
     */
    private void clearMinConfs() {
      
      minConfs_ = 0;
    }

    public static final int SPEND_UNCONFIRMED_FIELD_NUMBER = 12;
    private boolean spendUnconfirmed_;
    /**
     * <pre>
     *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
     * </pre>
     *
     * <code>optional bool spend_unconfirmed = 12;</code>
     */
    public boolean getSpendUnconfirmed() {
      return spendUnconfirmed_;
    }
    /**
     * <pre>
     *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
     * </pre>
     *
     * <code>optional bool spend_unconfirmed = 12;</code>
     */
    private void setSpendUnconfirmed(boolean value) {
      
      spendUnconfirmed_ = value;
    }
    /**
     * <pre>
     *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
     * </pre>
     *
     * <code>optional bool spend_unconfirmed = 12;</code>
     */
    private void clearSpendUnconfirmed() {
      
      spendUnconfirmed_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!nodePubkey_.isEmpty()) {
        output.writeBytes(2, nodePubkey_);
      }
      if (!nodePubkeyString_.isEmpty()) {
        output.writeString(3, getNodePubkeyString());
      }
      if (localFundingAmount_ != 0L) {
        output.writeInt64(4, localFundingAmount_);
      }
      if (pushSat_ != 0L) {
        output.writeInt64(5, pushSat_);
      }
      if (targetConf_ != 0) {
        output.writeInt32(6, targetConf_);
      }
      if (satPerByte_ != 0L) {
        output.writeInt64(7, satPerByte_);
      }
      if (private_ != false) {
        output.writeBool(8, private_);
      }
      if (minHtlcMsat_ != 0L) {
        output.writeInt64(9, minHtlcMsat_);
      }
      if (remoteCsvDelay_ != 0) {
        output.writeUInt32(10, remoteCsvDelay_);
      }
      if (minConfs_ != 0) {
        output.writeInt32(11, minConfs_);
      }
      if (spendUnconfirmed_ != false) {
        output.writeBool(12, spendUnconfirmed_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!nodePubkey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, nodePubkey_);
      }
      if (!nodePubkeyString_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getNodePubkeyString());
      }
      if (localFundingAmount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, localFundingAmount_);
      }
      if (pushSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, pushSat_);
      }
      if (targetConf_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, targetConf_);
      }
      if (satPerByte_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, satPerByte_);
      }
      if (private_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, private_);
      }
      if (minHtlcMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, minHtlcMsat_);
      }
      if (remoteCsvDelay_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, remoteCsvDelay_);
      }
      if (minConfs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, minConfs_);
      }
      if (spendUnconfirmed_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, spendUnconfirmed_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.OpenChannelRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OpenChannelRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.OpenChannelRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.OpenChannelRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.OpenChannelRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.OpenChannelRequest)
        lnrpc.Rpc.OpenChannelRequestOrBuilder {
      // Construct using lnrpc.Rpc.OpenChannelRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional bytes node_pubkey = 2;</code>
       */
      public com.google.protobuf.ByteString getNodePubkey() {
        return instance.getNodePubkey();
      }
      /**
       * <pre>
       *&#47; The pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional bytes node_pubkey = 2;</code>
       */
      public Builder setNodePubkey(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNodePubkey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional bytes node_pubkey = 2;</code>
       */
      public Builder clearNodePubkey() {
        copyOnWrite();
        instance.clearNodePubkey();
        return this;
      }

      /**
       * <pre>
       *&#47; The hex encoded pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional string node_pubkey_string = 3;</code>
       */
      public java.lang.String getNodePubkeyString() {
        return instance.getNodePubkeyString();
      }
      /**
       * <pre>
       *&#47; The hex encoded pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional string node_pubkey_string = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNodePubkeyStringBytes() {
        return instance.getNodePubkeyStringBytes();
      }
      /**
       * <pre>
       *&#47; The hex encoded pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional string node_pubkey_string = 3;</code>
       */
      public Builder setNodePubkeyString(
          java.lang.String value) {
        copyOnWrite();
        instance.setNodePubkeyString(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hex encoded pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional string node_pubkey_string = 3;</code>
       */
      public Builder clearNodePubkeyString() {
        copyOnWrite();
        instance.clearNodePubkeyString();
        return this;
      }
      /**
       * <pre>
       *&#47; The hex encoded pubkey of the node to open a channel with
       * </pre>
       *
       * <code>optional string node_pubkey_string = 3;</code>
       */
      public Builder setNodePubkeyStringBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNodePubkeyStringBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The number of satoshis the wallet should commit to the channel
       * </pre>
       *
       * <code>optional int64 local_funding_amount = 4;</code>
       */
      public long getLocalFundingAmount() {
        return instance.getLocalFundingAmount();
      }
      /**
       * <pre>
       *&#47; The number of satoshis the wallet should commit to the channel
       * </pre>
       *
       * <code>optional int64 local_funding_amount = 4;</code>
       */
      public Builder setLocalFundingAmount(long value) {
        copyOnWrite();
        instance.setLocalFundingAmount(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The number of satoshis the wallet should commit to the channel
       * </pre>
       *
       * <code>optional int64 local_funding_amount = 4;</code>
       */
      public Builder clearLocalFundingAmount() {
        copyOnWrite();
        instance.clearLocalFundingAmount();
        return this;
      }

      /**
       * <pre>
       *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
       * </pre>
       *
       * <code>optional int64 push_sat = 5;</code>
       */
      public long getPushSat() {
        return instance.getPushSat();
      }
      /**
       * <pre>
       *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
       * </pre>
       *
       * <code>optional int64 push_sat = 5;</code>
       */
      public Builder setPushSat(long value) {
        copyOnWrite();
        instance.setPushSat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The number of satoshis to push to the remote side as part of the initial commitment state
       * </pre>
       *
       * <code>optional int64 push_sat = 5;</code>
       */
      public Builder clearPushSat() {
        copyOnWrite();
        instance.clearPushSat();
        return this;
      }

      /**
       * <pre>
       *&#47; The target number of blocks that the funding transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 6;</code>
       */
      public int getTargetConf() {
        return instance.getTargetConf();
      }
      /**
       * <pre>
       *&#47; The target number of blocks that the funding transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 6;</code>
       */
      public Builder setTargetConf(int value) {
        copyOnWrite();
        instance.setTargetConf(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The target number of blocks that the funding transaction should be confirmed by.
       * </pre>
       *
       * <code>optional int32 target_conf = 6;</code>
       */
      public Builder clearTargetConf() {
        copyOnWrite();
        instance.clearTargetConf();
        return this;
      }

      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 7;</code>
       */
      public long getSatPerByte() {
        return instance.getSatPerByte();
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 7;</code>
       */
      public Builder setSatPerByte(long value) {
        copyOnWrite();
        instance.setSatPerByte(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
       * </pre>
       *
       * <code>optional int64 sat_per_byte = 7;</code>
       */
      public Builder clearSatPerByte() {
        copyOnWrite();
        instance.clearSatPerByte();
        return this;
      }

      /**
       * <pre>
       *&#47; Whether this channel should be private, not announced to the greater network.
       * </pre>
       *
       * <code>optional bool private = 8;</code>
       */
      public boolean getPrivate() {
        return instance.getPrivate();
      }
      /**
       * <pre>
       *&#47; Whether this channel should be private, not announced to the greater network.
       * </pre>
       *
       * <code>optional bool private = 8;</code>
       */
      public Builder setPrivate(boolean value) {
        copyOnWrite();
        instance.setPrivate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether this channel should be private, not announced to the greater network.
       * </pre>
       *
       * <code>optional bool private = 8;</code>
       */
      public Builder clearPrivate() {
        copyOnWrite();
        instance.clearPrivate();
        return this;
      }

      /**
       * <pre>
       *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
       * </pre>
       *
       * <code>optional int64 min_htlc_msat = 9;</code>
       */
      public long getMinHtlcMsat() {
        return instance.getMinHtlcMsat();
      }
      /**
       * <pre>
       *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
       * </pre>
       *
       * <code>optional int64 min_htlc_msat = 9;</code>
       */
      public Builder setMinHtlcMsat(long value) {
        copyOnWrite();
        instance.setMinHtlcMsat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
       * </pre>
       *
       * <code>optional int64 min_htlc_msat = 9;</code>
       */
      public Builder clearMinHtlcMsat() {
        copyOnWrite();
        instance.clearMinHtlcMsat();
        return this;
      }

      /**
       * <pre>
       *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
       * </pre>
       *
       * <code>optional uint32 remote_csv_delay = 10;</code>
       */
      public int getRemoteCsvDelay() {
        return instance.getRemoteCsvDelay();
      }
      /**
       * <pre>
       *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
       * </pre>
       *
       * <code>optional uint32 remote_csv_delay = 10;</code>
       */
      public Builder setRemoteCsvDelay(int value) {
        copyOnWrite();
        instance.setRemoteCsvDelay(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
       * </pre>
       *
       * <code>optional uint32 remote_csv_delay = 10;</code>
       */
      public Builder clearRemoteCsvDelay() {
        copyOnWrite();
        instance.clearRemoteCsvDelay();
        return this;
      }

      /**
       * <pre>
       *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
       * </pre>
       *
       * <code>optional int32 min_confs = 11;</code>
       */
      public int getMinConfs() {
        return instance.getMinConfs();
      }
      /**
       * <pre>
       *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
       * </pre>
       *
       * <code>optional int32 min_confs = 11;</code>
       */
      public Builder setMinConfs(int value) {
        copyOnWrite();
        instance.setMinConfs(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
       * </pre>
       *
       * <code>optional int32 min_confs = 11;</code>
       */
      public Builder clearMinConfs() {
        copyOnWrite();
        instance.clearMinConfs();
        return this;
      }

      /**
       * <pre>
       *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
       * </pre>
       *
       * <code>optional bool spend_unconfirmed = 12;</code>
       */
      public boolean getSpendUnconfirmed() {
        return instance.getSpendUnconfirmed();
      }
      /**
       * <pre>
       *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
       * </pre>
       *
       * <code>optional bool spend_unconfirmed = 12;</code>
       */
      public Builder setSpendUnconfirmed(boolean value) {
        copyOnWrite();
        instance.setSpendUnconfirmed(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether unconfirmed outputs should be used as inputs for the funding transaction.
       * </pre>
       *
       * <code>optional bool spend_unconfirmed = 12;</code>
       */
      public Builder clearSpendUnconfirmed() {
        copyOnWrite();
        instance.clearSpendUnconfirmed();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.OpenChannelRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.OpenChannelRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.OpenChannelRequest other = (lnrpc.Rpc.OpenChannelRequest) arg1;
          nodePubkey_ = visitor.visitByteString(nodePubkey_ != com.google.protobuf.ByteString.EMPTY, nodePubkey_,
              other.nodePubkey_ != com.google.protobuf.ByteString.EMPTY, other.nodePubkey_);
          nodePubkeyString_ = visitor.visitString(!nodePubkeyString_.isEmpty(), nodePubkeyString_,
              !other.nodePubkeyString_.isEmpty(), other.nodePubkeyString_);
          localFundingAmount_ = visitor.visitLong(localFundingAmount_ != 0L, localFundingAmount_,
              other.localFundingAmount_ != 0L, other.localFundingAmount_);
          pushSat_ = visitor.visitLong(pushSat_ != 0L, pushSat_,
              other.pushSat_ != 0L, other.pushSat_);
          targetConf_ = visitor.visitInt(targetConf_ != 0, targetConf_,
              other.targetConf_ != 0, other.targetConf_);
          satPerByte_ = visitor.visitLong(satPerByte_ != 0L, satPerByte_,
              other.satPerByte_ != 0L, other.satPerByte_);
          private_ = visitor.visitBoolean(private_ != false, private_,
              other.private_ != false, other.private_);
          minHtlcMsat_ = visitor.visitLong(minHtlcMsat_ != 0L, minHtlcMsat_,
              other.minHtlcMsat_ != 0L, other.minHtlcMsat_);
          remoteCsvDelay_ = visitor.visitInt(remoteCsvDelay_ != 0, remoteCsvDelay_,
              other.remoteCsvDelay_ != 0, other.remoteCsvDelay_);
          minConfs_ = visitor.visitInt(minConfs_ != 0, minConfs_,
              other.minConfs_ != 0, other.minConfs_);
          spendUnconfirmed_ = visitor.visitBoolean(spendUnconfirmed_ != false, spendUnconfirmed_,
              other.spendUnconfirmed_ != false, other.spendUnconfirmed_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 18: {

                  nodePubkey_ = input.readBytes();
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  nodePubkeyString_ = s;
                  break;
                }
                case 32: {

                  localFundingAmount_ = input.readInt64();
                  break;
                }
                case 40: {

                  pushSat_ = input.readInt64();
                  break;
                }
                case 48: {

                  targetConf_ = input.readInt32();
                  break;
                }
                case 56: {

                  satPerByte_ = input.readInt64();
                  break;
                }
                case 64: {

                  private_ = input.readBool();
                  break;
                }
                case 72: {

                  minHtlcMsat_ = input.readInt64();
                  break;
                }
                case 80: {

                  remoteCsvDelay_ = input.readUInt32();
                  break;
                }
                case 88: {

                  minConfs_ = input.readInt32();
                  break;
                }
                case 96: {

                  spendUnconfirmed_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.OpenChannelRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.OpenChannelRequest)
    private static final lnrpc.Rpc.OpenChannelRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OpenChannelRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.OpenChannelRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<OpenChannelRequest> PARSER;

    public static com.google.protobuf.Parser<OpenChannelRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface OpenStatusUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.OpenStatusUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
     */
    lnrpc.Rpc.PendingUpdate getChanPending();

    /**
     * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
     */
    lnrpc.Rpc.ChannelOpenUpdate getChanOpen();

    public lnrpc.Rpc.OpenStatusUpdate.UpdateCase getUpdateCase();
  }
  /**
   * Protobuf type {@code lnrpc.OpenStatusUpdate}
   */
  public  static final class OpenStatusUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          OpenStatusUpdate, OpenStatusUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.OpenStatusUpdate)
      OpenStatusUpdateOrBuilder {
    private OpenStatusUpdate() {
    }
    private int updateCase_ = 0;
    private java.lang.Object update_;
    public enum UpdateCase
        implements com.google.protobuf.Internal.EnumLite {
      CHAN_PENDING(1),
      CHAN_OPEN(3),
      UPDATE_NOT_SET(0);
      private final int value;
      private UpdateCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static UpdateCase valueOf(int value) {
        return forNumber(value);
      }

      public static UpdateCase forNumber(int value) {
        switch (value) {
          case 1: return CHAN_PENDING;
          case 3: return CHAN_OPEN;
          case 0: return UPDATE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public UpdateCase
    getUpdateCase() {
      return UpdateCase.forNumber(
          updateCase_);
    }

    private void clearUpdate() {
      updateCase_ = 0;
      update_ = null;
    }

    public static final int CHAN_PENDING_FIELD_NUMBER = 1;
    /**
     * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
     */
    public lnrpc.Rpc.PendingUpdate getChanPending() {
      if (updateCase_ == 1) {
         return (lnrpc.Rpc.PendingUpdate) update_;
      }
      return lnrpc.Rpc.PendingUpdate.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
     */
    private void setChanPending(lnrpc.Rpc.PendingUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      update_ = value;
      updateCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
     */
    private void setChanPending(
        lnrpc.Rpc.PendingUpdate.Builder builderForValue) {
      update_ = builderForValue.build();
      updateCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
     */
    private void mergeChanPending(lnrpc.Rpc.PendingUpdate value) {
      if (updateCase_ == 1 &&
          update_ != lnrpc.Rpc.PendingUpdate.getDefaultInstance()) {
        update_ = lnrpc.Rpc.PendingUpdate.newBuilder((lnrpc.Rpc.PendingUpdate) update_)
            .mergeFrom(value).buildPartial();
      } else {
        update_ = value;
      }
      updateCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
     */
    private void clearChanPending() {
      if (updateCase_ == 1) {
        updateCase_ = 0;
        update_ = null;
      }
    }

    public static final int CHAN_OPEN_FIELD_NUMBER = 3;
    /**
     * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
     */
    public lnrpc.Rpc.ChannelOpenUpdate getChanOpen() {
      if (updateCase_ == 3) {
         return (lnrpc.Rpc.ChannelOpenUpdate) update_;
      }
      return lnrpc.Rpc.ChannelOpenUpdate.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
     */
    private void setChanOpen(lnrpc.Rpc.ChannelOpenUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      update_ = value;
      updateCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
     */
    private void setChanOpen(
        lnrpc.Rpc.ChannelOpenUpdate.Builder builderForValue) {
      update_ = builderForValue.build();
      updateCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
     */
    private void mergeChanOpen(lnrpc.Rpc.ChannelOpenUpdate value) {
      if (updateCase_ == 3 &&
          update_ != lnrpc.Rpc.ChannelOpenUpdate.getDefaultInstance()) {
        update_ = lnrpc.Rpc.ChannelOpenUpdate.newBuilder((lnrpc.Rpc.ChannelOpenUpdate) update_)
            .mergeFrom(value).buildPartial();
      } else {
        update_ = value;
      }
      updateCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
     */
    private void clearChanOpen() {
      if (updateCase_ == 3) {
        updateCase_ = 0;
        update_ = null;
      }
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (updateCase_ == 1) {
        output.writeMessage(1, (lnrpc.Rpc.PendingUpdate) update_);
      }
      if (updateCase_ == 3) {
        output.writeMessage(3, (lnrpc.Rpc.ChannelOpenUpdate) update_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (updateCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (lnrpc.Rpc.PendingUpdate) update_);
      }
      if (updateCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (lnrpc.Rpc.ChannelOpenUpdate) update_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.OpenStatusUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.OpenStatusUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.OpenStatusUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.OpenStatusUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.OpenStatusUpdate)
        lnrpc.Rpc.OpenStatusUpdateOrBuilder {
      // Construct using lnrpc.Rpc.OpenStatusUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public UpdateCase
          getUpdateCase() {
        return instance.getUpdateCase();
      }

      public Builder clearUpdate() {
        copyOnWrite();
        instance.clearUpdate();
        return this;
      }


      /**
       * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
       */
      public lnrpc.Rpc.PendingUpdate getChanPending() {
        return instance.getChanPending();
      }
      /**
       * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
       */
      public Builder setChanPending(lnrpc.Rpc.PendingUpdate value) {
        copyOnWrite();
        instance.setChanPending(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
       */
      public Builder setChanPending(
          lnrpc.Rpc.PendingUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setChanPending(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
       */
      public Builder mergeChanPending(lnrpc.Rpc.PendingUpdate value) {
        copyOnWrite();
        instance.mergeChanPending(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.PendingUpdate chan_pending = 1;</code>
       */
      public Builder clearChanPending() {
        copyOnWrite();
        instance.clearChanPending();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
       */
      public lnrpc.Rpc.ChannelOpenUpdate getChanOpen() {
        return instance.getChanOpen();
      }
      /**
       * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
       */
      public Builder setChanOpen(lnrpc.Rpc.ChannelOpenUpdate value) {
        copyOnWrite();
        instance.setChanOpen(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
       */
      public Builder setChanOpen(
          lnrpc.Rpc.ChannelOpenUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setChanOpen(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
       */
      public Builder mergeChanOpen(lnrpc.Rpc.ChannelOpenUpdate value) {
        copyOnWrite();
        instance.mergeChanOpen(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelOpenUpdate chan_open = 3;</code>
       */
      public Builder clearChanOpen() {
        copyOnWrite();
        instance.clearChanOpen();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.OpenStatusUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.OpenStatusUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.OpenStatusUpdate other = (lnrpc.Rpc.OpenStatusUpdate) arg1;
          switch (other.getUpdateCase()) {
            case CHAN_PENDING: {
              update_ = visitor.visitOneofMessage(
                  updateCase_ == 1,
                  update_,
                  other.update_);
              break;
            }
            case CHAN_OPEN: {
              update_ = visitor.visitOneofMessage(
                  updateCase_ == 3,
                  update_,
                  other.update_);
              break;
            }
            case UPDATE_NOT_SET: {
              visitor.visitOneofNotSet(updateCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.updateCase_ != 0) {
              updateCase_ = other.updateCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.PendingUpdate.Builder subBuilder = null;
                  if (updateCase_ == 1) {
                    subBuilder = ((lnrpc.Rpc.PendingUpdate) update_).toBuilder();
                  }
                  update_ =
                       input.readMessage(lnrpc.Rpc.PendingUpdate.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.PendingUpdate) update_);
                    update_ = subBuilder.buildPartial();
                  }
                  updateCase_ = 1;
                  break;
                }
                case 26: {
                  lnrpc.Rpc.ChannelOpenUpdate.Builder subBuilder = null;
                  if (updateCase_ == 3) {
                    subBuilder = ((lnrpc.Rpc.ChannelOpenUpdate) update_).toBuilder();
                  }
                  update_ =
                       input.readMessage(lnrpc.Rpc.ChannelOpenUpdate.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.ChannelOpenUpdate) update_);
                    update_ = subBuilder.buildPartial();
                  }
                  updateCase_ = 3;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.OpenStatusUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.OpenStatusUpdate)
    private static final lnrpc.Rpc.OpenStatusUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new OpenStatusUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.OpenStatusUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<OpenStatusUpdate> PARSER;

    public static com.google.protobuf.Parser<OpenStatusUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PendingHTLCOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PendingHTLC)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The direction within the channel that the htlc was sent
     * </pre>
     *
     * <code>optional bool incoming = 1;</code>
     */
    boolean getIncoming();

    /**
     * <pre>
     *&#47; The total value of the htlc
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    long getAmount();

    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    java.lang.String getOutpoint();
    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    com.google.protobuf.ByteString
        getOutpointBytes();

    /**
     * <pre>
     *&#47; The next block height at which we can spend the current stage
     * </pre>
     *
     * <code>optional uint32 maturity_height = 4;</code>
     */
    int getMaturityHeight();

    /**
     * <pre>
     **
     *The number of blocks remaining until the current stage can be swept.
     *Negative values indicate how many blocks have passed since becoming
     *mature.
     * </pre>
     *
     * <code>optional int32 blocks_til_maturity = 5;</code>
     */
    int getBlocksTilMaturity();

    /**
     * <pre>
     *&#47; Indicates whether the htlc is in its first or second stage of recovery
     * </pre>
     *
     * <code>optional uint32 stage = 6;</code>
     */
    int getStage();
  }
  /**
   * Protobuf type {@code lnrpc.PendingHTLC}
   */
  public  static final class PendingHTLC extends
      com.google.protobuf.GeneratedMessageLite<
          PendingHTLC, PendingHTLC.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PendingHTLC)
      PendingHTLCOrBuilder {
    private PendingHTLC() {
      outpoint_ = "";
    }
    public static final int INCOMING_FIELD_NUMBER = 1;
    private boolean incoming_;
    /**
     * <pre>
     *&#47; The direction within the channel that the htlc was sent
     * </pre>
     *
     * <code>optional bool incoming = 1;</code>
     */
    public boolean getIncoming() {
      return incoming_;
    }
    /**
     * <pre>
     *&#47; The direction within the channel that the htlc was sent
     * </pre>
     *
     * <code>optional bool incoming = 1;</code>
     */
    private void setIncoming(boolean value) {
      
      incoming_ = value;
    }
    /**
     * <pre>
     *&#47; The direction within the channel that the htlc was sent
     * </pre>
     *
     * <code>optional bool incoming = 1;</code>
     */
    private void clearIncoming() {
      
      incoming_ = false;
    }

    public static final int AMOUNT_FIELD_NUMBER = 2;
    private long amount_;
    /**
     * <pre>
     *&#47; The total value of the htlc
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    public long getAmount() {
      return amount_;
    }
    /**
     * <pre>
     *&#47; The total value of the htlc
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <pre>
     *&#47; The total value of the htlc
     * </pre>
     *
     * <code>optional int64 amount = 2;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static final int OUTPOINT_FIELD_NUMBER = 3;
    private java.lang.String outpoint_;
    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    public java.lang.String getOutpoint() {
      return outpoint_;
    }
    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    public com.google.protobuf.ByteString
        getOutpointBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(outpoint_);
    }
    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    private void setOutpoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      outpoint_ = value;
    }
    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    private void clearOutpoint() {
      
      outpoint_ = getDefaultInstance().getOutpoint();
    }
    /**
     * <pre>
     *&#47; The final output to be swept back to the user's wallet
     * </pre>
     *
     * <code>optional string outpoint = 3;</code>
     */
    private void setOutpointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      outpoint_ = value.toStringUtf8();
    }

    public static final int MATURITY_HEIGHT_FIELD_NUMBER = 4;
    private int maturityHeight_;
    /**
     * <pre>
     *&#47; The next block height at which we can spend the current stage
     * </pre>
     *
     * <code>optional uint32 maturity_height = 4;</code>
     */
    public int getMaturityHeight() {
      return maturityHeight_;
    }
    /**
     * <pre>
     *&#47; The next block height at which we can spend the current stage
     * </pre>
     *
     * <code>optional uint32 maturity_height = 4;</code>
     */
    private void setMaturityHeight(int value) {
      
      maturityHeight_ = value;
    }
    /**
     * <pre>
     *&#47; The next block height at which we can spend the current stage
     * </pre>
     *
     * <code>optional uint32 maturity_height = 4;</code>
     */
    private void clearMaturityHeight() {
      
      maturityHeight_ = 0;
    }

    public static final int BLOCKS_TIL_MATURITY_FIELD_NUMBER = 5;
    private int blocksTilMaturity_;
    /**
     * <pre>
     **
     *The number of blocks remaining until the current stage can be swept.
     *Negative values indicate how many blocks have passed since becoming
     *mature.
     * </pre>
     *
     * <code>optional int32 blocks_til_maturity = 5;</code>
     */
    public int getBlocksTilMaturity() {
      return blocksTilMaturity_;
    }
    /**
     * <pre>
     **
     *The number of blocks remaining until the current stage can be swept.
     *Negative values indicate how many blocks have passed since becoming
     *mature.
     * </pre>
     *
     * <code>optional int32 blocks_til_maturity = 5;</code>
     */
    private void setBlocksTilMaturity(int value) {
      
      blocksTilMaturity_ = value;
    }
    /**
     * <pre>
     **
     *The number of blocks remaining until the current stage can be swept.
     *Negative values indicate how many blocks have passed since becoming
     *mature.
     * </pre>
     *
     * <code>optional int32 blocks_til_maturity = 5;</code>
     */
    private void clearBlocksTilMaturity() {
      
      blocksTilMaturity_ = 0;
    }

    public static final int STAGE_FIELD_NUMBER = 6;
    private int stage_;
    /**
     * <pre>
     *&#47; Indicates whether the htlc is in its first or second stage of recovery
     * </pre>
     *
     * <code>optional uint32 stage = 6;</code>
     */
    public int getStage() {
      return stage_;
    }
    /**
     * <pre>
     *&#47; Indicates whether the htlc is in its first or second stage of recovery
     * </pre>
     *
     * <code>optional uint32 stage = 6;</code>
     */
    private void setStage(int value) {
      
      stage_ = value;
    }
    /**
     * <pre>
     *&#47; Indicates whether the htlc is in its first or second stage of recovery
     * </pre>
     *
     * <code>optional uint32 stage = 6;</code>
     */
    private void clearStage() {
      
      stage_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (incoming_ != false) {
        output.writeBool(1, incoming_);
      }
      if (amount_ != 0L) {
        output.writeInt64(2, amount_);
      }
      if (!outpoint_.isEmpty()) {
        output.writeString(3, getOutpoint());
      }
      if (maturityHeight_ != 0) {
        output.writeUInt32(4, maturityHeight_);
      }
      if (blocksTilMaturity_ != 0) {
        output.writeInt32(5, blocksTilMaturity_);
      }
      if (stage_ != 0) {
        output.writeUInt32(6, stage_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (incoming_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, incoming_);
      }
      if (amount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, amount_);
      }
      if (!outpoint_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getOutpoint());
      }
      if (maturityHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maturityHeight_);
      }
      if (blocksTilMaturity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, blocksTilMaturity_);
      }
      if (stage_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, stage_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PendingHTLC parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingHTLC parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingHTLC parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingHTLC parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PendingHTLC prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PendingHTLC}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PendingHTLC, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PendingHTLC)
        lnrpc.Rpc.PendingHTLCOrBuilder {
      // Construct using lnrpc.Rpc.PendingHTLC.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The direction within the channel that the htlc was sent
       * </pre>
       *
       * <code>optional bool incoming = 1;</code>
       */
      public boolean getIncoming() {
        return instance.getIncoming();
      }
      /**
       * <pre>
       *&#47; The direction within the channel that the htlc was sent
       * </pre>
       *
       * <code>optional bool incoming = 1;</code>
       */
      public Builder setIncoming(boolean value) {
        copyOnWrite();
        instance.setIncoming(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The direction within the channel that the htlc was sent
       * </pre>
       *
       * <code>optional bool incoming = 1;</code>
       */
      public Builder clearIncoming() {
        copyOnWrite();
        instance.clearIncoming();
        return this;
      }

      /**
       * <pre>
       *&#47; The total value of the htlc
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <pre>
       *&#47; The total value of the htlc
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total value of the htlc
       * </pre>
       *
       * <code>optional int64 amount = 2;</code>
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      /**
       * <pre>
       *&#47; The final output to be swept back to the user's wallet
       * </pre>
       *
       * <code>optional string outpoint = 3;</code>
       */
      public java.lang.String getOutpoint() {
        return instance.getOutpoint();
      }
      /**
       * <pre>
       *&#47; The final output to be swept back to the user's wallet
       * </pre>
       *
       * <code>optional string outpoint = 3;</code>
       */
      public com.google.protobuf.ByteString
          getOutpointBytes() {
        return instance.getOutpointBytes();
      }
      /**
       * <pre>
       *&#47; The final output to be swept back to the user's wallet
       * </pre>
       *
       * <code>optional string outpoint = 3;</code>
       */
      public Builder setOutpoint(
          java.lang.String value) {
        copyOnWrite();
        instance.setOutpoint(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The final output to be swept back to the user's wallet
       * </pre>
       *
       * <code>optional string outpoint = 3;</code>
       */
      public Builder clearOutpoint() {
        copyOnWrite();
        instance.clearOutpoint();
        return this;
      }
      /**
       * <pre>
       *&#47; The final output to be swept back to the user's wallet
       * </pre>
       *
       * <code>optional string outpoint = 3;</code>
       */
      public Builder setOutpointBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOutpointBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The next block height at which we can spend the current stage
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      public int getMaturityHeight() {
        return instance.getMaturityHeight();
      }
      /**
       * <pre>
       *&#47; The next block height at which we can spend the current stage
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      public Builder setMaturityHeight(int value) {
        copyOnWrite();
        instance.setMaturityHeight(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The next block height at which we can spend the current stage
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      public Builder clearMaturityHeight() {
        copyOnWrite();
        instance.clearMaturityHeight();
        return this;
      }

      /**
       * <pre>
       **
       *The number of blocks remaining until the current stage can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      public int getBlocksTilMaturity() {
        return instance.getBlocksTilMaturity();
      }
      /**
       * <pre>
       **
       *The number of blocks remaining until the current stage can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      public Builder setBlocksTilMaturity(int value) {
        copyOnWrite();
        instance.setBlocksTilMaturity(value);
        return this;
      }
      /**
       * <pre>
       **
       *The number of blocks remaining until the current stage can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      public Builder clearBlocksTilMaturity() {
        copyOnWrite();
        instance.clearBlocksTilMaturity();
        return this;
      }

      /**
       * <pre>
       *&#47; Indicates whether the htlc is in its first or second stage of recovery
       * </pre>
       *
       * <code>optional uint32 stage = 6;</code>
       */
      public int getStage() {
        return instance.getStage();
      }
      /**
       * <pre>
       *&#47; Indicates whether the htlc is in its first or second stage of recovery
       * </pre>
       *
       * <code>optional uint32 stage = 6;</code>
       */
      public Builder setStage(int value) {
        copyOnWrite();
        instance.setStage(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Indicates whether the htlc is in its first or second stage of recovery
       * </pre>
       *
       * <code>optional uint32 stage = 6;</code>
       */
      public Builder clearStage() {
        copyOnWrite();
        instance.clearStage();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PendingHTLC)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PendingHTLC();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PendingHTLC other = (lnrpc.Rpc.PendingHTLC) arg1;
          incoming_ = visitor.visitBoolean(incoming_ != false, incoming_,
              other.incoming_ != false, other.incoming_);
          amount_ = visitor.visitLong(amount_ != 0L, amount_,
              other.amount_ != 0L, other.amount_);
          outpoint_ = visitor.visitString(!outpoint_.isEmpty(), outpoint_,
              !other.outpoint_.isEmpty(), other.outpoint_);
          maturityHeight_ = visitor.visitInt(maturityHeight_ != 0, maturityHeight_,
              other.maturityHeight_ != 0, other.maturityHeight_);
          blocksTilMaturity_ = visitor.visitInt(blocksTilMaturity_ != 0, blocksTilMaturity_,
              other.blocksTilMaturity_ != 0, other.blocksTilMaturity_);
          stage_ = visitor.visitInt(stage_ != 0, stage_,
              other.stage_ != 0, other.stage_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  incoming_ = input.readBool();
                  break;
                }
                case 16: {

                  amount_ = input.readInt64();
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  outpoint_ = s;
                  break;
                }
                case 32: {

                  maturityHeight_ = input.readUInt32();
                  break;
                }
                case 40: {

                  blocksTilMaturity_ = input.readInt32();
                  break;
                }
                case 48: {

                  stage_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingHTLC.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PendingHTLC)
    private static final lnrpc.Rpc.PendingHTLC DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PendingHTLC();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PendingHTLC getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PendingHTLC> PARSER;

    public static com.google.protobuf.Parser<PendingHTLC> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PendingChannelsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.PendingChannelsRequest}
   */
  public  static final class PendingChannelsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          PendingChannelsRequest, PendingChannelsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsRequest)
      PendingChannelsRequestOrBuilder {
    private PendingChannelsRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingChannelsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PendingChannelsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PendingChannelsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PendingChannelsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsRequest)
        lnrpc.Rpc.PendingChannelsRequestOrBuilder {
      // Construct using lnrpc.Rpc.PendingChannelsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PendingChannelsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PendingChannelsRequest other = (lnrpc.Rpc.PendingChannelsRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsRequest)
    private static final lnrpc.Rpc.PendingChannelsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PendingChannelsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PendingChannelsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PendingChannelsRequest> PARSER;

    public static com.google.protobuf.Parser<PendingChannelsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PendingChannelsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The balance in satoshis encumbered in pending channels
     * </pre>
     *
     * <code>optional int64 total_limbo_balance = 1;</code>
     */
    long getTotalLimboBalance();

    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    java.util.List<lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel> 
        getPendingOpenChannelsList();
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel getPendingOpenChannels(int index);
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    int getPendingOpenChannelsCount();

    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    java.util.List<lnrpc.Rpc.PendingChannelsResponse.ClosedChannel> 
        getPendingClosingChannelsList();
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    lnrpc.Rpc.PendingChannelsResponse.ClosedChannel getPendingClosingChannels(int index);
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    int getPendingClosingChannelsCount();

    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    java.util.List<lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel> 
        getPendingForceClosingChannelsList();
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel getPendingForceClosingChannels(int index);
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    int getPendingForceClosingChannelsCount();

    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    java.util.List<lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel> 
        getWaitingCloseChannelsList();
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel getWaitingCloseChannels(int index);
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    int getWaitingCloseChannelsCount();
  }
  /**
   * Protobuf type {@code lnrpc.PendingChannelsResponse}
   */
  public  static final class PendingChannelsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          PendingChannelsResponse, PendingChannelsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsResponse)
      PendingChannelsResponseOrBuilder {
    private PendingChannelsResponse() {
      pendingOpenChannels_ = emptyProtobufList();
      pendingClosingChannels_ = emptyProtobufList();
      pendingForceClosingChannels_ = emptyProtobufList();
      waitingCloseChannels_ = emptyProtobufList();
    }
    public interface PendingChannelOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsResponse.PendingChannel)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      java.lang.String getRemoteNodePub();
      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      com.google.protobuf.ByteString
          getRemoteNodePubBytes();

      /**
       * <code>optional string channel_point = 2;</code>
       */
      java.lang.String getChannelPoint();
      /**
       * <code>optional string channel_point = 2;</code>
       */
      com.google.protobuf.ByteString
          getChannelPointBytes();

      /**
       * <code>optional int64 capacity = 3;</code>
       */
      long getCapacity();

      /**
       * <code>optional int64 local_balance = 4;</code>
       */
      long getLocalBalance();

      /**
       * <code>optional int64 remote_balance = 5;</code>
       */
      long getRemoteBalance();
    }
    /**
     * Protobuf type {@code lnrpc.PendingChannelsResponse.PendingChannel}
     */
    public  static final class PendingChannel extends
        com.google.protobuf.GeneratedMessageLite<
            PendingChannel, PendingChannel.Builder> implements
        // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsResponse.PendingChannel)
        PendingChannelOrBuilder {
      private PendingChannel() {
        remoteNodePub_ = "";
        channelPoint_ = "";
      }
      public static final int REMOTE_NODE_PUB_FIELD_NUMBER = 1;
      private java.lang.String remoteNodePub_;
      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      public java.lang.String getRemoteNodePub() {
        return remoteNodePub_;
      }
      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      public com.google.protobuf.ByteString
          getRemoteNodePubBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(remoteNodePub_);
      }
      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      private void setRemoteNodePub(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        remoteNodePub_ = value;
      }
      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      private void clearRemoteNodePub() {
        
        remoteNodePub_ = getDefaultInstance().getRemoteNodePub();
      }
      /**
       * <code>optional string remote_node_pub = 1;</code>
       */
      private void setRemoteNodePubBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        remoteNodePub_ = value.toStringUtf8();
      }

      public static final int CHANNEL_POINT_FIELD_NUMBER = 2;
      private java.lang.String channelPoint_;
      /**
       * <code>optional string channel_point = 2;</code>
       */
      public java.lang.String getChannelPoint() {
        return channelPoint_;
      }
      /**
       * <code>optional string channel_point = 2;</code>
       */
      public com.google.protobuf.ByteString
          getChannelPointBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(channelPoint_);
      }
      /**
       * <code>optional string channel_point = 2;</code>
       */
      private void setChannelPoint(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        channelPoint_ = value;
      }
      /**
       * <code>optional string channel_point = 2;</code>
       */
      private void clearChannelPoint() {
        
        channelPoint_ = getDefaultInstance().getChannelPoint();
      }
      /**
       * <code>optional string channel_point = 2;</code>
       */
      private void setChannelPointBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        channelPoint_ = value.toStringUtf8();
      }

      public static final int CAPACITY_FIELD_NUMBER = 3;
      private long capacity_;
      /**
       * <code>optional int64 capacity = 3;</code>
       */
      public long getCapacity() {
        return capacity_;
      }
      /**
       * <code>optional int64 capacity = 3;</code>
       */
      private void setCapacity(long value) {
        
        capacity_ = value;
      }
      /**
       * <code>optional int64 capacity = 3;</code>
       */
      private void clearCapacity() {
        
        capacity_ = 0L;
      }

      public static final int LOCAL_BALANCE_FIELD_NUMBER = 4;
      private long localBalance_;
      /**
       * <code>optional int64 local_balance = 4;</code>
       */
      public long getLocalBalance() {
        return localBalance_;
      }
      /**
       * <code>optional int64 local_balance = 4;</code>
       */
      private void setLocalBalance(long value) {
        
        localBalance_ = value;
      }
      /**
       * <code>optional int64 local_balance = 4;</code>
       */
      private void clearLocalBalance() {
        
        localBalance_ = 0L;
      }

      public static final int REMOTE_BALANCE_FIELD_NUMBER = 5;
      private long remoteBalance_;
      /**
       * <code>optional int64 remote_balance = 5;</code>
       */
      public long getRemoteBalance() {
        return remoteBalance_;
      }
      /**
       * <code>optional int64 remote_balance = 5;</code>
       */
      private void setRemoteBalance(long value) {
        
        remoteBalance_ = value;
      }
      /**
       * <code>optional int64 remote_balance = 5;</code>
       */
      private void clearRemoteBalance() {
        
        remoteBalance_ = 0L;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!remoteNodePub_.isEmpty()) {
          output.writeString(1, getRemoteNodePub());
        }
        if (!channelPoint_.isEmpty()) {
          output.writeString(2, getChannelPoint());
        }
        if (capacity_ != 0L) {
          output.writeInt64(3, capacity_);
        }
        if (localBalance_ != 0L) {
          output.writeInt64(4, localBalance_);
        }
        if (remoteBalance_ != 0L) {
          output.writeInt64(5, remoteBalance_);
        }
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (!remoteNodePub_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(1, getRemoteNodePub());
        }
        if (!channelPoint_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getChannelPoint());
        }
        if (capacity_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, capacity_);
        }
        if (localBalance_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, localBalance_);
        }
        if (remoteBalance_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(5, remoteBalance_);
        }
        memoizedSerializedSize = size;
        return size;
      }

      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lnrpc.Rpc.PendingChannelsResponse.PendingChannel prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code lnrpc.PendingChannelsResponse.PendingChannel}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel, Builder> implements
          // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsResponse.PendingChannel)
          lnrpc.Rpc.PendingChannelsResponse.PendingChannelOrBuilder {
        // Construct using lnrpc.Rpc.PendingChannelsResponse.PendingChannel.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <code>optional string remote_node_pub = 1;</code>
         */
        public java.lang.String getRemoteNodePub() {
          return instance.getRemoteNodePub();
        }
        /**
         * <code>optional string remote_node_pub = 1;</code>
         */
        public com.google.protobuf.ByteString
            getRemoteNodePubBytes() {
          return instance.getRemoteNodePubBytes();
        }
        /**
         * <code>optional string remote_node_pub = 1;</code>
         */
        public Builder setRemoteNodePub(
            java.lang.String value) {
          copyOnWrite();
          instance.setRemoteNodePub(value);
          return this;
        }
        /**
         * <code>optional string remote_node_pub = 1;</code>
         */
        public Builder clearRemoteNodePub() {
          copyOnWrite();
          instance.clearRemoteNodePub();
          return this;
        }
        /**
         * <code>optional string remote_node_pub = 1;</code>
         */
        public Builder setRemoteNodePubBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setRemoteNodePubBytes(value);
          return this;
        }

        /**
         * <code>optional string channel_point = 2;</code>
         */
        public java.lang.String getChannelPoint() {
          return instance.getChannelPoint();
        }
        /**
         * <code>optional string channel_point = 2;</code>
         */
        public com.google.protobuf.ByteString
            getChannelPointBytes() {
          return instance.getChannelPointBytes();
        }
        /**
         * <code>optional string channel_point = 2;</code>
         */
        public Builder setChannelPoint(
            java.lang.String value) {
          copyOnWrite();
          instance.setChannelPoint(value);
          return this;
        }
        /**
         * <code>optional string channel_point = 2;</code>
         */
        public Builder clearChannelPoint() {
          copyOnWrite();
          instance.clearChannelPoint();
          return this;
        }
        /**
         * <code>optional string channel_point = 2;</code>
         */
        public Builder setChannelPointBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setChannelPointBytes(value);
          return this;
        }

        /**
         * <code>optional int64 capacity = 3;</code>
         */
        public long getCapacity() {
          return instance.getCapacity();
        }
        /**
         * <code>optional int64 capacity = 3;</code>
         */
        public Builder setCapacity(long value) {
          copyOnWrite();
          instance.setCapacity(value);
          return this;
        }
        /**
         * <code>optional int64 capacity = 3;</code>
         */
        public Builder clearCapacity() {
          copyOnWrite();
          instance.clearCapacity();
          return this;
        }

        /**
         * <code>optional int64 local_balance = 4;</code>
         */
        public long getLocalBalance() {
          return instance.getLocalBalance();
        }
        /**
         * <code>optional int64 local_balance = 4;</code>
         */
        public Builder setLocalBalance(long value) {
          copyOnWrite();
          instance.setLocalBalance(value);
          return this;
        }
        /**
         * <code>optional int64 local_balance = 4;</code>
         */
        public Builder clearLocalBalance() {
          copyOnWrite();
          instance.clearLocalBalance();
          return this;
        }

        /**
         * <code>optional int64 remote_balance = 5;</code>
         */
        public long getRemoteBalance() {
          return instance.getRemoteBalance();
        }
        /**
         * <code>optional int64 remote_balance = 5;</code>
         */
        public Builder setRemoteBalance(long value) {
          copyOnWrite();
          instance.setRemoteBalance(value);
          return this;
        }
        /**
         * <code>optional int64 remote_balance = 5;</code>
         */
        public Builder clearRemoteBalance() {
          copyOnWrite();
          instance.clearRemoteBalance();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsResponse.PendingChannel)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new lnrpc.Rpc.PendingChannelsResponse.PendingChannel();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel other = (lnrpc.Rpc.PendingChannelsResponse.PendingChannel) arg1;
            remoteNodePub_ = visitor.visitString(!remoteNodePub_.isEmpty(), remoteNodePub_,
                !other.remoteNodePub_.isEmpty(), other.remoteNodePub_);
            channelPoint_ = visitor.visitString(!channelPoint_.isEmpty(), channelPoint_,
                !other.channelPoint_.isEmpty(), other.channelPoint_);
            capacity_ = visitor.visitLong(capacity_ != 0L, capacity_,
                other.capacity_ != 0L, other.capacity_);
            localBalance_ = visitor.visitLong(localBalance_ != 0L, localBalance_,
                other.localBalance_ != 0L, other.localBalance_);
            remoteBalance_ = visitor.visitLong(remoteBalance_ != 0L, remoteBalance_,
                other.remoteBalance_ != 0L, other.remoteBalance_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!input.skipField(tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    String s = input.readStringRequireUtf8();

                    remoteNodePub_ = s;
                    break;
                  }
                  case 18: {
                    String s = input.readStringRequireUtf8();

                    channelPoint_ = s;
                    break;
                  }
                  case 24: {

                    capacity_ = input.readInt64();
                    break;
                  }
                  case 32: {

                    localBalance_ = input.readInt64();
                    break;
                  }
                  case 40: {

                    remoteBalance_ = input.readInt64();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsResponse.PendingChannel.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.PendingChannel)
      private static final lnrpc.Rpc.PendingChannelsResponse.PendingChannel DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new PendingChannel();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static lnrpc.Rpc.PendingChannelsResponse.PendingChannel getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PendingChannel> PARSER;

      public static com.google.protobuf.Parser<PendingChannel> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface PendingOpenChannelOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsResponse.PendingOpenChannel)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      boolean hasChannel();
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel();

      /**
       * <pre>
       *&#47; The height at which this channel will be confirmed
       * </pre>
       *
       * <code>optional uint32 confirmation_height = 2;</code>
       */
      int getConfirmationHeight();

      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of
       *commitment transactions. The fee amount is persisted with the channel
       *in order to allow the fee amount to be removed and recalculated with
       *each channel state update, including updates that happen after a system
       *restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 4;</code>
       */
      long getCommitFee();

      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 5;</code>
       */
      long getCommitWeight();

      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will
       *pay at all times, for both the funding transaction and commitment
       *transaction. This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 6;</code>
       */
      long getFeePerKw();
    }
    /**
     * Protobuf type {@code lnrpc.PendingChannelsResponse.PendingOpenChannel}
     */
    public  static final class PendingOpenChannel extends
        com.google.protobuf.GeneratedMessageLite<
            PendingOpenChannel, PendingOpenChannel.Builder> implements
        // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsResponse.PendingOpenChannel)
        PendingOpenChannelOrBuilder {
      private PendingOpenChannel() {
      }
      public static final int CHANNEL_FIELD_NUMBER = 1;
      private lnrpc.Rpc.PendingChannelsResponse.PendingChannel channel_;
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public boolean hasChannel() {
        return channel_ != null;
      }
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
        return channel_ == null ? lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance() : channel_;
      }
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        channel_ = value;
        
        }
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(
          lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
        channel_ = builderForValue.build();
        
      }
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (channel_ != null &&
            channel_ != lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance()) {
          channel_ =
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.newBuilder(channel_).mergeFrom(value).buildPartial();
        } else {
          channel_ = value;
        }
        
      }
      /**
       * <pre>
       *&#47; The pending channel
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void clearChannel() {  channel_ = null;
        
      }

      public static final int CONFIRMATION_HEIGHT_FIELD_NUMBER = 2;
      private int confirmationHeight_;
      /**
       * <pre>
       *&#47; The height at which this channel will be confirmed
       * </pre>
       *
       * <code>optional uint32 confirmation_height = 2;</code>
       */
      public int getConfirmationHeight() {
        return confirmationHeight_;
      }
      /**
       * <pre>
       *&#47; The height at which this channel will be confirmed
       * </pre>
       *
       * <code>optional uint32 confirmation_height = 2;</code>
       */
      private void setConfirmationHeight(int value) {
        
        confirmationHeight_ = value;
      }
      /**
       * <pre>
       *&#47; The height at which this channel will be confirmed
       * </pre>
       *
       * <code>optional uint32 confirmation_height = 2;</code>
       */
      private void clearConfirmationHeight() {
        
        confirmationHeight_ = 0;
      }

      public static final int COMMIT_FEE_FIELD_NUMBER = 4;
      private long commitFee_;
      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of
       *commitment transactions. The fee amount is persisted with the channel
       *in order to allow the fee amount to be removed and recalculated with
       *each channel state update, including updates that happen after a system
       *restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 4;</code>
       */
      public long getCommitFee() {
        return commitFee_;
      }
      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of
       *commitment transactions. The fee amount is persisted with the channel
       *in order to allow the fee amount to be removed and recalculated with
       *each channel state update, including updates that happen after a system
       *restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 4;</code>
       */
      private void setCommitFee(long value) {
        
        commitFee_ = value;
      }
      /**
       * <pre>
       **
       *The amount calculated to be paid in fees for the current set of
       *commitment transactions. The fee amount is persisted with the channel
       *in order to allow the fee amount to be removed and recalculated with
       *each channel state update, including updates that happen after a system
       *restart.
       * </pre>
       *
       * <code>optional int64 commit_fee = 4;</code>
       */
      private void clearCommitFee() {
        
        commitFee_ = 0L;
      }

      public static final int COMMIT_WEIGHT_FIELD_NUMBER = 5;
      private long commitWeight_;
      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 5;</code>
       */
      public long getCommitWeight() {
        return commitWeight_;
      }
      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 5;</code>
       */
      private void setCommitWeight(long value) {
        
        commitWeight_ = value;
      }
      /**
       * <pre>
       *&#47; The weight of the commitment transaction
       * </pre>
       *
       * <code>optional int64 commit_weight = 5;</code>
       */
      private void clearCommitWeight() {
        
        commitWeight_ = 0L;
      }

      public static final int FEE_PER_KW_FIELD_NUMBER = 6;
      private long feePerKw_;
      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will
       *pay at all times, for both the funding transaction and commitment
       *transaction. This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 6;</code>
       */
      public long getFeePerKw() {
        return feePerKw_;
      }
      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will
       *pay at all times, for both the funding transaction and commitment
       *transaction. This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 6;</code>
       */
      private void setFeePerKw(long value) {
        
        feePerKw_ = value;
      }
      /**
       * <pre>
       **
       *The required number of satoshis per kilo-weight that the requester will
       *pay at all times, for both the funding transaction and commitment
       *transaction. This value can later be updated once the channel is open.
       * </pre>
       *
       * <code>optional int64 fee_per_kw = 6;</code>
       */
      private void clearFeePerKw() {
        
        feePerKw_ = 0L;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (channel_ != null) {
          output.writeMessage(1, getChannel());
        }
        if (confirmationHeight_ != 0) {
          output.writeUInt32(2, confirmationHeight_);
        }
        if (commitFee_ != 0L) {
          output.writeInt64(4, commitFee_);
        }
        if (commitWeight_ != 0L) {
          output.writeInt64(5, commitWeight_);
        }
        if (feePerKw_ != 0L) {
          output.writeInt64(6, feePerKw_);
        }
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (channel_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getChannel());
        }
        if (confirmationHeight_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(2, confirmationHeight_);
        }
        if (commitFee_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(4, commitFee_);
        }
        if (commitWeight_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(5, commitWeight_);
        }
        if (feePerKw_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(6, feePerKw_);
        }
        memoizedSerializedSize = size;
        return size;
      }

      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code lnrpc.PendingChannelsResponse.PendingOpenChannel}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel, Builder> implements
          // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsResponse.PendingOpenChannel)
          lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannelOrBuilder {
        // Construct using lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         *&#47; The pending channel
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public boolean hasChannel() {
          return instance.hasChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
          return instance.getChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.setChannel(value);
          return this;
          }
        /**
         * <pre>
         *&#47; The pending channel
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
          copyOnWrite();
          instance.setChannel(builderForValue);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.mergeChannel(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder clearChannel() {  copyOnWrite();
          instance.clearChannel();
          return this;
        }

        /**
         * <pre>
         *&#47; The height at which this channel will be confirmed
         * </pre>
         *
         * <code>optional uint32 confirmation_height = 2;</code>
         */
        public int getConfirmationHeight() {
          return instance.getConfirmationHeight();
        }
        /**
         * <pre>
         *&#47; The height at which this channel will be confirmed
         * </pre>
         *
         * <code>optional uint32 confirmation_height = 2;</code>
         */
        public Builder setConfirmationHeight(int value) {
          copyOnWrite();
          instance.setConfirmationHeight(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The height at which this channel will be confirmed
         * </pre>
         *
         * <code>optional uint32 confirmation_height = 2;</code>
         */
        public Builder clearConfirmationHeight() {
          copyOnWrite();
          instance.clearConfirmationHeight();
          return this;
        }

        /**
         * <pre>
         **
         *The amount calculated to be paid in fees for the current set of
         *commitment transactions. The fee amount is persisted with the channel
         *in order to allow the fee amount to be removed and recalculated with
         *each channel state update, including updates that happen after a system
         *restart.
         * </pre>
         *
         * <code>optional int64 commit_fee = 4;</code>
         */
        public long getCommitFee() {
          return instance.getCommitFee();
        }
        /**
         * <pre>
         **
         *The amount calculated to be paid in fees for the current set of
         *commitment transactions. The fee amount is persisted with the channel
         *in order to allow the fee amount to be removed and recalculated with
         *each channel state update, including updates that happen after a system
         *restart.
         * </pre>
         *
         * <code>optional int64 commit_fee = 4;</code>
         */
        public Builder setCommitFee(long value) {
          copyOnWrite();
          instance.setCommitFee(value);
          return this;
        }
        /**
         * <pre>
         **
         *The amount calculated to be paid in fees for the current set of
         *commitment transactions. The fee amount is persisted with the channel
         *in order to allow the fee amount to be removed and recalculated with
         *each channel state update, including updates that happen after a system
         *restart.
         * </pre>
         *
         * <code>optional int64 commit_fee = 4;</code>
         */
        public Builder clearCommitFee() {
          copyOnWrite();
          instance.clearCommitFee();
          return this;
        }

        /**
         * <pre>
         *&#47; The weight of the commitment transaction
         * </pre>
         *
         * <code>optional int64 commit_weight = 5;</code>
         */
        public long getCommitWeight() {
          return instance.getCommitWeight();
        }
        /**
         * <pre>
         *&#47; The weight of the commitment transaction
         * </pre>
         *
         * <code>optional int64 commit_weight = 5;</code>
         */
        public Builder setCommitWeight(long value) {
          copyOnWrite();
          instance.setCommitWeight(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The weight of the commitment transaction
         * </pre>
         *
         * <code>optional int64 commit_weight = 5;</code>
         */
        public Builder clearCommitWeight() {
          copyOnWrite();
          instance.clearCommitWeight();
          return this;
        }

        /**
         * <pre>
         **
         *The required number of satoshis per kilo-weight that the requester will
         *pay at all times, for both the funding transaction and commitment
         *transaction. This value can later be updated once the channel is open.
         * </pre>
         *
         * <code>optional int64 fee_per_kw = 6;</code>
         */
        public long getFeePerKw() {
          return instance.getFeePerKw();
        }
        /**
         * <pre>
         **
         *The required number of satoshis per kilo-weight that the requester will
         *pay at all times, for both the funding transaction and commitment
         *transaction. This value can later be updated once the channel is open.
         * </pre>
         *
         * <code>optional int64 fee_per_kw = 6;</code>
         */
        public Builder setFeePerKw(long value) {
          copyOnWrite();
          instance.setFeePerKw(value);
          return this;
        }
        /**
         * <pre>
         **
         *The required number of satoshis per kilo-weight that the requester will
         *pay at all times, for both the funding transaction and commitment
         *transaction. This value can later be updated once the channel is open.
         * </pre>
         *
         * <code>optional int64 fee_per_kw = 6;</code>
         */
        public Builder clearFeePerKw() {
          copyOnWrite();
          instance.clearFeePerKw();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsResponse.PendingOpenChannel)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel other = (lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel) arg1;
            channel_ = visitor.visitMessage(channel_, other.channel_);
            confirmationHeight_ = visitor.visitInt(confirmationHeight_ != 0, confirmationHeight_,
                other.confirmationHeight_ != 0, other.confirmationHeight_);
            commitFee_ = visitor.visitLong(commitFee_ != 0L, commitFee_,
                other.commitFee_ != 0L, other.commitFee_);
            commitWeight_ = visitor.visitLong(commitWeight_ != 0L, commitWeight_,
                other.commitWeight_ != 0L, other.commitWeight_);
            feePerKw_ = visitor.visitLong(feePerKw_ != 0L, feePerKw_,
                other.feePerKw_ != 0L, other.feePerKw_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!input.skipField(tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder subBuilder = null;
                    if (channel_ != null) {
                      subBuilder = channel_.toBuilder();
                    }
                    channel_ = input.readMessage(lnrpc.Rpc.PendingChannelsResponse.PendingChannel.parser(), extensionRegistry);
                    if (subBuilder != null) {
                      subBuilder.mergeFrom(channel_);
                      channel_ = subBuilder.buildPartial();
                    }

                    break;
                  }
                  case 16: {

                    confirmationHeight_ = input.readUInt32();
                    break;
                  }
                  case 32: {

                    commitFee_ = input.readInt64();
                    break;
                  }
                  case 40: {

                    commitWeight_ = input.readInt64();
                    break;
                  }
                  case 48: {

                    feePerKw_ = input.readInt64();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.PendingOpenChannel)
      private static final lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new PendingOpenChannel();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<PendingOpenChannel> PARSER;

      public static com.google.protobuf.Parser<PendingOpenChannel> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface WaitingCloseChannelOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      boolean hasChannel();
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel();

      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 2;</code>
       */
      long getLimboBalance();
    }
    /**
     * Protobuf type {@code lnrpc.PendingChannelsResponse.WaitingCloseChannel}
     */
    public  static final class WaitingCloseChannel extends
        com.google.protobuf.GeneratedMessageLite<
            WaitingCloseChannel, WaitingCloseChannel.Builder> implements
        // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
        WaitingCloseChannelOrBuilder {
      private WaitingCloseChannel() {
      }
      public static final int CHANNEL_FIELD_NUMBER = 1;
      private lnrpc.Rpc.PendingChannelsResponse.PendingChannel channel_;
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public boolean hasChannel() {
        return channel_ != null;
      }
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
        return channel_ == null ? lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance() : channel_;
      }
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        channel_ = value;
        
        }
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(
          lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
        channel_ = builderForValue.build();
        
      }
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (channel_ != null &&
            channel_ != lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance()) {
          channel_ =
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.newBuilder(channel_).mergeFrom(value).buildPartial();
        } else {
          channel_ = value;
        }
        
      }
      /**
       * <pre>
       *&#47; The pending channel waiting for closing tx to confirm
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void clearChannel() {  channel_ = null;
        
      }

      public static final int LIMBO_BALANCE_FIELD_NUMBER = 2;
      private long limboBalance_;
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 2;</code>
       */
      public long getLimboBalance() {
        return limboBalance_;
      }
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 2;</code>
       */
      private void setLimboBalance(long value) {
        
        limboBalance_ = value;
      }
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 2;</code>
       */
      private void clearLimboBalance() {
        
        limboBalance_ = 0L;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (channel_ != null) {
          output.writeMessage(1, getChannel());
        }
        if (limboBalance_ != 0L) {
          output.writeInt64(2, limboBalance_);
        }
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (channel_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getChannel());
        }
        if (limboBalance_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, limboBalance_);
        }
        memoizedSerializedSize = size;
        return size;
      }

      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code lnrpc.PendingChannelsResponse.WaitingCloseChannel}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel, Builder> implements
          // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
          lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannelOrBuilder {
        // Construct using lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         *&#47; The pending channel waiting for closing tx to confirm
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public boolean hasChannel() {
          return instance.hasChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel waiting for closing tx to confirm
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
          return instance.getChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel waiting for closing tx to confirm
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.setChannel(value);
          return this;
          }
        /**
         * <pre>
         *&#47; The pending channel waiting for closing tx to confirm
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
          copyOnWrite();
          instance.setChannel(builderForValue);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel waiting for closing tx to confirm
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.mergeChannel(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel waiting for closing tx to confirm
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder clearChannel() {  copyOnWrite();
          instance.clearChannel();
          return this;
        }

        /**
         * <pre>
         *&#47; The balance in satoshis encumbered in this channel
         * </pre>
         *
         * <code>optional int64 limbo_balance = 2;</code>
         */
        public long getLimboBalance() {
          return instance.getLimboBalance();
        }
        /**
         * <pre>
         *&#47; The balance in satoshis encumbered in this channel
         * </pre>
         *
         * <code>optional int64 limbo_balance = 2;</code>
         */
        public Builder setLimboBalance(long value) {
          copyOnWrite();
          instance.setLimboBalance(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The balance in satoshis encumbered in this channel
         * </pre>
         *
         * <code>optional int64 limbo_balance = 2;</code>
         */
        public Builder clearLimboBalance() {
          copyOnWrite();
          instance.clearLimboBalance();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel other = (lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel) arg1;
            channel_ = visitor.visitMessage(channel_, other.channel_);
            limboBalance_ = visitor.visitLong(limboBalance_ != 0L, limboBalance_,
                other.limboBalance_ != 0L, other.limboBalance_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!input.skipField(tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder subBuilder = null;
                    if (channel_ != null) {
                      subBuilder = channel_.toBuilder();
                    }
                    channel_ = input.readMessage(lnrpc.Rpc.PendingChannelsResponse.PendingChannel.parser(), extensionRegistry);
                    if (subBuilder != null) {
                      subBuilder.mergeFrom(channel_);
                      channel_ = subBuilder.buildPartial();
                    }

                    break;
                  }
                  case 16: {

                    limboBalance_ = input.readInt64();
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
      private static final lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new WaitingCloseChannel();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<WaitingCloseChannel> PARSER;

      public static com.google.protobuf.Parser<WaitingCloseChannel> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface ClosedChannelOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsResponse.ClosedChannel)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      boolean hasChannel();
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel();

      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      java.lang.String getClosingTxid();
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      com.google.protobuf.ByteString
          getClosingTxidBytes();
    }
    /**
     * Protobuf type {@code lnrpc.PendingChannelsResponse.ClosedChannel}
     */
    public  static final class ClosedChannel extends
        com.google.protobuf.GeneratedMessageLite<
            ClosedChannel, ClosedChannel.Builder> implements
        // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsResponse.ClosedChannel)
        ClosedChannelOrBuilder {
      private ClosedChannel() {
        closingTxid_ = "";
      }
      public static final int CHANNEL_FIELD_NUMBER = 1;
      private lnrpc.Rpc.PendingChannelsResponse.PendingChannel channel_;
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public boolean hasChannel() {
        return channel_ != null;
      }
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
        return channel_ == null ? lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance() : channel_;
      }
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        channel_ = value;
        
        }
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(
          lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
        channel_ = builderForValue.build();
        
      }
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (channel_ != null &&
            channel_ != lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance()) {
          channel_ =
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.newBuilder(channel_).mergeFrom(value).buildPartial();
        } else {
          channel_ = value;
        }
        
      }
      /**
       * <pre>
       *&#47; The pending channel to be closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void clearChannel() {  channel_ = null;
        
      }

      public static final int CLOSING_TXID_FIELD_NUMBER = 2;
      private java.lang.String closingTxid_;
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      public java.lang.String getClosingTxid() {
        return closingTxid_;
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      public com.google.protobuf.ByteString
          getClosingTxidBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(closingTxid_);
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      private void setClosingTxid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        closingTxid_ = value;
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      private void clearClosingTxid() {
        
        closingTxid_ = getDefaultInstance().getClosingTxid();
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      private void setClosingTxidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        closingTxid_ = value.toStringUtf8();
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (channel_ != null) {
          output.writeMessage(1, getChannel());
        }
        if (!closingTxid_.isEmpty()) {
          output.writeString(2, getClosingTxid());
        }
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (channel_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getChannel());
        }
        if (!closingTxid_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getClosingTxid());
        }
        memoizedSerializedSize = size;
        return size;
      }

      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lnrpc.Rpc.PendingChannelsResponse.ClosedChannel prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code lnrpc.PendingChannelsResponse.ClosedChannel}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            lnrpc.Rpc.PendingChannelsResponse.ClosedChannel, Builder> implements
          // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsResponse.ClosedChannel)
          lnrpc.Rpc.PendingChannelsResponse.ClosedChannelOrBuilder {
        // Construct using lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         *&#47; The pending channel to be closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public boolean hasChannel() {
          return instance.hasChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel to be closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
          return instance.getChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel to be closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.setChannel(value);
          return this;
          }
        /**
         * <pre>
         *&#47; The pending channel to be closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
          copyOnWrite();
          instance.setChannel(builderForValue);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel to be closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.mergeChannel(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel to be closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder clearChannel() {  copyOnWrite();
          instance.clearChannel();
          return this;
        }

        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public java.lang.String getClosingTxid() {
          return instance.getClosingTxid();
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public com.google.protobuf.ByteString
            getClosingTxidBytes() {
          return instance.getClosingTxidBytes();
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public Builder setClosingTxid(
            java.lang.String value) {
          copyOnWrite();
          instance.setClosingTxid(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public Builder clearClosingTxid() {
          copyOnWrite();
          instance.clearClosingTxid();
          return this;
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public Builder setClosingTxidBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setClosingTxidBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsResponse.ClosedChannel)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new lnrpc.Rpc.PendingChannelsResponse.ClosedChannel();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            lnrpc.Rpc.PendingChannelsResponse.ClosedChannel other = (lnrpc.Rpc.PendingChannelsResponse.ClosedChannel) arg1;
            channel_ = visitor.visitMessage(channel_, other.channel_);
            closingTxid_ = visitor.visitString(!closingTxid_.isEmpty(), closingTxid_,
                !other.closingTxid_.isEmpty(), other.closingTxid_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!input.skipField(tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder subBuilder = null;
                    if (channel_ != null) {
                      subBuilder = channel_.toBuilder();
                    }
                    channel_ = input.readMessage(lnrpc.Rpc.PendingChannelsResponse.PendingChannel.parser(), extensionRegistry);
                    if (subBuilder != null) {
                      subBuilder.mergeFrom(channel_);
                      channel_ = subBuilder.buildPartial();
                    }

                    break;
                  }
                  case 18: {
                    String s = input.readStringRequireUtf8();

                    closingTxid_ = s;
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.ClosedChannel)
      private static final lnrpc.Rpc.PendingChannelsResponse.ClosedChannel DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new ClosedChannel();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static lnrpc.Rpc.PendingChannelsResponse.ClosedChannel getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<ClosedChannel> PARSER;

      public static com.google.protobuf.Parser<ClosedChannel> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface ForceClosedChannelOrBuilder extends
        // @@protoc_insertion_point(interface_extends:lnrpc.PendingChannelsResponse.ForceClosedChannel)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      boolean hasChannel();
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel();

      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      java.lang.String getClosingTxid();
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      com.google.protobuf.ByteString
          getClosingTxidBytes();

      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this pending channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 3;</code>
       */
      long getLimboBalance();

      /**
       * <pre>
       *&#47; The height at which funds can be sweeped into the wallet
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      int getMaturityHeight();

      /**
       * <pre>
       *Remaining # of blocks until the commitment output can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      int getBlocksTilMaturity();

      /**
       * <pre>
       *&#47; The total value of funds successfully recovered from this channel
       * </pre>
       *
       * <code>optional int64 recovered_balance = 6;</code>
       */
      long getRecoveredBalance();

      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      java.util.List<lnrpc.Rpc.PendingHTLC> 
          getPendingHtlcsList();
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      lnrpc.Rpc.PendingHTLC getPendingHtlcs(int index);
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      int getPendingHtlcsCount();
    }
    /**
     * Protobuf type {@code lnrpc.PendingChannelsResponse.ForceClosedChannel}
     */
    public  static final class ForceClosedChannel extends
        com.google.protobuf.GeneratedMessageLite<
            ForceClosedChannel, ForceClosedChannel.Builder> implements
        // @@protoc_insertion_point(message_implements:lnrpc.PendingChannelsResponse.ForceClosedChannel)
        ForceClosedChannelOrBuilder {
      private ForceClosedChannel() {
        closingTxid_ = "";
        pendingHtlcs_ = emptyProtobufList();
      }
      private int bitField0_;
      public static final int CHANNEL_FIELD_NUMBER = 1;
      private lnrpc.Rpc.PendingChannelsResponse.PendingChannel channel_;
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public boolean hasChannel() {
        return channel_ != null;
      }
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
        return channel_ == null ? lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance() : channel_;
      }
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        channel_ = value;
        
        }
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void setChannel(
          lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
        channel_ = builderForValue.build();
        
      }
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
        if (channel_ != null &&
            channel_ != lnrpc.Rpc.PendingChannelsResponse.PendingChannel.getDefaultInstance()) {
          channel_ =
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.newBuilder(channel_).mergeFrom(value).buildPartial();
        } else {
          channel_ = value;
        }
        
      }
      /**
       * <pre>
       *&#47; The pending channel to be force closed
       * </pre>
       *
       * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
       */
      private void clearChannel() {  channel_ = null;
        
      }

      public static final int CLOSING_TXID_FIELD_NUMBER = 2;
      private java.lang.String closingTxid_;
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      public java.lang.String getClosingTxid() {
        return closingTxid_;
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      public com.google.protobuf.ByteString
          getClosingTxidBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(closingTxid_);
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      private void setClosingTxid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        closingTxid_ = value;
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      private void clearClosingTxid() {
        
        closingTxid_ = getDefaultInstance().getClosingTxid();
      }
      /**
       * <pre>
       *&#47; The transaction id of the closing transaction
       * </pre>
       *
       * <code>optional string closing_txid = 2;</code>
       */
      private void setClosingTxidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        closingTxid_ = value.toStringUtf8();
      }

      public static final int LIMBO_BALANCE_FIELD_NUMBER = 3;
      private long limboBalance_;
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this pending channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 3;</code>
       */
      public long getLimboBalance() {
        return limboBalance_;
      }
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this pending channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 3;</code>
       */
      private void setLimboBalance(long value) {
        
        limboBalance_ = value;
      }
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in this pending channel
       * </pre>
       *
       * <code>optional int64 limbo_balance = 3;</code>
       */
      private void clearLimboBalance() {
        
        limboBalance_ = 0L;
      }

      public static final int MATURITY_HEIGHT_FIELD_NUMBER = 4;
      private int maturityHeight_;
      /**
       * <pre>
       *&#47; The height at which funds can be sweeped into the wallet
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      public int getMaturityHeight() {
        return maturityHeight_;
      }
      /**
       * <pre>
       *&#47; The height at which funds can be sweeped into the wallet
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      private void setMaturityHeight(int value) {
        
        maturityHeight_ = value;
      }
      /**
       * <pre>
       *&#47; The height at which funds can be sweeped into the wallet
       * </pre>
       *
       * <code>optional uint32 maturity_height = 4;</code>
       */
      private void clearMaturityHeight() {
        
        maturityHeight_ = 0;
      }

      public static final int BLOCKS_TIL_MATURITY_FIELD_NUMBER = 5;
      private int blocksTilMaturity_;
      /**
       * <pre>
       *Remaining # of blocks until the commitment output can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      public int getBlocksTilMaturity() {
        return blocksTilMaturity_;
      }
      /**
       * <pre>
       *Remaining # of blocks until the commitment output can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      private void setBlocksTilMaturity(int value) {
        
        blocksTilMaturity_ = value;
      }
      /**
       * <pre>
       *Remaining # of blocks until the commitment output can be swept.
       *Negative values indicate how many blocks have passed since becoming
       *mature.
       * </pre>
       *
       * <code>optional int32 blocks_til_maturity = 5;</code>
       */
      private void clearBlocksTilMaturity() {
        
        blocksTilMaturity_ = 0;
      }

      public static final int RECOVERED_BALANCE_FIELD_NUMBER = 6;
      private long recoveredBalance_;
      /**
       * <pre>
       *&#47; The total value of funds successfully recovered from this channel
       * </pre>
       *
       * <code>optional int64 recovered_balance = 6;</code>
       */
      public long getRecoveredBalance() {
        return recoveredBalance_;
      }
      /**
       * <pre>
       *&#47; The total value of funds successfully recovered from this channel
       * </pre>
       *
       * <code>optional int64 recovered_balance = 6;</code>
       */
      private void setRecoveredBalance(long value) {
        
        recoveredBalance_ = value;
      }
      /**
       * <pre>
       *&#47; The total value of funds successfully recovered from this channel
       * </pre>
       *
       * <code>optional int64 recovered_balance = 6;</code>
       */
      private void clearRecoveredBalance() {
        
        recoveredBalance_ = 0L;
      }

      public static final int PENDING_HTLCS_FIELD_NUMBER = 8;
      private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.PendingHTLC> pendingHtlcs_;
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      public java.util.List<lnrpc.Rpc.PendingHTLC> getPendingHtlcsList() {
        return pendingHtlcs_;
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      public java.util.List<? extends lnrpc.Rpc.PendingHTLCOrBuilder> 
          getPendingHtlcsOrBuilderList() {
        return pendingHtlcs_;
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      public int getPendingHtlcsCount() {
        return pendingHtlcs_.size();
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      public lnrpc.Rpc.PendingHTLC getPendingHtlcs(int index) {
        return pendingHtlcs_.get(index);
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      public lnrpc.Rpc.PendingHTLCOrBuilder getPendingHtlcsOrBuilder(
          int index) {
        return pendingHtlcs_.get(index);
      }
      private void ensurePendingHtlcsIsMutable() {
        if (!pendingHtlcs_.isModifiable()) {
          pendingHtlcs_ =
              com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingHtlcs_);
         }
      }

      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void setPendingHtlcs(
          int index, lnrpc.Rpc.PendingHTLC value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.set(index, value);
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void setPendingHtlcs(
          int index, lnrpc.Rpc.PendingHTLC.Builder builderForValue) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.set(index, builderForValue.build());
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void addPendingHtlcs(lnrpc.Rpc.PendingHTLC value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(value);
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void addPendingHtlcs(
          int index, lnrpc.Rpc.PendingHTLC value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(index, value);
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void addPendingHtlcs(
          lnrpc.Rpc.PendingHTLC.Builder builderForValue) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(builderForValue.build());
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void addPendingHtlcs(
          int index, lnrpc.Rpc.PendingHTLC.Builder builderForValue) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.add(index, builderForValue.build());
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void addAllPendingHtlcs(
          java.lang.Iterable<? extends lnrpc.Rpc.PendingHTLC> values) {
        ensurePendingHtlcsIsMutable();
        com.google.protobuf.AbstractMessageLite.addAll(
            values, pendingHtlcs_);
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void clearPendingHtlcs() {
        pendingHtlcs_ = emptyProtobufList();
      }
      /**
       * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
       */
      private void removePendingHtlcs(int index) {
        ensurePendingHtlcsIsMutable();
        pendingHtlcs_.remove(index);
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (channel_ != null) {
          output.writeMessage(1, getChannel());
        }
        if (!closingTxid_.isEmpty()) {
          output.writeString(2, getClosingTxid());
        }
        if (limboBalance_ != 0L) {
          output.writeInt64(3, limboBalance_);
        }
        if (maturityHeight_ != 0) {
          output.writeUInt32(4, maturityHeight_);
        }
        if (blocksTilMaturity_ != 0) {
          output.writeInt32(5, blocksTilMaturity_);
        }
        if (recoveredBalance_ != 0L) {
          output.writeInt64(6, recoveredBalance_);
        }
        for (int i = 0; i < pendingHtlcs_.size(); i++) {
          output.writeMessage(8, pendingHtlcs_.get(i));
        }
      }

      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (channel_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, getChannel());
        }
        if (!closingTxid_.isEmpty()) {
          size += com.google.protobuf.CodedOutputStream
            .computeStringSize(2, getClosingTxid());
        }
        if (limboBalance_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(3, limboBalance_);
        }
        if (maturityHeight_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32Size(4, maturityHeight_);
        }
        if (blocksTilMaturity_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(5, blocksTilMaturity_);
        }
        if (recoveredBalance_ != 0L) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(6, recoveredBalance_);
        }
        for (int i = 0; i < pendingHtlcs_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, pendingHtlcs_.get(i));
        }
        memoizedSerializedSize = size;
        return size;
      }

      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      /**
       * Protobuf type {@code lnrpc.PendingChannelsResponse.ForceClosedChannel}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel, Builder> implements
          // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsResponse.ForceClosedChannel)
          lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannelOrBuilder {
        // Construct using lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         *&#47; The pending channel to be force closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public boolean hasChannel() {
          return instance.hasChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel to be force closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public lnrpc.Rpc.PendingChannelsResponse.PendingChannel getChannel() {
          return instance.getChannel();
        }
        /**
         * <pre>
         *&#47; The pending channel to be force closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.setChannel(value);
          return this;
          }
        /**
         * <pre>
         *&#47; The pending channel to be force closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder setChannel(
            lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder builderForValue) {
          copyOnWrite();
          instance.setChannel(builderForValue);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel to be force closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder mergeChannel(lnrpc.Rpc.PendingChannelsResponse.PendingChannel value) {
          copyOnWrite();
          instance.mergeChannel(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The pending channel to be force closed
         * </pre>
         *
         * <code>optional .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;</code>
         */
        public Builder clearChannel() {  copyOnWrite();
          instance.clearChannel();
          return this;
        }

        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public java.lang.String getClosingTxid() {
          return instance.getClosingTxid();
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public com.google.protobuf.ByteString
            getClosingTxidBytes() {
          return instance.getClosingTxidBytes();
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public Builder setClosingTxid(
            java.lang.String value) {
          copyOnWrite();
          instance.setClosingTxid(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public Builder clearClosingTxid() {
          copyOnWrite();
          instance.clearClosingTxid();
          return this;
        }
        /**
         * <pre>
         *&#47; The transaction id of the closing transaction
         * </pre>
         *
         * <code>optional string closing_txid = 2;</code>
         */
        public Builder setClosingTxidBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setClosingTxidBytes(value);
          return this;
        }

        /**
         * <pre>
         *&#47; The balance in satoshis encumbered in this pending channel
         * </pre>
         *
         * <code>optional int64 limbo_balance = 3;</code>
         */
        public long getLimboBalance() {
          return instance.getLimboBalance();
        }
        /**
         * <pre>
         *&#47; The balance in satoshis encumbered in this pending channel
         * </pre>
         *
         * <code>optional int64 limbo_balance = 3;</code>
         */
        public Builder setLimboBalance(long value) {
          copyOnWrite();
          instance.setLimboBalance(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The balance in satoshis encumbered in this pending channel
         * </pre>
         *
         * <code>optional int64 limbo_balance = 3;</code>
         */
        public Builder clearLimboBalance() {
          copyOnWrite();
          instance.clearLimboBalance();
          return this;
        }

        /**
         * <pre>
         *&#47; The height at which funds can be sweeped into the wallet
         * </pre>
         *
         * <code>optional uint32 maturity_height = 4;</code>
         */
        public int getMaturityHeight() {
          return instance.getMaturityHeight();
        }
        /**
         * <pre>
         *&#47; The height at which funds can be sweeped into the wallet
         * </pre>
         *
         * <code>optional uint32 maturity_height = 4;</code>
         */
        public Builder setMaturityHeight(int value) {
          copyOnWrite();
          instance.setMaturityHeight(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The height at which funds can be sweeped into the wallet
         * </pre>
         *
         * <code>optional uint32 maturity_height = 4;</code>
         */
        public Builder clearMaturityHeight() {
          copyOnWrite();
          instance.clearMaturityHeight();
          return this;
        }

        /**
         * <pre>
         *Remaining # of blocks until the commitment output can be swept.
         *Negative values indicate how many blocks have passed since becoming
         *mature.
         * </pre>
         *
         * <code>optional int32 blocks_til_maturity = 5;</code>
         */
        public int getBlocksTilMaturity() {
          return instance.getBlocksTilMaturity();
        }
        /**
         * <pre>
         *Remaining # of blocks until the commitment output can be swept.
         *Negative values indicate how many blocks have passed since becoming
         *mature.
         * </pre>
         *
         * <code>optional int32 blocks_til_maturity = 5;</code>
         */
        public Builder setBlocksTilMaturity(int value) {
          copyOnWrite();
          instance.setBlocksTilMaturity(value);
          return this;
        }
        /**
         * <pre>
         *Remaining # of blocks until the commitment output can be swept.
         *Negative values indicate how many blocks have passed since becoming
         *mature.
         * </pre>
         *
         * <code>optional int32 blocks_til_maturity = 5;</code>
         */
        public Builder clearBlocksTilMaturity() {
          copyOnWrite();
          instance.clearBlocksTilMaturity();
          return this;
        }

        /**
         * <pre>
         *&#47; The total value of funds successfully recovered from this channel
         * </pre>
         *
         * <code>optional int64 recovered_balance = 6;</code>
         */
        public long getRecoveredBalance() {
          return instance.getRecoveredBalance();
        }
        /**
         * <pre>
         *&#47; The total value of funds successfully recovered from this channel
         * </pre>
         *
         * <code>optional int64 recovered_balance = 6;</code>
         */
        public Builder setRecoveredBalance(long value) {
          copyOnWrite();
          instance.setRecoveredBalance(value);
          return this;
        }
        /**
         * <pre>
         *&#47; The total value of funds successfully recovered from this channel
         * </pre>
         *
         * <code>optional int64 recovered_balance = 6;</code>
         */
        public Builder clearRecoveredBalance() {
          copyOnWrite();
          instance.clearRecoveredBalance();
          return this;
        }

        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public java.util.List<lnrpc.Rpc.PendingHTLC> getPendingHtlcsList() {
          return java.util.Collections.unmodifiableList(
              instance.getPendingHtlcsList());
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public int getPendingHtlcsCount() {
          return instance.getPendingHtlcsCount();
        }/**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public lnrpc.Rpc.PendingHTLC getPendingHtlcs(int index) {
          return instance.getPendingHtlcs(index);
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder setPendingHtlcs(
            int index, lnrpc.Rpc.PendingHTLC value) {
          copyOnWrite();
          instance.setPendingHtlcs(index, value);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder setPendingHtlcs(
            int index, lnrpc.Rpc.PendingHTLC.Builder builderForValue) {
          copyOnWrite();
          instance.setPendingHtlcs(index, builderForValue);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder addPendingHtlcs(lnrpc.Rpc.PendingHTLC value) {
          copyOnWrite();
          instance.addPendingHtlcs(value);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder addPendingHtlcs(
            int index, lnrpc.Rpc.PendingHTLC value) {
          copyOnWrite();
          instance.addPendingHtlcs(index, value);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder addPendingHtlcs(
            lnrpc.Rpc.PendingHTLC.Builder builderForValue) {
          copyOnWrite();
          instance.addPendingHtlcs(builderForValue);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder addPendingHtlcs(
            int index, lnrpc.Rpc.PendingHTLC.Builder builderForValue) {
          copyOnWrite();
          instance.addPendingHtlcs(index, builderForValue);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder addAllPendingHtlcs(
            java.lang.Iterable<? extends lnrpc.Rpc.PendingHTLC> values) {
          copyOnWrite();
          instance.addAllPendingHtlcs(values);
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder clearPendingHtlcs() {
          copyOnWrite();
          instance.clearPendingHtlcs();
          return this;
        }
        /**
         * <code>repeated .lnrpc.PendingHTLC pending_htlcs = 8;</code>
         */
        public Builder removePendingHtlcs(int index) {
          copyOnWrite();
          instance.removePendingHtlcs(index);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsResponse.ForceClosedChannel)
      }
      protected final Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          Object arg0, Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel();
          }
          case IS_INITIALIZED: {
            return DEFAULT_INSTANCE;
          }
          case MAKE_IMMUTABLE: {
            pendingHtlcs_.makeImmutable();
            return null;
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case VISIT: {
            Visitor visitor = (Visitor) arg0;
            lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel other = (lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel) arg1;
            channel_ = visitor.visitMessage(channel_, other.channel_);
            closingTxid_ = visitor.visitString(!closingTxid_.isEmpty(), closingTxid_,
                !other.closingTxid_.isEmpty(), other.closingTxid_);
            limboBalance_ = visitor.visitLong(limboBalance_ != 0L, limboBalance_,
                other.limboBalance_ != 0L, other.limboBalance_);
            maturityHeight_ = visitor.visitInt(maturityHeight_ != 0, maturityHeight_,
                other.maturityHeight_ != 0, other.maturityHeight_);
            blocksTilMaturity_ = visitor.visitInt(blocksTilMaturity_ != 0, blocksTilMaturity_,
                other.blocksTilMaturity_ != 0, other.blocksTilMaturity_);
            recoveredBalance_ = visitor.visitLong(recoveredBalance_ != 0L, recoveredBalance_,
                other.recoveredBalance_ != 0L, other.recoveredBalance_);
            pendingHtlcs_= visitor.visitList(pendingHtlcs_, other.pendingHtlcs_);
            if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                .INSTANCE) {
              bitField0_ |= other.bitField0_;
            }
            return this;
          }
          case MERGE_FROM_STREAM: {
            com.google.protobuf.CodedInputStream input =
                (com.google.protobuf.CodedInputStream) arg0;
            com.google.protobuf.ExtensionRegistryLite extensionRegistry =
                (com.google.protobuf.ExtensionRegistryLite) arg1;
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  default: {
                    if (!input.skipField(tag)) {
                      done = true;
                    }
                    break;
                  }
                  case 10: {
                    lnrpc.Rpc.PendingChannelsResponse.PendingChannel.Builder subBuilder = null;
                    if (channel_ != null) {
                      subBuilder = channel_.toBuilder();
                    }
                    channel_ = input.readMessage(lnrpc.Rpc.PendingChannelsResponse.PendingChannel.parser(), extensionRegistry);
                    if (subBuilder != null) {
                      subBuilder.mergeFrom(channel_);
                      channel_ = subBuilder.buildPartial();
                    }

                    break;
                  }
                  case 18: {
                    String s = input.readStringRequireUtf8();

                    closingTxid_ = s;
                    break;
                  }
                  case 24: {

                    limboBalance_ = input.readInt64();
                    break;
                  }
                  case 32: {

                    maturityHeight_ = input.readUInt32();
                    break;
                  }
                  case 40: {

                    blocksTilMaturity_ = input.readInt32();
                    break;
                  }
                  case 48: {

                    recoveredBalance_ = input.readInt64();
                    break;
                  }
                  case 66: {
                    if (!pendingHtlcs_.isModifiable()) {
                      pendingHtlcs_ =
                          com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingHtlcs_);
                    }
                    pendingHtlcs_.add(
                        input.readMessage(lnrpc.Rpc.PendingHTLC.parser(), extensionRegistry));
                    break;
                  }
                }
              }
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw new RuntimeException(e.setUnfinishedMessage(this));
            } catch (java.io.IOException e) {
              throw new RuntimeException(
                  new com.google.protobuf.InvalidProtocolBufferException(
                      e.getMessage()).setUnfinishedMessage(this));
            } finally {
            }
          }
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.class) {
                if (PARSER == null) {
                  PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                }
              }
            }
            return PARSER;
          }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.ForceClosedChannel)
      private static final lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new ForceClosedChannel();
        DEFAULT_INSTANCE.makeImmutable();
      }

      public static lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<ForceClosedChannel> PARSER;

      public static com.google.protobuf.Parser<ForceClosedChannel> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int bitField0_;
    public static final int TOTAL_LIMBO_BALANCE_FIELD_NUMBER = 1;
    private long totalLimboBalance_;
    /**
     * <pre>
     *&#47; The balance in satoshis encumbered in pending channels
     * </pre>
     *
     * <code>optional int64 total_limbo_balance = 1;</code>
     */
    public long getTotalLimboBalance() {
      return totalLimboBalance_;
    }
    /**
     * <pre>
     *&#47; The balance in satoshis encumbered in pending channels
     * </pre>
     *
     * <code>optional int64 total_limbo_balance = 1;</code>
     */
    private void setTotalLimboBalance(long value) {
      
      totalLimboBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The balance in satoshis encumbered in pending channels
     * </pre>
     *
     * <code>optional int64 total_limbo_balance = 1;</code>
     */
    private void clearTotalLimboBalance() {
      
      totalLimboBalance_ = 0L;
    }

    public static final int PENDING_OPEN_CHANNELS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel> pendingOpenChannels_;
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    public java.util.List<lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel> getPendingOpenChannelsList() {
      return pendingOpenChannels_;
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannelOrBuilder> 
        getPendingOpenChannelsOrBuilderList() {
      return pendingOpenChannels_;
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    public int getPendingOpenChannelsCount() {
      return pendingOpenChannels_.size();
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel getPendingOpenChannels(int index) {
      return pendingOpenChannels_.get(index);
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannelOrBuilder getPendingOpenChannelsOrBuilder(
        int index) {
      return pendingOpenChannels_.get(index);
    }
    private void ensurePendingOpenChannelsIsMutable() {
      if (!pendingOpenChannels_.isModifiable()) {
        pendingOpenChannels_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingOpenChannels_);
       }
    }

    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void setPendingOpenChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.set(index, value);
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void setPendingOpenChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.Builder builderForValue) {
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void addPendingOpenChannels(lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.add(value);
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void addPendingOpenChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.add(index, value);
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void addPendingOpenChannels(
        lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.Builder builderForValue) {
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void addPendingOpenChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.Builder builderForValue) {
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void addAllPendingOpenChannels(
        java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel> values) {
      ensurePendingOpenChannelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pendingOpenChannels_);
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void clearPendingOpenChannels() {
      pendingOpenChannels_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; Channels pending opening
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
     */
    private void removePendingOpenChannels(int index) {
      ensurePendingOpenChannelsIsMutable();
      pendingOpenChannels_.remove(index);
    }

    public static final int PENDING_CLOSING_CHANNELS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.PendingChannelsResponse.ClosedChannel> pendingClosingChannels_;
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    public java.util.List<lnrpc.Rpc.PendingChannelsResponse.ClosedChannel> getPendingClosingChannelsList() {
      return pendingClosingChannels_;
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.PendingChannelsResponse.ClosedChannelOrBuilder> 
        getPendingClosingChannelsOrBuilderList() {
      return pendingClosingChannels_;
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    public int getPendingClosingChannelsCount() {
      return pendingClosingChannels_.size();
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.ClosedChannel getPendingClosingChannels(int index) {
      return pendingClosingChannels_.get(index);
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.ClosedChannelOrBuilder getPendingClosingChannelsOrBuilder(
        int index) {
      return pendingClosingChannels_.get(index);
    }
    private void ensurePendingClosingChannelsIsMutable() {
      if (!pendingClosingChannels_.isModifiable()) {
        pendingClosingChannels_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingClosingChannels_);
       }
    }

    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void setPendingClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.set(index, value);
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void setPendingClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.Builder builderForValue) {
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void addPendingClosingChannels(lnrpc.Rpc.PendingChannelsResponse.ClosedChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.add(value);
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void addPendingClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.add(index, value);
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void addPendingClosingChannels(
        lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.Builder builderForValue) {
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void addPendingClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.Builder builderForValue) {
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void addAllPendingClosingChannels(
        java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.ClosedChannel> values) {
      ensurePendingClosingChannelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pendingClosingChannels_);
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void clearPendingClosingChannels() {
      pendingClosingChannels_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; Channels pending closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
     */
    private void removePendingClosingChannels(int index) {
      ensurePendingClosingChannelsIsMutable();
      pendingClosingChannels_.remove(index);
    }

    public static final int PENDING_FORCE_CLOSING_CHANNELS_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel> pendingForceClosingChannels_;
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    public java.util.List<lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel> getPendingForceClosingChannelsList() {
      return pendingForceClosingChannels_;
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannelOrBuilder> 
        getPendingForceClosingChannelsOrBuilderList() {
      return pendingForceClosingChannels_;
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    public int getPendingForceClosingChannelsCount() {
      return pendingForceClosingChannels_.size();
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel getPendingForceClosingChannels(int index) {
      return pendingForceClosingChannels_.get(index);
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannelOrBuilder getPendingForceClosingChannelsOrBuilder(
        int index) {
      return pendingForceClosingChannels_.get(index);
    }
    private void ensurePendingForceClosingChannelsIsMutable() {
      if (!pendingForceClosingChannels_.isModifiable()) {
        pendingForceClosingChannels_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingForceClosingChannels_);
       }
    }

    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void setPendingForceClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.set(index, value);
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void setPendingForceClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.Builder builderForValue) {
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void addPendingForceClosingChannels(lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.add(value);
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void addPendingForceClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.add(index, value);
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void addPendingForceClosingChannels(
        lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.Builder builderForValue) {
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void addPendingForceClosingChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.Builder builderForValue) {
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void addAllPendingForceClosingChannels(
        java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel> values) {
      ensurePendingForceClosingChannelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, pendingForceClosingChannels_);
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void clearPendingForceClosingChannels() {
      pendingForceClosingChannels_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; Channels pending force closing
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
     */
    private void removePendingForceClosingChannels(int index) {
      ensurePendingForceClosingChannelsIsMutable();
      pendingForceClosingChannels_.remove(index);
    }

    public static final int WAITING_CLOSE_CHANNELS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel> waitingCloseChannels_;
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    public java.util.List<lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel> getWaitingCloseChannelsList() {
      return waitingCloseChannels_;
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannelOrBuilder> 
        getWaitingCloseChannelsOrBuilderList() {
      return waitingCloseChannels_;
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    public int getWaitingCloseChannelsCount() {
      return waitingCloseChannels_.size();
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel getWaitingCloseChannels(int index) {
      return waitingCloseChannels_.get(index);
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    public lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannelOrBuilder getWaitingCloseChannelsOrBuilder(
        int index) {
      return waitingCloseChannels_.get(index);
    }
    private void ensureWaitingCloseChannelsIsMutable() {
      if (!waitingCloseChannels_.isModifiable()) {
        waitingCloseChannels_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(waitingCloseChannels_);
       }
    }

    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void setWaitingCloseChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.set(index, value);
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void setWaitingCloseChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.Builder builderForValue) {
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void addWaitingCloseChannels(lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.add(value);
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void addWaitingCloseChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.add(index, value);
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void addWaitingCloseChannels(
        lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.Builder builderForValue) {
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void addWaitingCloseChannels(
        int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.Builder builderForValue) {
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void addAllWaitingCloseChannels(
        java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel> values) {
      ensureWaitingCloseChannelsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, waitingCloseChannels_);
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void clearWaitingCloseChannels() {
      waitingCloseChannels_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; Channels waiting for closing tx to confirm
     * </pre>
     *
     * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
     */
    private void removeWaitingCloseChannels(int index) {
      ensureWaitingCloseChannelsIsMutable();
      waitingCloseChannels_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (totalLimboBalance_ != 0L) {
        output.writeInt64(1, totalLimboBalance_);
      }
      for (int i = 0; i < pendingOpenChannels_.size(); i++) {
        output.writeMessage(2, pendingOpenChannels_.get(i));
      }
      for (int i = 0; i < pendingClosingChannels_.size(); i++) {
        output.writeMessage(3, pendingClosingChannels_.get(i));
      }
      for (int i = 0; i < pendingForceClosingChannels_.size(); i++) {
        output.writeMessage(4, pendingForceClosingChannels_.get(i));
      }
      for (int i = 0; i < waitingCloseChannels_.size(); i++) {
        output.writeMessage(5, waitingCloseChannels_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (totalLimboBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, totalLimboBalance_);
      }
      for (int i = 0; i < pendingOpenChannels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, pendingOpenChannels_.get(i));
      }
      for (int i = 0; i < pendingClosingChannels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, pendingClosingChannels_.get(i));
      }
      for (int i = 0; i < pendingForceClosingChannels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, pendingForceClosingChannels_.get(i));
      }
      for (int i = 0; i < waitingCloseChannels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, waitingCloseChannels_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PendingChannelsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PendingChannelsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PendingChannelsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PendingChannelsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PendingChannelsResponse)
        lnrpc.Rpc.PendingChannelsResponseOrBuilder {
      // Construct using lnrpc.Rpc.PendingChannelsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in pending channels
       * </pre>
       *
       * <code>optional int64 total_limbo_balance = 1;</code>
       */
      public long getTotalLimboBalance() {
        return instance.getTotalLimboBalance();
      }
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in pending channels
       * </pre>
       *
       * <code>optional int64 total_limbo_balance = 1;</code>
       */
      public Builder setTotalLimboBalance(long value) {
        copyOnWrite();
        instance.setTotalLimboBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The balance in satoshis encumbered in pending channels
       * </pre>
       *
       * <code>optional int64 total_limbo_balance = 1;</code>
       */
      public Builder clearTotalLimboBalance() {
        copyOnWrite();
        instance.clearTotalLimboBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public java.util.List<lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel> getPendingOpenChannelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPendingOpenChannelsList());
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public int getPendingOpenChannelsCount() {
        return instance.getPendingOpenChannelsCount();
      }/**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel getPendingOpenChannels(int index) {
        return instance.getPendingOpenChannels(index);
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder setPendingOpenChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel value) {
        copyOnWrite();
        instance.setPendingOpenChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder setPendingOpenChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.Builder builderForValue) {
        copyOnWrite();
        instance.setPendingOpenChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder addPendingOpenChannels(lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel value) {
        copyOnWrite();
        instance.addPendingOpenChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder addPendingOpenChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel value) {
        copyOnWrite();
        instance.addPendingOpenChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder addPendingOpenChannels(
          lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingOpenChannels(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder addPendingOpenChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingOpenChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder addAllPendingOpenChannels(
          java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel> values) {
        copyOnWrite();
        instance.addAllPendingOpenChannels(values);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder clearPendingOpenChannels() {
        copyOnWrite();
        instance.clearPendingOpenChannels();
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending opening
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;</code>
       */
      public Builder removePendingOpenChannels(int index) {
        copyOnWrite();
        instance.removePendingOpenChannels(index);
        return this;
      }

      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public java.util.List<lnrpc.Rpc.PendingChannelsResponse.ClosedChannel> getPendingClosingChannelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPendingClosingChannelsList());
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public int getPendingClosingChannelsCount() {
        return instance.getPendingClosingChannelsCount();
      }/**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.ClosedChannel getPendingClosingChannels(int index) {
        return instance.getPendingClosingChannels(index);
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder setPendingClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel value) {
        copyOnWrite();
        instance.setPendingClosingChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder setPendingClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.Builder builderForValue) {
        copyOnWrite();
        instance.setPendingClosingChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder addPendingClosingChannels(lnrpc.Rpc.PendingChannelsResponse.ClosedChannel value) {
        copyOnWrite();
        instance.addPendingClosingChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder addPendingClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel value) {
        copyOnWrite();
        instance.addPendingClosingChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder addPendingClosingChannels(
          lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingClosingChannels(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder addPendingClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingClosingChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder addAllPendingClosingChannels(
          java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.ClosedChannel> values) {
        copyOnWrite();
        instance.addAllPendingClosingChannels(values);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder clearPendingClosingChannels() {
        copyOnWrite();
        instance.clearPendingClosingChannels();
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3;</code>
       */
      public Builder removePendingClosingChannels(int index) {
        copyOnWrite();
        instance.removePendingClosingChannels(index);
        return this;
      }

      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public java.util.List<lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel> getPendingForceClosingChannelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPendingForceClosingChannelsList());
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public int getPendingForceClosingChannelsCount() {
        return instance.getPendingForceClosingChannelsCount();
      }/**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel getPendingForceClosingChannels(int index) {
        return instance.getPendingForceClosingChannels(index);
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder setPendingForceClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel value) {
        copyOnWrite();
        instance.setPendingForceClosingChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder setPendingForceClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.Builder builderForValue) {
        copyOnWrite();
        instance.setPendingForceClosingChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder addPendingForceClosingChannels(lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel value) {
        copyOnWrite();
        instance.addPendingForceClosingChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder addPendingForceClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel value) {
        copyOnWrite();
        instance.addPendingForceClosingChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder addPendingForceClosingChannels(
          lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingForceClosingChannels(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder addPendingForceClosingChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addPendingForceClosingChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder addAllPendingForceClosingChannels(
          java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel> values) {
        copyOnWrite();
        instance.addAllPendingForceClosingChannels(values);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder clearPendingForceClosingChannels() {
        copyOnWrite();
        instance.clearPendingForceClosingChannels();
        return this;
      }
      /**
       * <pre>
       *&#47; Channels pending force closing
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;</code>
       */
      public Builder removePendingForceClosingChannels(int index) {
        copyOnWrite();
        instance.removePendingForceClosingChannels(index);
        return this;
      }

      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public java.util.List<lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel> getWaitingCloseChannelsList() {
        return java.util.Collections.unmodifiableList(
            instance.getWaitingCloseChannelsList());
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public int getWaitingCloseChannelsCount() {
        return instance.getWaitingCloseChannelsCount();
      }/**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel getWaitingCloseChannels(int index) {
        return instance.getWaitingCloseChannels(index);
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder setWaitingCloseChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel value) {
        copyOnWrite();
        instance.setWaitingCloseChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder setWaitingCloseChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.Builder builderForValue) {
        copyOnWrite();
        instance.setWaitingCloseChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder addWaitingCloseChannels(lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel value) {
        copyOnWrite();
        instance.addWaitingCloseChannels(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder addWaitingCloseChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel value) {
        copyOnWrite();
        instance.addWaitingCloseChannels(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder addWaitingCloseChannels(
          lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addWaitingCloseChannels(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder addWaitingCloseChannels(
          int index, lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.Builder builderForValue) {
        copyOnWrite();
        instance.addWaitingCloseChannels(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder addAllWaitingCloseChannels(
          java.lang.Iterable<? extends lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel> values) {
        copyOnWrite();
        instance.addAllWaitingCloseChannels(values);
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder clearWaitingCloseChannels() {
        copyOnWrite();
        instance.clearWaitingCloseChannels();
        return this;
      }
      /**
       * <pre>
       *&#47; Channels waiting for closing tx to confirm
       * </pre>
       *
       * <code>repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;</code>
       */
      public Builder removeWaitingCloseChannels(int index) {
        copyOnWrite();
        instance.removeWaitingCloseChannels(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PendingChannelsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PendingChannelsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          pendingOpenChannels_.makeImmutable();
          pendingClosingChannels_.makeImmutable();
          pendingForceClosingChannels_.makeImmutable();
          waitingCloseChannels_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PendingChannelsResponse other = (lnrpc.Rpc.PendingChannelsResponse) arg1;
          totalLimboBalance_ = visitor.visitLong(totalLimboBalance_ != 0L, totalLimboBalance_,
              other.totalLimboBalance_ != 0L, other.totalLimboBalance_);
          pendingOpenChannels_= visitor.visitList(pendingOpenChannels_, other.pendingOpenChannels_);
          pendingClosingChannels_= visitor.visitList(pendingClosingChannels_, other.pendingClosingChannels_);
          pendingForceClosingChannels_= visitor.visitList(pendingForceClosingChannels_, other.pendingForceClosingChannels_);
          waitingCloseChannels_= visitor.visitList(waitingCloseChannels_, other.waitingCloseChannels_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  totalLimboBalance_ = input.readInt64();
                  break;
                }
                case 18: {
                  if (!pendingOpenChannels_.isModifiable()) {
                    pendingOpenChannels_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingOpenChannels_);
                  }
                  pendingOpenChannels_.add(
                      input.readMessage(lnrpc.Rpc.PendingChannelsResponse.PendingOpenChannel.parser(), extensionRegistry));
                  break;
                }
                case 26: {
                  if (!pendingClosingChannels_.isModifiable()) {
                    pendingClosingChannels_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingClosingChannels_);
                  }
                  pendingClosingChannels_.add(
                      input.readMessage(lnrpc.Rpc.PendingChannelsResponse.ClosedChannel.parser(), extensionRegistry));
                  break;
                }
                case 34: {
                  if (!pendingForceClosingChannels_.isModifiable()) {
                    pendingForceClosingChannels_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(pendingForceClosingChannels_);
                  }
                  pendingForceClosingChannels_.add(
                      input.readMessage(lnrpc.Rpc.PendingChannelsResponse.ForceClosedChannel.parser(), extensionRegistry));
                  break;
                }
                case 42: {
                  if (!waitingCloseChannels_.isModifiable()) {
                    waitingCloseChannels_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(waitingCloseChannels_);
                  }
                  waitingCloseChannels_.add(
                      input.readMessage(lnrpc.Rpc.PendingChannelsResponse.WaitingCloseChannel.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PendingChannelsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse)
    private static final lnrpc.Rpc.PendingChannelsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PendingChannelsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PendingChannelsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PendingChannelsResponse> PARSER;

    public static com.google.protobuf.Parser<PendingChannelsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelEventSubscriptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelEventSubscription)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.ChannelEventSubscription}
   */
  public  static final class ChannelEventSubscription extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelEventSubscription, ChannelEventSubscription.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelEventSubscription)
      ChannelEventSubscriptionOrBuilder {
    private ChannelEventSubscription() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEventSubscription parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelEventSubscription prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelEventSubscription}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelEventSubscription, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelEventSubscription)
        lnrpc.Rpc.ChannelEventSubscriptionOrBuilder {
      // Construct using lnrpc.Rpc.ChannelEventSubscription.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelEventSubscription)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelEventSubscription();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelEventSubscription other = (lnrpc.Rpc.ChannelEventSubscription) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelEventSubscription.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelEventSubscription)
    private static final lnrpc.Rpc.ChannelEventSubscription DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelEventSubscription();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelEventSubscription getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelEventSubscription> PARSER;

    public static com.google.protobuf.Parser<ChannelEventSubscription> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelEventUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelEventUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .lnrpc.Channel open_channel = 1;</code>
     */
    lnrpc.Rpc.Channel getOpenChannel();

    /**
     * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
     */
    lnrpc.Rpc.ChannelCloseSummary getClosedChannel();

    /**
     * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
     */
    lnrpc.Rpc.ChannelPoint getActiveChannel();

    /**
     * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
     */
    lnrpc.Rpc.ChannelPoint getInactiveChannel();

    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    int getTypeValue();
    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    lnrpc.Rpc.ChannelEventUpdate.UpdateType getType();

    public lnrpc.Rpc.ChannelEventUpdate.ChannelCase getChannelCase();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelEventUpdate}
   */
  public  static final class ChannelEventUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelEventUpdate, ChannelEventUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelEventUpdate)
      ChannelEventUpdateOrBuilder {
    private ChannelEventUpdate() {
    }
    /**
     * Protobuf enum {@code lnrpc.ChannelEventUpdate.UpdateType}
     */
    public enum UpdateType
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>OPEN_CHANNEL = 0;</code>
       */
      OPEN_CHANNEL(0),
      /**
       * <code>CLOSED_CHANNEL = 1;</code>
       */
      CLOSED_CHANNEL(1),
      /**
       * <code>ACTIVE_CHANNEL = 2;</code>
       */
      ACTIVE_CHANNEL(2),
      /**
       * <code>INACTIVE_CHANNEL = 3;</code>
       */
      INACTIVE_CHANNEL(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>OPEN_CHANNEL = 0;</code>
       */
      public static final int OPEN_CHANNEL_VALUE = 0;
      /**
       * <code>CLOSED_CHANNEL = 1;</code>
       */
      public static final int CLOSED_CHANNEL_VALUE = 1;
      /**
       * <code>ACTIVE_CHANNEL = 2;</code>
       */
      public static final int ACTIVE_CHANNEL_VALUE = 2;
      /**
       * <code>INACTIVE_CHANNEL = 3;</code>
       */
      public static final int INACTIVE_CHANNEL_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static UpdateType valueOf(int value) {
        return forNumber(value);
      }

      public static UpdateType forNumber(int value) {
        switch (value) {
          case 0: return OPEN_CHANNEL;
          case 1: return CLOSED_CHANNEL;
          case 2: return ACTIVE_CHANNEL;
          case 3: return INACTIVE_CHANNEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<UpdateType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          UpdateType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<UpdateType>() {
              public UpdateType findValueByNumber(int number) {
                return UpdateType.forNumber(number);
              }
            };

      private final int value;

      private UpdateType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:lnrpc.ChannelEventUpdate.UpdateType)
    }

    private int channelCase_ = 0;
    private java.lang.Object channel_;
    public enum ChannelCase
        implements com.google.protobuf.Internal.EnumLite {
      OPEN_CHANNEL(1),
      CLOSED_CHANNEL(2),
      ACTIVE_CHANNEL(3),
      INACTIVE_CHANNEL(4),
      CHANNEL_NOT_SET(0);
      private final int value;
      private ChannelCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ChannelCase valueOf(int value) {
        return forNumber(value);
      }

      public static ChannelCase forNumber(int value) {
        switch (value) {
          case 1: return OPEN_CHANNEL;
          case 2: return CLOSED_CHANNEL;
          case 3: return ACTIVE_CHANNEL;
          case 4: return INACTIVE_CHANNEL;
          case 0: return CHANNEL_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ChannelCase
    getChannelCase() {
      return ChannelCase.forNumber(
          channelCase_);
    }

    private void clearChannel() {
      channelCase_ = 0;
      channel_ = null;
    }

    public static final int OPEN_CHANNEL_FIELD_NUMBER = 1;
    /**
     * <code>optional .lnrpc.Channel open_channel = 1;</code>
     */
    public lnrpc.Rpc.Channel getOpenChannel() {
      if (channelCase_ == 1) {
         return (lnrpc.Rpc.Channel) channel_;
      }
      return lnrpc.Rpc.Channel.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.Channel open_channel = 1;</code>
     */
    private void setOpenChannel(lnrpc.Rpc.Channel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channel_ = value;
      channelCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.Channel open_channel = 1;</code>
     */
    private void setOpenChannel(
        lnrpc.Rpc.Channel.Builder builderForValue) {
      channel_ = builderForValue.build();
      channelCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.Channel open_channel = 1;</code>
     */
    private void mergeOpenChannel(lnrpc.Rpc.Channel value) {
      if (channelCase_ == 1 &&
          channel_ != lnrpc.Rpc.Channel.getDefaultInstance()) {
        channel_ = lnrpc.Rpc.Channel.newBuilder((lnrpc.Rpc.Channel) channel_)
            .mergeFrom(value).buildPartial();
      } else {
        channel_ = value;
      }
      channelCase_ = 1;
    }
    /**
     * <code>optional .lnrpc.Channel open_channel = 1;</code>
     */
    private void clearOpenChannel() {
      if (channelCase_ == 1) {
        channelCase_ = 0;
        channel_ = null;
      }
    }

    public static final int CLOSED_CHANNEL_FIELD_NUMBER = 2;
    /**
     * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
     */
    public lnrpc.Rpc.ChannelCloseSummary getClosedChannel() {
      if (channelCase_ == 2) {
         return (lnrpc.Rpc.ChannelCloseSummary) channel_;
      }
      return lnrpc.Rpc.ChannelCloseSummary.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
     */
    private void setClosedChannel(lnrpc.Rpc.ChannelCloseSummary value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channel_ = value;
      channelCase_ = 2;
    }
    /**
     * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
     */
    private void setClosedChannel(
        lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
      channel_ = builderForValue.build();
      channelCase_ = 2;
    }
    /**
     * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
     */
    private void mergeClosedChannel(lnrpc.Rpc.ChannelCloseSummary value) {
      if (channelCase_ == 2 &&
          channel_ != lnrpc.Rpc.ChannelCloseSummary.getDefaultInstance()) {
        channel_ = lnrpc.Rpc.ChannelCloseSummary.newBuilder((lnrpc.Rpc.ChannelCloseSummary) channel_)
            .mergeFrom(value).buildPartial();
      } else {
        channel_ = value;
      }
      channelCase_ = 2;
    }
    /**
     * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
     */
    private void clearClosedChannel() {
      if (channelCase_ == 2) {
        channelCase_ = 0;
        channel_ = null;
      }
    }

    public static final int ACTIVE_CHANNEL_FIELD_NUMBER = 3;
    /**
     * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
     */
    public lnrpc.Rpc.ChannelPoint getActiveChannel() {
      if (channelCase_ == 3) {
         return (lnrpc.Rpc.ChannelPoint) channel_;
      }
      return lnrpc.Rpc.ChannelPoint.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
     */
    private void setActiveChannel(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channel_ = value;
      channelCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
     */
    private void setActiveChannel(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      channel_ = builderForValue.build();
      channelCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
     */
    private void mergeActiveChannel(lnrpc.Rpc.ChannelPoint value) {
      if (channelCase_ == 3 &&
          channel_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        channel_ = lnrpc.Rpc.ChannelPoint.newBuilder((lnrpc.Rpc.ChannelPoint) channel_)
            .mergeFrom(value).buildPartial();
      } else {
        channel_ = value;
      }
      channelCase_ = 3;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
     */
    private void clearActiveChannel() {
      if (channelCase_ == 3) {
        channelCase_ = 0;
        channel_ = null;
      }
    }

    public static final int INACTIVE_CHANNEL_FIELD_NUMBER = 4;
    /**
     * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
     */
    public lnrpc.Rpc.ChannelPoint getInactiveChannel() {
      if (channelCase_ == 4) {
         return (lnrpc.Rpc.ChannelPoint) channel_;
      }
      return lnrpc.Rpc.ChannelPoint.getDefaultInstance();
    }
    /**
     * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
     */
    private void setInactiveChannel(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channel_ = value;
      channelCase_ = 4;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
     */
    private void setInactiveChannel(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      channel_ = builderForValue.build();
      channelCase_ = 4;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
     */
    private void mergeInactiveChannel(lnrpc.Rpc.ChannelPoint value) {
      if (channelCase_ == 4 &&
          channel_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        channel_ = lnrpc.Rpc.ChannelPoint.newBuilder((lnrpc.Rpc.ChannelPoint) channel_)
            .mergeFrom(value).buildPartial();
      } else {
        channel_ = value;
      }
      channelCase_ = 4;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
     */
    private void clearInactiveChannel() {
      if (channelCase_ == 4) {
        channelCase_ = 0;
        channel_ = null;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 5;
    private int type_;
    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    public lnrpc.Rpc.ChannelEventUpdate.UpdateType getType() {
      lnrpc.Rpc.ChannelEventUpdate.UpdateType result = lnrpc.Rpc.ChannelEventUpdate.UpdateType.forNumber(type_);
      return result == null ? lnrpc.Rpc.ChannelEventUpdate.UpdateType.UNRECOGNIZED : result;
    }
    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    private void setType(lnrpc.Rpc.ChannelEventUpdate.UpdateType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelCase_ == 1) {
        output.writeMessage(1, (lnrpc.Rpc.Channel) channel_);
      }
      if (channelCase_ == 2) {
        output.writeMessage(2, (lnrpc.Rpc.ChannelCloseSummary) channel_);
      }
      if (channelCase_ == 3) {
        output.writeMessage(3, (lnrpc.Rpc.ChannelPoint) channel_);
      }
      if (channelCase_ == 4) {
        output.writeMessage(4, (lnrpc.Rpc.ChannelPoint) channel_);
      }
      if (type_ != lnrpc.Rpc.ChannelEventUpdate.UpdateType.OPEN_CHANNEL.getNumber()) {
        output.writeEnum(5, type_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (lnrpc.Rpc.Channel) channel_);
      }
      if (channelCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (lnrpc.Rpc.ChannelCloseSummary) channel_);
      }
      if (channelCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (lnrpc.Rpc.ChannelPoint) channel_);
      }
      if (channelCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (lnrpc.Rpc.ChannelPoint) channel_);
      }
      if (type_ != lnrpc.Rpc.ChannelEventUpdate.UpdateType.OPEN_CHANNEL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, type_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEventUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelEventUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelEventUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelEventUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelEventUpdate)
        lnrpc.Rpc.ChannelEventUpdateOrBuilder {
      // Construct using lnrpc.Rpc.ChannelEventUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ChannelCase
          getChannelCase() {
        return instance.getChannelCase();
      }

      public Builder clearChannel() {
        copyOnWrite();
        instance.clearChannel();
        return this;
      }


      /**
       * <code>optional .lnrpc.Channel open_channel = 1;</code>
       */
      public lnrpc.Rpc.Channel getOpenChannel() {
        return instance.getOpenChannel();
      }
      /**
       * <code>optional .lnrpc.Channel open_channel = 1;</code>
       */
      public Builder setOpenChannel(lnrpc.Rpc.Channel value) {
        copyOnWrite();
        instance.setOpenChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.Channel open_channel = 1;</code>
       */
      public Builder setOpenChannel(
          lnrpc.Rpc.Channel.Builder builderForValue) {
        copyOnWrite();
        instance.setOpenChannel(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.Channel open_channel = 1;</code>
       */
      public Builder mergeOpenChannel(lnrpc.Rpc.Channel value) {
        copyOnWrite();
        instance.mergeOpenChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.Channel open_channel = 1;</code>
       */
      public Builder clearOpenChannel() {
        copyOnWrite();
        instance.clearOpenChannel();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
       */
      public lnrpc.Rpc.ChannelCloseSummary getClosedChannel() {
        return instance.getClosedChannel();
      }
      /**
       * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
       */
      public Builder setClosedChannel(lnrpc.Rpc.ChannelCloseSummary value) {
        copyOnWrite();
        instance.setClosedChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
       */
      public Builder setClosedChannel(
          lnrpc.Rpc.ChannelCloseSummary.Builder builderForValue) {
        copyOnWrite();
        instance.setClosedChannel(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
       */
      public Builder mergeClosedChannel(lnrpc.Rpc.ChannelCloseSummary value) {
        copyOnWrite();
        instance.mergeClosedChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelCloseSummary closed_channel = 2;</code>
       */
      public Builder clearClosedChannel() {
        copyOnWrite();
        instance.clearClosedChannel();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
       */
      public lnrpc.Rpc.ChannelPoint getActiveChannel() {
        return instance.getActiveChannel();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
       */
      public Builder setActiveChannel(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setActiveChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
       */
      public Builder setActiveChannel(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setActiveChannel(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
       */
      public Builder mergeActiveChannel(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeActiveChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint active_channel = 3;</code>
       */
      public Builder clearActiveChannel() {
        copyOnWrite();
        instance.clearActiveChannel();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
       */
      public lnrpc.Rpc.ChannelPoint getInactiveChannel() {
        return instance.getInactiveChannel();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
       */
      public Builder setInactiveChannel(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setInactiveChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
       */
      public Builder setInactiveChannel(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setInactiveChannel(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
       */
      public Builder mergeInactiveChannel(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeInactiveChannel(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint inactive_channel = 4;</code>
       */
      public Builder clearInactiveChannel() {
        copyOnWrite();
        instance.clearInactiveChannel();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
       */
      public lnrpc.Rpc.ChannelEventUpdate.UpdateType getType() {
        return instance.getType();
      }
      /**
       * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
       */
      public Builder setType(lnrpc.Rpc.ChannelEventUpdate.UpdateType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelEventUpdate.UpdateType type = 5;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelEventUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelEventUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelEventUpdate other = (lnrpc.Rpc.ChannelEventUpdate) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          switch (other.getChannelCase()) {
            case OPEN_CHANNEL: {
              channel_ = visitor.visitOneofMessage(
                  channelCase_ == 1,
                  channel_,
                  other.channel_);
              break;
            }
            case CLOSED_CHANNEL: {
              channel_ = visitor.visitOneofMessage(
                  channelCase_ == 2,
                  channel_,
                  other.channel_);
              break;
            }
            case ACTIVE_CHANNEL: {
              channel_ = visitor.visitOneofMessage(
                  channelCase_ == 3,
                  channel_,
                  other.channel_);
              break;
            }
            case INACTIVE_CHANNEL: {
              channel_ = visitor.visitOneofMessage(
                  channelCase_ == 4,
                  channel_,
                  other.channel_);
              break;
            }
            case CHANNEL_NOT_SET: {
              visitor.visitOneofNotSet(channelCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.channelCase_ != 0) {
              channelCase_ = other.channelCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.Channel.Builder subBuilder = null;
                  if (channelCase_ == 1) {
                    subBuilder = ((lnrpc.Rpc.Channel) channel_).toBuilder();
                  }
                  channel_ =
                       input.readMessage(lnrpc.Rpc.Channel.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.Channel) channel_);
                    channel_ = subBuilder.buildPartial();
                  }
                  channelCase_ = 1;
                  break;
                }
                case 18: {
                  lnrpc.Rpc.ChannelCloseSummary.Builder subBuilder = null;
                  if (channelCase_ == 2) {
                    subBuilder = ((lnrpc.Rpc.ChannelCloseSummary) channel_).toBuilder();
                  }
                  channel_ =
                       input.readMessage(lnrpc.Rpc.ChannelCloseSummary.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.ChannelCloseSummary) channel_);
                    channel_ = subBuilder.buildPartial();
                  }
                  channelCase_ = 2;
                  break;
                }
                case 26: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (channelCase_ == 3) {
                    subBuilder = ((lnrpc.Rpc.ChannelPoint) channel_).toBuilder();
                  }
                  channel_ =
                       input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.ChannelPoint) channel_);
                    channel_ = subBuilder.buildPartial();
                  }
                  channelCase_ = 3;
                  break;
                }
                case 34: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (channelCase_ == 4) {
                    subBuilder = ((lnrpc.Rpc.ChannelPoint) channel_).toBuilder();
                  }
                  channel_ =
                       input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.ChannelPoint) channel_);
                    channel_ = subBuilder.buildPartial();
                  }
                  channelCase_ = 4;
                  break;
                }
                case 40: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelEventUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelEventUpdate)
    private static final lnrpc.Rpc.ChannelEventUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelEventUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelEventUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelEventUpdate> PARSER;

    public static com.google.protobuf.Parser<ChannelEventUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface WalletBalanceRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.WalletBalanceRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.WalletBalanceRequest}
   */
  public  static final class WalletBalanceRequest extends
      com.google.protobuf.GeneratedMessageLite<
          WalletBalanceRequest, WalletBalanceRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.WalletBalanceRequest)
      WalletBalanceRequestOrBuilder {
    private WalletBalanceRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.WalletBalanceRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.WalletBalanceRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.WalletBalanceRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.WalletBalanceRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.WalletBalanceRequest)
        lnrpc.Rpc.WalletBalanceRequestOrBuilder {
      // Construct using lnrpc.Rpc.WalletBalanceRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.WalletBalanceRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.WalletBalanceRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.WalletBalanceRequest other = (lnrpc.Rpc.WalletBalanceRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.WalletBalanceRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.WalletBalanceRequest)
    private static final lnrpc.Rpc.WalletBalanceRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new WalletBalanceRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.WalletBalanceRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<WalletBalanceRequest> PARSER;

    public static com.google.protobuf.Parser<WalletBalanceRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface WalletBalanceResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.WalletBalanceResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The balance of the wallet
     * </pre>
     *
     * <code>optional int64 total_balance = 1;</code>
     */
    long getTotalBalance();

    /**
     * <pre>
     *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
     * </pre>
     *
     * <code>optional int64 confirmed_balance = 2;</code>
     */
    long getConfirmedBalance();

    /**
     * <pre>
     *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
     * </pre>
     *
     * <code>optional int64 unconfirmed_balance = 3;</code>
     */
    long getUnconfirmedBalance();
  }
  /**
   * Protobuf type {@code lnrpc.WalletBalanceResponse}
   */
  public  static final class WalletBalanceResponse extends
      com.google.protobuf.GeneratedMessageLite<
          WalletBalanceResponse, WalletBalanceResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.WalletBalanceResponse)
      WalletBalanceResponseOrBuilder {
    private WalletBalanceResponse() {
    }
    public static final int TOTAL_BALANCE_FIELD_NUMBER = 1;
    private long totalBalance_;
    /**
     * <pre>
     *&#47; The balance of the wallet
     * </pre>
     *
     * <code>optional int64 total_balance = 1;</code>
     */
    public long getTotalBalance() {
      return totalBalance_;
    }
    /**
     * <pre>
     *&#47; The balance of the wallet
     * </pre>
     *
     * <code>optional int64 total_balance = 1;</code>
     */
    private void setTotalBalance(long value) {
      
      totalBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The balance of the wallet
     * </pre>
     *
     * <code>optional int64 total_balance = 1;</code>
     */
    private void clearTotalBalance() {
      
      totalBalance_ = 0L;
    }

    public static final int CONFIRMED_BALANCE_FIELD_NUMBER = 2;
    private long confirmedBalance_;
    /**
     * <pre>
     *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
     * </pre>
     *
     * <code>optional int64 confirmed_balance = 2;</code>
     */
    public long getConfirmedBalance() {
      return confirmedBalance_;
    }
    /**
     * <pre>
     *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
     * </pre>
     *
     * <code>optional int64 confirmed_balance = 2;</code>
     */
    private void setConfirmedBalance(long value) {
      
      confirmedBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
     * </pre>
     *
     * <code>optional int64 confirmed_balance = 2;</code>
     */
    private void clearConfirmedBalance() {
      
      confirmedBalance_ = 0L;
    }

    public static final int UNCONFIRMED_BALANCE_FIELD_NUMBER = 3;
    private long unconfirmedBalance_;
    /**
     * <pre>
     *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
     * </pre>
     *
     * <code>optional int64 unconfirmed_balance = 3;</code>
     */
    public long getUnconfirmedBalance() {
      return unconfirmedBalance_;
    }
    /**
     * <pre>
     *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
     * </pre>
     *
     * <code>optional int64 unconfirmed_balance = 3;</code>
     */
    private void setUnconfirmedBalance(long value) {
      
      unconfirmedBalance_ = value;
    }
    /**
     * <pre>
     *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
     * </pre>
     *
     * <code>optional int64 unconfirmed_balance = 3;</code>
     */
    private void clearUnconfirmedBalance() {
      
      unconfirmedBalance_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (totalBalance_ != 0L) {
        output.writeInt64(1, totalBalance_);
      }
      if (confirmedBalance_ != 0L) {
        output.writeInt64(2, confirmedBalance_);
      }
      if (unconfirmedBalance_ != 0L) {
        output.writeInt64(3, unconfirmedBalance_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (totalBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, totalBalance_);
      }
      if (confirmedBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, confirmedBalance_);
      }
      if (unconfirmedBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, unconfirmedBalance_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.WalletBalanceResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.WalletBalanceResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.WalletBalanceResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.WalletBalanceResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.WalletBalanceResponse)
        lnrpc.Rpc.WalletBalanceResponseOrBuilder {
      // Construct using lnrpc.Rpc.WalletBalanceResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The balance of the wallet
       * </pre>
       *
       * <code>optional int64 total_balance = 1;</code>
       */
      public long getTotalBalance() {
        return instance.getTotalBalance();
      }
      /**
       * <pre>
       *&#47; The balance of the wallet
       * </pre>
       *
       * <code>optional int64 total_balance = 1;</code>
       */
      public Builder setTotalBalance(long value) {
        copyOnWrite();
        instance.setTotalBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The balance of the wallet
       * </pre>
       *
       * <code>optional int64 total_balance = 1;</code>
       */
      public Builder clearTotalBalance() {
        copyOnWrite();
        instance.clearTotalBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
       * </pre>
       *
       * <code>optional int64 confirmed_balance = 2;</code>
       */
      public long getConfirmedBalance() {
        return instance.getConfirmedBalance();
      }
      /**
       * <pre>
       *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
       * </pre>
       *
       * <code>optional int64 confirmed_balance = 2;</code>
       */
      public Builder setConfirmedBalance(long value) {
        copyOnWrite();
        instance.setConfirmedBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The confirmed balance of a wallet(with &gt;= 1 confirmations)
       * </pre>
       *
       * <code>optional int64 confirmed_balance = 2;</code>
       */
      public Builder clearConfirmedBalance() {
        copyOnWrite();
        instance.clearConfirmedBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
       * </pre>
       *
       * <code>optional int64 unconfirmed_balance = 3;</code>
       */
      public long getUnconfirmedBalance() {
        return instance.getUnconfirmedBalance();
      }
      /**
       * <pre>
       *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
       * </pre>
       *
       * <code>optional int64 unconfirmed_balance = 3;</code>
       */
      public Builder setUnconfirmedBalance(long value) {
        copyOnWrite();
        instance.setUnconfirmedBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The unconfirmed balance of a wallet(with 0 confirmations)
       * </pre>
       *
       * <code>optional int64 unconfirmed_balance = 3;</code>
       */
      public Builder clearUnconfirmedBalance() {
        copyOnWrite();
        instance.clearUnconfirmedBalance();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.WalletBalanceResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.WalletBalanceResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.WalletBalanceResponse other = (lnrpc.Rpc.WalletBalanceResponse) arg1;
          totalBalance_ = visitor.visitLong(totalBalance_ != 0L, totalBalance_,
              other.totalBalance_ != 0L, other.totalBalance_);
          confirmedBalance_ = visitor.visitLong(confirmedBalance_ != 0L, confirmedBalance_,
              other.confirmedBalance_ != 0L, other.confirmedBalance_);
          unconfirmedBalance_ = visitor.visitLong(unconfirmedBalance_ != 0L, unconfirmedBalance_,
              other.unconfirmedBalance_ != 0L, other.unconfirmedBalance_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  totalBalance_ = input.readInt64();
                  break;
                }
                case 16: {

                  confirmedBalance_ = input.readInt64();
                  break;
                }
                case 24: {

                  unconfirmedBalance_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.WalletBalanceResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.WalletBalanceResponse)
    private static final lnrpc.Rpc.WalletBalanceResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new WalletBalanceResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.WalletBalanceResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<WalletBalanceResponse> PARSER;

    public static com.google.protobuf.Parser<WalletBalanceResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelBalanceRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelBalanceRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.ChannelBalanceRequest}
   */
  public  static final class ChannelBalanceRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelBalanceRequest, ChannelBalanceRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelBalanceRequest)
      ChannelBalanceRequestOrBuilder {
    private ChannelBalanceRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelBalanceRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelBalanceRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelBalanceRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelBalanceRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelBalanceRequest)
        lnrpc.Rpc.ChannelBalanceRequestOrBuilder {
      // Construct using lnrpc.Rpc.ChannelBalanceRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelBalanceRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelBalanceRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelBalanceRequest other = (lnrpc.Rpc.ChannelBalanceRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelBalanceRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelBalanceRequest)
    private static final lnrpc.Rpc.ChannelBalanceRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelBalanceRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelBalanceRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelBalanceRequest> PARSER;

    public static com.google.protobuf.Parser<ChannelBalanceRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelBalanceResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelBalanceResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Sum of channels balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 balance = 1;</code>
     */
    long getBalance();

    /**
     * <pre>
     *&#47; Sum of channels pending balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 pending_open_balance = 2;</code>
     */
    long getPendingOpenBalance();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelBalanceResponse}
   */
  public  static final class ChannelBalanceResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelBalanceResponse, ChannelBalanceResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelBalanceResponse)
      ChannelBalanceResponseOrBuilder {
    private ChannelBalanceResponse() {
    }
    public static final int BALANCE_FIELD_NUMBER = 1;
    private long balance_;
    /**
     * <pre>
     *&#47; Sum of channels balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 balance = 1;</code>
     */
    public long getBalance() {
      return balance_;
    }
    /**
     * <pre>
     *&#47; Sum of channels balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 balance = 1;</code>
     */
    private void setBalance(long value) {
      
      balance_ = value;
    }
    /**
     * <pre>
     *&#47; Sum of channels balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 balance = 1;</code>
     */
    private void clearBalance() {
      
      balance_ = 0L;
    }

    public static final int PENDING_OPEN_BALANCE_FIELD_NUMBER = 2;
    private long pendingOpenBalance_;
    /**
     * <pre>
     *&#47; Sum of channels pending balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 pending_open_balance = 2;</code>
     */
    public long getPendingOpenBalance() {
      return pendingOpenBalance_;
    }
    /**
     * <pre>
     *&#47; Sum of channels pending balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 pending_open_balance = 2;</code>
     */
    private void setPendingOpenBalance(long value) {
      
      pendingOpenBalance_ = value;
    }
    /**
     * <pre>
     *&#47; Sum of channels pending balances denominated in satoshis
     * </pre>
     *
     * <code>optional int64 pending_open_balance = 2;</code>
     */
    private void clearPendingOpenBalance() {
      
      pendingOpenBalance_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (balance_ != 0L) {
        output.writeInt64(1, balance_);
      }
      if (pendingOpenBalance_ != 0L) {
        output.writeInt64(2, pendingOpenBalance_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (balance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, balance_);
      }
      if (pendingOpenBalance_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, pendingOpenBalance_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelBalanceResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelBalanceResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelBalanceResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelBalanceResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelBalanceResponse)
        lnrpc.Rpc.ChannelBalanceResponseOrBuilder {
      // Construct using lnrpc.Rpc.ChannelBalanceResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Sum of channels balances denominated in satoshis
       * </pre>
       *
       * <code>optional int64 balance = 1;</code>
       */
      public long getBalance() {
        return instance.getBalance();
      }
      /**
       * <pre>
       *&#47; Sum of channels balances denominated in satoshis
       * </pre>
       *
       * <code>optional int64 balance = 1;</code>
       */
      public Builder setBalance(long value) {
        copyOnWrite();
        instance.setBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Sum of channels balances denominated in satoshis
       * </pre>
       *
       * <code>optional int64 balance = 1;</code>
       */
      public Builder clearBalance() {
        copyOnWrite();
        instance.clearBalance();
        return this;
      }

      /**
       * <pre>
       *&#47; Sum of channels pending balances denominated in satoshis
       * </pre>
       *
       * <code>optional int64 pending_open_balance = 2;</code>
       */
      public long getPendingOpenBalance() {
        return instance.getPendingOpenBalance();
      }
      /**
       * <pre>
       *&#47; Sum of channels pending balances denominated in satoshis
       * </pre>
       *
       * <code>optional int64 pending_open_balance = 2;</code>
       */
      public Builder setPendingOpenBalance(long value) {
        copyOnWrite();
        instance.setPendingOpenBalance(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Sum of channels pending balances denominated in satoshis
       * </pre>
       *
       * <code>optional int64 pending_open_balance = 2;</code>
       */
      public Builder clearPendingOpenBalance() {
        copyOnWrite();
        instance.clearPendingOpenBalance();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelBalanceResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelBalanceResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelBalanceResponse other = (lnrpc.Rpc.ChannelBalanceResponse) arg1;
          balance_ = visitor.visitLong(balance_ != 0L, balance_,
              other.balance_ != 0L, other.balance_);
          pendingOpenBalance_ = visitor.visitLong(pendingOpenBalance_ != 0L, pendingOpenBalance_,
              other.pendingOpenBalance_ != 0L, other.pendingOpenBalance_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  balance_ = input.readInt64();
                  break;
                }
                case 16: {

                  pendingOpenBalance_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelBalanceResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelBalanceResponse)
    private static final lnrpc.Rpc.ChannelBalanceResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelBalanceResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelBalanceResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelBalanceResponse> PARSER;

    public static com.google.protobuf.Parser<ChannelBalanceResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface QueryRoutesRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.QueryRoutesRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    java.lang.String getPubKey();
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    com.google.protobuf.ByteString
        getPubKeyBytes();

    /**
     * <pre>
     *&#47; The amount to send expressed in satoshis
     * </pre>
     *
     * <code>optional int64 amt = 2;</code>
     */
    long getAmt();

    /**
     * <pre>
     **
     *Deprecated. The max number of routes to return. In the future, QueryRoutes
     *will only return a single route.
     * </pre>
     *
     * <code>optional int32 num_routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated int getNumRoutes();

    /**
     * <pre>
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 4;</code>
     */
    int getFinalCltvDelta();

    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    boolean hasFeeLimit();
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    lnrpc.Rpc.FeeLimit getFeeLimit();

    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getIgnoredNodesList();
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    int getIgnoredNodesCount();
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    com.google.protobuf.ByteString getIgnoredNodes(int index);

    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    java.util.List<lnrpc.Rpc.EdgeLocator> 
        getIgnoredEdgesList();
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    lnrpc.Rpc.EdgeLocator getIgnoredEdges(int index);
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    int getIgnoredEdgesCount();

    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    java.lang.String getSourcePubKey();
    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    com.google.protobuf.ByteString
        getSourcePubKeyBytes();
  }
  /**
   * Protobuf type {@code lnrpc.QueryRoutesRequest}
   */
  public  static final class QueryRoutesRequest extends
      com.google.protobuf.GeneratedMessageLite<
          QueryRoutesRequest, QueryRoutesRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.QueryRoutesRequest)
      QueryRoutesRequestOrBuilder {
    private QueryRoutesRequest() {
      pubKey_ = "";
      ignoredNodes_ = emptyProtobufList();
      ignoredEdges_ = emptyProtobufList();
      sourcePubKey_ = "";
    }
    private int bitField0_;
    public static final int PUB_KEY_FIELD_NUMBER = 1;
    private java.lang.String pubKey_;
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public java.lang.String getPubKey() {
      return pubKey_;
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubKey_);
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubKey_ = value;
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void clearPubKey() {
      
      pubKey_ = getDefaultInstance().getPubKey();
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded public key for the payment destination
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubKey_ = value.toStringUtf8();
    }

    public static final int AMT_FIELD_NUMBER = 2;
    private long amt_;
    /**
     * <pre>
     *&#47; The amount to send expressed in satoshis
     * </pre>
     *
     * <code>optional int64 amt = 2;</code>
     */
    public long getAmt() {
      return amt_;
    }
    /**
     * <pre>
     *&#47; The amount to send expressed in satoshis
     * </pre>
     *
     * <code>optional int64 amt = 2;</code>
     */
    private void setAmt(long value) {
      
      amt_ = value;
    }
    /**
     * <pre>
     *&#47; The amount to send expressed in satoshis
     * </pre>
     *
     * <code>optional int64 amt = 2;</code>
     */
    private void clearAmt() {
      
      amt_ = 0L;
    }

    public static final int NUM_ROUTES_FIELD_NUMBER = 3;
    private int numRoutes_;
    /**
     * <pre>
     **
     *Deprecated. The max number of routes to return. In the future, QueryRoutes
     *will only return a single route.
     * </pre>
     *
     * <code>optional int32 num_routes = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getNumRoutes() {
      return numRoutes_;
    }
    /**
     * <pre>
     **
     *Deprecated. The max number of routes to return. In the future, QueryRoutes
     *will only return a single route.
     * </pre>
     *
     * <code>optional int32 num_routes = 3 [deprecated = true];</code>
     */
    private void setNumRoutes(int value) {
      
      numRoutes_ = value;
    }
    /**
     * <pre>
     **
     *Deprecated. The max number of routes to return. In the future, QueryRoutes
     *will only return a single route.
     * </pre>
     *
     * <code>optional int32 num_routes = 3 [deprecated = true];</code>
     */
    private void clearNumRoutes() {
      
      numRoutes_ = 0;
    }

    public static final int FINAL_CLTV_DELTA_FIELD_NUMBER = 4;
    private int finalCltvDelta_;
    /**
     * <pre>
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 4;</code>
     */
    public int getFinalCltvDelta() {
      return finalCltvDelta_;
    }
    /**
     * <pre>
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 4;</code>
     */
    private void setFinalCltvDelta(int value) {
      
      finalCltvDelta_ = value;
    }
    /**
     * <pre>
     *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
     * </pre>
     *
     * <code>optional int32 final_cltv_delta = 4;</code>
     */
    private void clearFinalCltvDelta() {
      
      finalCltvDelta_ = 0;
    }

    public static final int FEE_LIMIT_FIELD_NUMBER = 5;
    private lnrpc.Rpc.FeeLimit feeLimit_;
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    public boolean hasFeeLimit() {
      return feeLimit_ != null;
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    public lnrpc.Rpc.FeeLimit getFeeLimit() {
      return feeLimit_ == null ? lnrpc.Rpc.FeeLimit.getDefaultInstance() : feeLimit_;
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    private void setFeeLimit(lnrpc.Rpc.FeeLimit value) {
      if (value == null) {
        throw new NullPointerException();
      }
      feeLimit_ = value;
      
      }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    private void setFeeLimit(
        lnrpc.Rpc.FeeLimit.Builder builderForValue) {
      feeLimit_ = builderForValue.build();
      
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    private void mergeFeeLimit(lnrpc.Rpc.FeeLimit value) {
      if (feeLimit_ != null &&
          feeLimit_ != lnrpc.Rpc.FeeLimit.getDefaultInstance()) {
        feeLimit_ =
          lnrpc.Rpc.FeeLimit.newBuilder(feeLimit_).mergeFrom(value).buildPartial();
      } else {
        feeLimit_ = value;
      }
      
    }
    /**
     * <pre>
     **
     *The maximum number of satoshis that will be paid as a fee of the payment.
     *This value can be represented either as a percentage of the amount being
     *sent, or as a fixed amount of the maximum fee the user is willing the pay to
     *send the payment.
     * </pre>
     *
     * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
     */
    private void clearFeeLimit() {  feeLimit_ = null;
      
    }

    public static final int IGNORED_NODES_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> ignoredNodes_;
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getIgnoredNodesList() {
      return ignoredNodes_;
    }
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    public int getIgnoredNodesCount() {
      return ignoredNodes_.size();
    }
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    public com.google.protobuf.ByteString getIgnoredNodes(int index) {
      return ignoredNodes_.get(index);
    }
    private void ensureIgnoredNodesIsMutable() {
      if (!ignoredNodes_.isModifiable()) {
        ignoredNodes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(ignoredNodes_);
       }
    }
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    private void setIgnoredNodes(
        int index, com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureIgnoredNodesIsMutable();
      ignoredNodes_.set(index, value);
    }
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    private void addIgnoredNodes(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureIgnoredNodesIsMutable();
      ignoredNodes_.add(value);
    }
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    private void addAllIgnoredNodes(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensureIgnoredNodesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, ignoredNodes_);
    }
    /**
     * <pre>
     **
     *A list of nodes to ignore during path finding.
     * </pre>
     *
     * <code>repeated bytes ignored_nodes = 6;</code>
     */
    private void clearIgnoredNodes() {
      ignoredNodes_ = emptyProtobufList();
    }

    public static final int IGNORED_EDGES_FIELD_NUMBER = 7;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.EdgeLocator> ignoredEdges_;
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    public java.util.List<lnrpc.Rpc.EdgeLocator> getIgnoredEdgesList() {
      return ignoredEdges_;
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.EdgeLocatorOrBuilder> 
        getIgnoredEdgesOrBuilderList() {
      return ignoredEdges_;
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    public int getIgnoredEdgesCount() {
      return ignoredEdges_.size();
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    public lnrpc.Rpc.EdgeLocator getIgnoredEdges(int index) {
      return ignoredEdges_.get(index);
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    public lnrpc.Rpc.EdgeLocatorOrBuilder getIgnoredEdgesOrBuilder(
        int index) {
      return ignoredEdges_.get(index);
    }
    private void ensureIgnoredEdgesIsMutable() {
      if (!ignoredEdges_.isModifiable()) {
        ignoredEdges_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(ignoredEdges_);
       }
    }

    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void setIgnoredEdges(
        int index, lnrpc.Rpc.EdgeLocator value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.set(index, value);
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void setIgnoredEdges(
        int index, lnrpc.Rpc.EdgeLocator.Builder builderForValue) {
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void addIgnoredEdges(lnrpc.Rpc.EdgeLocator value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.add(value);
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void addIgnoredEdges(
        int index, lnrpc.Rpc.EdgeLocator value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.add(index, value);
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void addIgnoredEdges(
        lnrpc.Rpc.EdgeLocator.Builder builderForValue) {
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void addIgnoredEdges(
        int index, lnrpc.Rpc.EdgeLocator.Builder builderForValue) {
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void addAllIgnoredEdges(
        java.lang.Iterable<? extends lnrpc.Rpc.EdgeLocator> values) {
      ensureIgnoredEdgesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, ignoredEdges_);
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void clearIgnoredEdges() {
      ignoredEdges_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *A list of edges to ignore during path finding.
     * </pre>
     *
     * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
     */
    private void removeIgnoredEdges(int index) {
      ensureIgnoredEdgesIsMutable();
      ignoredEdges_.remove(index);
    }

    public static final int SOURCE_PUB_KEY_FIELD_NUMBER = 8;
    private java.lang.String sourcePubKey_;
    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    public java.lang.String getSourcePubKey() {
      return sourcePubKey_;
    }
    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    public com.google.protobuf.ByteString
        getSourcePubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(sourcePubKey_);
    }
    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    private void setSourcePubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sourcePubKey_ = value;
    }
    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    private void clearSourcePubKey() {
      
      sourcePubKey_ = getDefaultInstance().getSourcePubKey();
    }
    /**
     * <pre>
     **
     *The source node where the request route should originated from. If empty,
     *self is assumed.
     * </pre>
     *
     * <code>optional string source_pub_key = 8;</code>
     */
    private void setSourcePubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      sourcePubKey_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!pubKey_.isEmpty()) {
        output.writeString(1, getPubKey());
      }
      if (amt_ != 0L) {
        output.writeInt64(2, amt_);
      }
      if (numRoutes_ != 0) {
        output.writeInt32(3, numRoutes_);
      }
      if (finalCltvDelta_ != 0) {
        output.writeInt32(4, finalCltvDelta_);
      }
      if (feeLimit_ != null) {
        output.writeMessage(5, getFeeLimit());
      }
      for (int i = 0; i < ignoredNodes_.size(); i++) {
        output.writeBytes(6, ignoredNodes_.get(i));
      }
      for (int i = 0; i < ignoredEdges_.size(); i++) {
        output.writeMessage(7, ignoredEdges_.get(i));
      }
      if (!sourcePubKey_.isEmpty()) {
        output.writeString(8, getSourcePubKey());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!pubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPubKey());
      }
      if (amt_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, amt_);
      }
      if (numRoutes_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, numRoutes_);
      }
      if (finalCltvDelta_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, finalCltvDelta_);
      }
      if (feeLimit_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getFeeLimit());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ignoredNodes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(ignoredNodes_.get(i));
        }
        size += dataSize;
        size += 1 * getIgnoredNodesList().size();
      }
      for (int i = 0; i < ignoredEdges_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, ignoredEdges_.get(i));
      }
      if (!sourcePubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getSourcePubKey());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.QueryRoutesRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.QueryRoutesRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.QueryRoutesRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.QueryRoutesRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.QueryRoutesRequest)
        lnrpc.Rpc.QueryRoutesRequestOrBuilder {
      // Construct using lnrpc.Rpc.QueryRoutesRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The 33-byte hex-encoded public key for the payment destination
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public java.lang.String getPubKey() {
        return instance.getPubKey();
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded public key for the payment destination
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPubKeyBytes() {
        return instance.getPubKeyBytes();
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded public key for the payment destination
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubKey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded public key for the payment destination
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder clearPubKey() {
        copyOnWrite();
        instance.clearPubKey();
        return this;
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded public key for the payment destination
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubKeyBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The amount to send expressed in satoshis
       * </pre>
       *
       * <code>optional int64 amt = 2;</code>
       */
      public long getAmt() {
        return instance.getAmt();
      }
      /**
       * <pre>
       *&#47; The amount to send expressed in satoshis
       * </pre>
       *
       * <code>optional int64 amt = 2;</code>
       */
      public Builder setAmt(long value) {
        copyOnWrite();
        instance.setAmt(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The amount to send expressed in satoshis
       * </pre>
       *
       * <code>optional int64 amt = 2;</code>
       */
      public Builder clearAmt() {
        copyOnWrite();
        instance.clearAmt();
        return this;
      }

      /**
       * <pre>
       **
       *Deprecated. The max number of routes to return. In the future, QueryRoutes
       *will only return a single route.
       * </pre>
       *
       * <code>optional int32 num_routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public int getNumRoutes() {
        return instance.getNumRoutes();
      }
      /**
       * <pre>
       **
       *Deprecated. The max number of routes to return. In the future, QueryRoutes
       *will only return a single route.
       * </pre>
       *
       * <code>optional int32 num_routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setNumRoutes(int value) {
        copyOnWrite();
        instance.setNumRoutes(value);
        return this;
      }
      /**
       * <pre>
       **
       *Deprecated. The max number of routes to return. In the future, QueryRoutes
       *will only return a single route.
       * </pre>
       *
       * <code>optional int32 num_routes = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearNumRoutes() {
        copyOnWrite();
        instance.clearNumRoutes();
        return this;
      }

      /**
       * <pre>
       *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
       * </pre>
       *
       * <code>optional int32 final_cltv_delta = 4;</code>
       */
      public int getFinalCltvDelta() {
        return instance.getFinalCltvDelta();
      }
      /**
       * <pre>
       *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
       * </pre>
       *
       * <code>optional int32 final_cltv_delta = 4;</code>
       */
      public Builder setFinalCltvDelta(int value) {
        copyOnWrite();
        instance.setFinalCltvDelta(value);
        return this;
      }
      /**
       * <pre>
       *&#47; An optional CLTV delta from the current height that should be used for the timelock of the final hop
       * </pre>
       *
       * <code>optional int32 final_cltv_delta = 4;</code>
       */
      public Builder clearFinalCltvDelta() {
        copyOnWrite();
        instance.clearFinalCltvDelta();
        return this;
      }

      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
       */
      public boolean hasFeeLimit() {
        return instance.hasFeeLimit();
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
       */
      public lnrpc.Rpc.FeeLimit getFeeLimit() {
        return instance.getFeeLimit();
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
       */
      public Builder setFeeLimit(lnrpc.Rpc.FeeLimit value) {
        copyOnWrite();
        instance.setFeeLimit(value);
        return this;
        }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
       */
      public Builder setFeeLimit(
          lnrpc.Rpc.FeeLimit.Builder builderForValue) {
        copyOnWrite();
        instance.setFeeLimit(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
       */
      public Builder mergeFeeLimit(lnrpc.Rpc.FeeLimit value) {
        copyOnWrite();
        instance.mergeFeeLimit(value);
        return this;
      }
      /**
       * <pre>
       **
       *The maximum number of satoshis that will be paid as a fee of the payment.
       *This value can be represented either as a percentage of the amount being
       *sent, or as a fixed amount of the maximum fee the user is willing the pay to
       *send the payment.
       * </pre>
       *
       * <code>optional .lnrpc.FeeLimit fee_limit = 5;</code>
       */
      public Builder clearFeeLimit() {  copyOnWrite();
        instance.clearFeeLimit();
        return this;
      }

      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getIgnoredNodesList() {
        return java.util.Collections.unmodifiableList(
            instance.getIgnoredNodesList());
      }
      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public int getIgnoredNodesCount() {
        return instance.getIgnoredNodesCount();
      }
      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public com.google.protobuf.ByteString getIgnoredNodes(int index) {
        return instance.getIgnoredNodes(index);
      }
      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public Builder setIgnoredNodes(
          int index, com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIgnoredNodes(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public Builder addIgnoredNodes(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addIgnoredNodes(value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public Builder addAllIgnoredNodes(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.addAllIgnoredNodes(values);
        return this;
      }
      /**
       * <pre>
       **
       *A list of nodes to ignore during path finding.
       * </pre>
       *
       * <code>repeated bytes ignored_nodes = 6;</code>
       */
      public Builder clearIgnoredNodes() {
        copyOnWrite();
        instance.clearIgnoredNodes();
        return this;
      }

      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public java.util.List<lnrpc.Rpc.EdgeLocator> getIgnoredEdgesList() {
        return java.util.Collections.unmodifiableList(
            instance.getIgnoredEdgesList());
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public int getIgnoredEdgesCount() {
        return instance.getIgnoredEdgesCount();
      }/**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public lnrpc.Rpc.EdgeLocator getIgnoredEdges(int index) {
        return instance.getIgnoredEdges(index);
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder setIgnoredEdges(
          int index, lnrpc.Rpc.EdgeLocator value) {
        copyOnWrite();
        instance.setIgnoredEdges(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder setIgnoredEdges(
          int index, lnrpc.Rpc.EdgeLocator.Builder builderForValue) {
        copyOnWrite();
        instance.setIgnoredEdges(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder addIgnoredEdges(lnrpc.Rpc.EdgeLocator value) {
        copyOnWrite();
        instance.addIgnoredEdges(value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder addIgnoredEdges(
          int index, lnrpc.Rpc.EdgeLocator value) {
        copyOnWrite();
        instance.addIgnoredEdges(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder addIgnoredEdges(
          lnrpc.Rpc.EdgeLocator.Builder builderForValue) {
        copyOnWrite();
        instance.addIgnoredEdges(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder addIgnoredEdges(
          int index, lnrpc.Rpc.EdgeLocator.Builder builderForValue) {
        copyOnWrite();
        instance.addIgnoredEdges(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder addAllIgnoredEdges(
          java.lang.Iterable<? extends lnrpc.Rpc.EdgeLocator> values) {
        copyOnWrite();
        instance.addAllIgnoredEdges(values);
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder clearIgnoredEdges() {
        copyOnWrite();
        instance.clearIgnoredEdges();
        return this;
      }
      /**
       * <pre>
       **
       *A list of edges to ignore during path finding.
       * </pre>
       *
       * <code>repeated .lnrpc.EdgeLocator ignored_edges = 7;</code>
       */
      public Builder removeIgnoredEdges(int index) {
        copyOnWrite();
        instance.removeIgnoredEdges(index);
        return this;
      }

      /**
       * <pre>
       **
       *The source node where the request route should originated from. If empty,
       *self is assumed.
       * </pre>
       *
       * <code>optional string source_pub_key = 8;</code>
       */
      public java.lang.String getSourcePubKey() {
        return instance.getSourcePubKey();
      }
      /**
       * <pre>
       **
       *The source node where the request route should originated from. If empty,
       *self is assumed.
       * </pre>
       *
       * <code>optional string source_pub_key = 8;</code>
       */
      public com.google.protobuf.ByteString
          getSourcePubKeyBytes() {
        return instance.getSourcePubKeyBytes();
      }
      /**
       * <pre>
       **
       *The source node where the request route should originated from. If empty,
       *self is assumed.
       * </pre>
       *
       * <code>optional string source_pub_key = 8;</code>
       */
      public Builder setSourcePubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setSourcePubKey(value);
        return this;
      }
      /**
       * <pre>
       **
       *The source node where the request route should originated from. If empty,
       *self is assumed.
       * </pre>
       *
       * <code>optional string source_pub_key = 8;</code>
       */
      public Builder clearSourcePubKey() {
        copyOnWrite();
        instance.clearSourcePubKey();
        return this;
      }
      /**
       * <pre>
       **
       *The source node where the request route should originated from. If empty,
       *self is assumed.
       * </pre>
       *
       * <code>optional string source_pub_key = 8;</code>
       */
      public Builder setSourcePubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSourcePubKeyBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.QueryRoutesRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.QueryRoutesRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          ignoredNodes_.makeImmutable();
          ignoredEdges_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.QueryRoutesRequest other = (lnrpc.Rpc.QueryRoutesRequest) arg1;
          pubKey_ = visitor.visitString(!pubKey_.isEmpty(), pubKey_,
              !other.pubKey_.isEmpty(), other.pubKey_);
          amt_ = visitor.visitLong(amt_ != 0L, amt_,
              other.amt_ != 0L, other.amt_);
          numRoutes_ = visitor.visitInt(numRoutes_ != 0, numRoutes_,
              other.numRoutes_ != 0, other.numRoutes_);
          finalCltvDelta_ = visitor.visitInt(finalCltvDelta_ != 0, finalCltvDelta_,
              other.finalCltvDelta_ != 0, other.finalCltvDelta_);
          feeLimit_ = visitor.visitMessage(feeLimit_, other.feeLimit_);
          ignoredNodes_= visitor.visitList(ignoredNodes_, other.ignoredNodes_);
          ignoredEdges_= visitor.visitList(ignoredEdges_, other.ignoredEdges_);
          sourcePubKey_ = visitor.visitString(!sourcePubKey_.isEmpty(), sourcePubKey_,
              !other.sourcePubKey_.isEmpty(), other.sourcePubKey_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  pubKey_ = s;
                  break;
                }
                case 16: {

                  amt_ = input.readInt64();
                  break;
                }
                case 24: {

                  numRoutes_ = input.readInt32();
                  break;
                }
                case 32: {

                  finalCltvDelta_ = input.readInt32();
                  break;
                }
                case 42: {
                  lnrpc.Rpc.FeeLimit.Builder subBuilder = null;
                  if (feeLimit_ != null) {
                    subBuilder = feeLimit_.toBuilder();
                  }
                  feeLimit_ = input.readMessage(lnrpc.Rpc.FeeLimit.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(feeLimit_);
                    feeLimit_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 50: {
                  if (!ignoredNodes_.isModifiable()) {
                    ignoredNodes_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(ignoredNodes_);
                  }
                  ignoredNodes_.add(input.readBytes());
                  break;
                }
                case 58: {
                  if (!ignoredEdges_.isModifiable()) {
                    ignoredEdges_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(ignoredEdges_);
                  }
                  ignoredEdges_.add(
                      input.readMessage(lnrpc.Rpc.EdgeLocator.parser(), extensionRegistry));
                  break;
                }
                case 66: {
                  String s = input.readStringRequireUtf8();

                  sourcePubKey_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.QueryRoutesRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.QueryRoutesRequest)
    private static final lnrpc.Rpc.QueryRoutesRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new QueryRoutesRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.QueryRoutesRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<QueryRoutesRequest> PARSER;

    public static com.google.protobuf.Parser<QueryRoutesRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface EdgeLocatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.EdgeLocator)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The short channel id of this edge.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    long getChannelId();

    /**
     * <pre>
     **
     *The direction of this edge. If direction_reverse is false, the direction
     *of this edge is from the channel endpoint with the lexicographically smaller
     *pub key to the endpoint with the larger pub key. If direction_reverse is
     *is true, the edge goes the other way.
     * </pre>
     *
     * <code>optional bool direction_reverse = 2;</code>
     */
    boolean getDirectionReverse();
  }
  /**
   * Protobuf type {@code lnrpc.EdgeLocator}
   */
  public  static final class EdgeLocator extends
      com.google.protobuf.GeneratedMessageLite<
          EdgeLocator, EdgeLocator.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.EdgeLocator)
      EdgeLocatorOrBuilder {
    private EdgeLocator() {
    }
    public static final int CHANNEL_ID_FIELD_NUMBER = 1;
    private long channelId_;
    /**
     * <pre>
     *&#47; The short channel id of this edge.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    public long getChannelId() {
      return channelId_;
    }
    /**
     * <pre>
     *&#47; The short channel id of this edge.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    private void setChannelId(long value) {
      
      channelId_ = value;
    }
    /**
     * <pre>
     *&#47; The short channel id of this edge.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    private void clearChannelId() {
      
      channelId_ = 0L;
    }

    public static final int DIRECTION_REVERSE_FIELD_NUMBER = 2;
    private boolean directionReverse_;
    /**
     * <pre>
     **
     *The direction of this edge. If direction_reverse is false, the direction
     *of this edge is from the channel endpoint with the lexicographically smaller
     *pub key to the endpoint with the larger pub key. If direction_reverse is
     *is true, the edge goes the other way.
     * </pre>
     *
     * <code>optional bool direction_reverse = 2;</code>
     */
    public boolean getDirectionReverse() {
      return directionReverse_;
    }
    /**
     * <pre>
     **
     *The direction of this edge. If direction_reverse is false, the direction
     *of this edge is from the channel endpoint with the lexicographically smaller
     *pub key to the endpoint with the larger pub key. If direction_reverse is
     *is true, the edge goes the other way.
     * </pre>
     *
     * <code>optional bool direction_reverse = 2;</code>
     */
    private void setDirectionReverse(boolean value) {
      
      directionReverse_ = value;
    }
    /**
     * <pre>
     **
     *The direction of this edge. If direction_reverse is false, the direction
     *of this edge is from the channel endpoint with the lexicographically smaller
     *pub key to the endpoint with the larger pub key. If direction_reverse is
     *is true, the edge goes the other way.
     * </pre>
     *
     * <code>optional bool direction_reverse = 2;</code>
     */
    private void clearDirectionReverse() {
      
      directionReverse_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelId_ != 0L) {
        output.writeUInt64(1, channelId_);
      }
      if (directionReverse_ != false) {
        output.writeBool(2, directionReverse_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, channelId_);
      }
      if (directionReverse_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, directionReverse_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.EdgeLocator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.EdgeLocator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EdgeLocator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.EdgeLocator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.EdgeLocator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.EdgeLocator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.EdgeLocator, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.EdgeLocator)
        lnrpc.Rpc.EdgeLocatorOrBuilder {
      // Construct using lnrpc.Rpc.EdgeLocator.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The short channel id of this edge.
       * </pre>
       *
       * <code>optional uint64 channel_id = 1;</code>
       */
      public long getChannelId() {
        return instance.getChannelId();
      }
      /**
       * <pre>
       *&#47; The short channel id of this edge.
       * </pre>
       *
       * <code>optional uint64 channel_id = 1;</code>
       */
      public Builder setChannelId(long value) {
        copyOnWrite();
        instance.setChannelId(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The short channel id of this edge.
       * </pre>
       *
       * <code>optional uint64 channel_id = 1;</code>
       */
      public Builder clearChannelId() {
        copyOnWrite();
        instance.clearChannelId();
        return this;
      }

      /**
       * <pre>
       **
       *The direction of this edge. If direction_reverse is false, the direction
       *of this edge is from the channel endpoint with the lexicographically smaller
       *pub key to the endpoint with the larger pub key. If direction_reverse is
       *is true, the edge goes the other way.
       * </pre>
       *
       * <code>optional bool direction_reverse = 2;</code>
       */
      public boolean getDirectionReverse() {
        return instance.getDirectionReverse();
      }
      /**
       * <pre>
       **
       *The direction of this edge. If direction_reverse is false, the direction
       *of this edge is from the channel endpoint with the lexicographically smaller
       *pub key to the endpoint with the larger pub key. If direction_reverse is
       *is true, the edge goes the other way.
       * </pre>
       *
       * <code>optional bool direction_reverse = 2;</code>
       */
      public Builder setDirectionReverse(boolean value) {
        copyOnWrite();
        instance.setDirectionReverse(value);
        return this;
      }
      /**
       * <pre>
       **
       *The direction of this edge. If direction_reverse is false, the direction
       *of this edge is from the channel endpoint with the lexicographically smaller
       *pub key to the endpoint with the larger pub key. If direction_reverse is
       *is true, the edge goes the other way.
       * </pre>
       *
       * <code>optional bool direction_reverse = 2;</code>
       */
      public Builder clearDirectionReverse() {
        copyOnWrite();
        instance.clearDirectionReverse();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.EdgeLocator)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.EdgeLocator();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.EdgeLocator other = (lnrpc.Rpc.EdgeLocator) arg1;
          channelId_ = visitor.visitLong(channelId_ != 0L, channelId_,
              other.channelId_ != 0L, other.channelId_);
          directionReverse_ = visitor.visitBoolean(directionReverse_ != false, directionReverse_,
              other.directionReverse_ != false, other.directionReverse_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  channelId_ = input.readUInt64();
                  break;
                }
                case 16: {

                  directionReverse_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.EdgeLocator.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.EdgeLocator)
    private static final lnrpc.Rpc.EdgeLocator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EdgeLocator();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.EdgeLocator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<EdgeLocator> PARSER;

    public static com.google.protobuf.Parser<EdgeLocator> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface QueryRoutesResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.QueryRoutesResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    java.util.List<lnrpc.Rpc.Route> 
        getRoutesList();
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    lnrpc.Rpc.Route getRoutes(int index);
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    int getRoutesCount();
  }
  /**
   * Protobuf type {@code lnrpc.QueryRoutesResponse}
   */
  public  static final class QueryRoutesResponse extends
      com.google.protobuf.GeneratedMessageLite<
          QueryRoutesResponse, QueryRoutesResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.QueryRoutesResponse)
      QueryRoutesResponseOrBuilder {
    private QueryRoutesResponse() {
      routes_ = emptyProtobufList();
    }
    public static final int ROUTES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Route> routes_;
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.Route> getRoutesList() {
      return routes_;
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.RouteOrBuilder> 
        getRoutesOrBuilderList() {
      return routes_;
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    public int getRoutesCount() {
      return routes_.size();
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    public lnrpc.Rpc.Route getRoutes(int index) {
      return routes_.get(index);
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    public lnrpc.Rpc.RouteOrBuilder getRoutesOrBuilder(
        int index) {
      return routes_.get(index);
    }
    private void ensureRoutesIsMutable() {
      if (!routes_.isModifiable()) {
        routes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(routes_);
       }
    }

    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void setRoutes(
        int index, lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRoutesIsMutable();
      routes_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void setRoutes(
        int index, lnrpc.Rpc.Route.Builder builderForValue) {
      ensureRoutesIsMutable();
      routes_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void addRoutes(lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRoutesIsMutable();
      routes_.add(value);
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void addRoutes(
        int index, lnrpc.Rpc.Route value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRoutesIsMutable();
      routes_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void addRoutes(
        lnrpc.Rpc.Route.Builder builderForValue) {
      ensureRoutesIsMutable();
      routes_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void addRoutes(
        int index, lnrpc.Rpc.Route.Builder builderForValue) {
      ensureRoutesIsMutable();
      routes_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void addAllRoutes(
        java.lang.Iterable<? extends lnrpc.Rpc.Route> values) {
      ensureRoutesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, routes_);
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void clearRoutes() {
      routes_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.Route routes = 1;</code>
     */
    private void removeRoutes(int index) {
      ensureRoutesIsMutable();
      routes_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < routes_.size(); i++) {
        output.writeMessage(1, routes_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < routes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, routes_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.QueryRoutesResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.QueryRoutesResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.QueryRoutesResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.QueryRoutesResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.QueryRoutesResponse)
        lnrpc.Rpc.QueryRoutesResponseOrBuilder {
      // Construct using lnrpc.Rpc.QueryRoutesResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.Route> getRoutesList() {
        return java.util.Collections.unmodifiableList(
            instance.getRoutesList());
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public int getRoutesCount() {
        return instance.getRoutesCount();
      }/**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public lnrpc.Rpc.Route getRoutes(int index) {
        return instance.getRoutes(index);
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder setRoutes(
          int index, lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.setRoutes(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder setRoutes(
          int index, lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.setRoutes(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder addRoutes(lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.addRoutes(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder addRoutes(
          int index, lnrpc.Rpc.Route value) {
        copyOnWrite();
        instance.addRoutes(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder addRoutes(
          lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.addRoutes(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder addRoutes(
          int index, lnrpc.Rpc.Route.Builder builderForValue) {
        copyOnWrite();
        instance.addRoutes(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder addAllRoutes(
          java.lang.Iterable<? extends lnrpc.Rpc.Route> values) {
        copyOnWrite();
        instance.addAllRoutes(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder clearRoutes() {
        copyOnWrite();
        instance.clearRoutes();
        return this;
      }
      /**
       * <code>repeated .lnrpc.Route routes = 1;</code>
       */
      public Builder removeRoutes(int index) {
        copyOnWrite();
        instance.removeRoutes(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.QueryRoutesResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.QueryRoutesResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          routes_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.QueryRoutesResponse other = (lnrpc.Rpc.QueryRoutesResponse) arg1;
          routes_= visitor.visitList(routes_, other.routes_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!routes_.isModifiable()) {
                    routes_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(routes_);
                  }
                  routes_.add(
                      input.readMessage(lnrpc.Rpc.Route.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.QueryRoutesResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.QueryRoutesResponse)
    private static final lnrpc.Rpc.QueryRoutesResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new QueryRoutesResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.QueryRoutesResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<QueryRoutesResponse> PARSER;

    public static com.google.protobuf.Parser<QueryRoutesResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface HopOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Hop)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    long getChanId();

    /**
     * <code>optional int64 chan_capacity = 2;</code>
     */
    long getChanCapacity();

    /**
     * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated long getAmtToForward();

    /**
     * <code>optional int64 fee = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated long getFee();

    /**
     * <code>optional uint32 expiry = 5;</code>
     */
    int getExpiry();

    /**
     * <code>optional int64 amt_to_forward_msat = 6;</code>
     */
    long getAmtToForwardMsat();

    /**
     * <code>optional int64 fee_msat = 7;</code>
     */
    long getFeeMsat();

    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    java.lang.String getPubKey();
    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    com.google.protobuf.ByteString
        getPubKeyBytes();
  }
  /**
   * Protobuf type {@code lnrpc.Hop}
   */
  public  static final class Hop extends
      com.google.protobuf.GeneratedMessageLite<
          Hop, Hop.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Hop)
      HopOrBuilder {
    private Hop() {
      pubKey_ = "";
    }
    public static final int CHAN_ID_FIELD_NUMBER = 1;
    private long chanId_;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public static final int CHAN_CAPACITY_FIELD_NUMBER = 2;
    private long chanCapacity_;
    /**
     * <code>optional int64 chan_capacity = 2;</code>
     */
    public long getChanCapacity() {
      return chanCapacity_;
    }
    /**
     * <code>optional int64 chan_capacity = 2;</code>
     */
    private void setChanCapacity(long value) {
      
      chanCapacity_ = value;
    }
    /**
     * <code>optional int64 chan_capacity = 2;</code>
     */
    private void clearChanCapacity() {
      
      chanCapacity_ = 0L;
    }

    public static final int AMT_TO_FORWARD_FIELD_NUMBER = 3;
    private long amtToForward_;
    /**
     * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getAmtToForward() {
      return amtToForward_;
    }
    /**
     * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
     */
    private void setAmtToForward(long value) {
      
      amtToForward_ = value;
    }
    /**
     * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
     */
    private void clearAmtToForward() {
      
      amtToForward_ = 0L;
    }

    public static final int FEE_FIELD_NUMBER = 4;
    private long fee_;
    /**
     * <code>optional int64 fee = 4 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getFee() {
      return fee_;
    }
    /**
     * <code>optional int64 fee = 4 [deprecated = true];</code>
     */
    private void setFee(long value) {
      
      fee_ = value;
    }
    /**
     * <code>optional int64 fee = 4 [deprecated = true];</code>
     */
    private void clearFee() {
      
      fee_ = 0L;
    }

    public static final int EXPIRY_FIELD_NUMBER = 5;
    private int expiry_;
    /**
     * <code>optional uint32 expiry = 5;</code>
     */
    public int getExpiry() {
      return expiry_;
    }
    /**
     * <code>optional uint32 expiry = 5;</code>
     */
    private void setExpiry(int value) {
      
      expiry_ = value;
    }
    /**
     * <code>optional uint32 expiry = 5;</code>
     */
    private void clearExpiry() {
      
      expiry_ = 0;
    }

    public static final int AMT_TO_FORWARD_MSAT_FIELD_NUMBER = 6;
    private long amtToForwardMsat_;
    /**
     * <code>optional int64 amt_to_forward_msat = 6;</code>
     */
    public long getAmtToForwardMsat() {
      return amtToForwardMsat_;
    }
    /**
     * <code>optional int64 amt_to_forward_msat = 6;</code>
     */
    private void setAmtToForwardMsat(long value) {
      
      amtToForwardMsat_ = value;
    }
    /**
     * <code>optional int64 amt_to_forward_msat = 6;</code>
     */
    private void clearAmtToForwardMsat() {
      
      amtToForwardMsat_ = 0L;
    }

    public static final int FEE_MSAT_FIELD_NUMBER = 7;
    private long feeMsat_;
    /**
     * <code>optional int64 fee_msat = 7;</code>
     */
    public long getFeeMsat() {
      return feeMsat_;
    }
    /**
     * <code>optional int64 fee_msat = 7;</code>
     */
    private void setFeeMsat(long value) {
      
      feeMsat_ = value;
    }
    /**
     * <code>optional int64 fee_msat = 7;</code>
     */
    private void clearFeeMsat() {
      
      feeMsat_ = 0L;
    }

    public static final int PUB_KEY_FIELD_NUMBER = 8;
    private java.lang.String pubKey_;
    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    public java.lang.String getPubKey() {
      return pubKey_;
    }
    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    public com.google.protobuf.ByteString
        getPubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubKey_);
    }
    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    private void setPubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubKey_ = value;
    }
    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    private void clearPubKey() {
      
      pubKey_ = getDefaultInstance().getPubKey();
    }
    /**
     * <pre>
     **
     *An optional public key of the hop. If the public key is given, the payment
     *can be executed without relying on a copy of the channel graph.
     * </pre>
     *
     * <code>optional string pub_key = 8;</code>
     */
    private void setPubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubKey_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (chanId_ != 0L) {
        output.writeUInt64(1, chanId_);
      }
      if (chanCapacity_ != 0L) {
        output.writeInt64(2, chanCapacity_);
      }
      if (amtToForward_ != 0L) {
        output.writeInt64(3, amtToForward_);
      }
      if (fee_ != 0L) {
        output.writeInt64(4, fee_);
      }
      if (expiry_ != 0) {
        output.writeUInt32(5, expiry_);
      }
      if (amtToForwardMsat_ != 0L) {
        output.writeInt64(6, amtToForwardMsat_);
      }
      if (feeMsat_ != 0L) {
        output.writeInt64(7, feeMsat_);
      }
      if (!pubKey_.isEmpty()) {
        output.writeString(8, getPubKey());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, chanId_);
      }
      if (chanCapacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, chanCapacity_);
      }
      if (amtToForward_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, amtToForward_);
      }
      if (fee_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, fee_);
      }
      if (expiry_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, expiry_);
      }
      if (amtToForwardMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, amtToForwardMsat_);
      }
      if (feeMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, feeMsat_);
      }
      if (!pubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getPubKey());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Hop parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Hop parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Hop parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Hop parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Hop parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Hop parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Hop parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Hop parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Hop parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Hop parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Hop prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Hop}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Hop, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Hop)
        lnrpc.Rpc.HopOrBuilder {
      // Construct using lnrpc.Rpc.Hop.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      /**
       * <code>optional int64 chan_capacity = 2;</code>
       */
      public long getChanCapacity() {
        return instance.getChanCapacity();
      }
      /**
       * <code>optional int64 chan_capacity = 2;</code>
       */
      public Builder setChanCapacity(long value) {
        copyOnWrite();
        instance.setChanCapacity(value);
        return this;
      }
      /**
       * <code>optional int64 chan_capacity = 2;</code>
       */
      public Builder clearChanCapacity() {
        copyOnWrite();
        instance.clearChanCapacity();
        return this;
      }

      /**
       * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public long getAmtToForward() {
        return instance.getAmtToForward();
      }
      /**
       * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setAmtToForward(long value) {
        copyOnWrite();
        instance.setAmtToForward(value);
        return this;
      }
      /**
       * <code>optional int64 amt_to_forward = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearAmtToForward() {
        copyOnWrite();
        instance.clearAmtToForward();
        return this;
      }

      /**
       * <code>optional int64 fee = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public long getFee() {
        return instance.getFee();
      }
      /**
       * <code>optional int64 fee = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setFee(long value) {
        copyOnWrite();
        instance.setFee(value);
        return this;
      }
      /**
       * <code>optional int64 fee = 4 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearFee() {
        copyOnWrite();
        instance.clearFee();
        return this;
      }

      /**
       * <code>optional uint32 expiry = 5;</code>
       */
      public int getExpiry() {
        return instance.getExpiry();
      }
      /**
       * <code>optional uint32 expiry = 5;</code>
       */
      public Builder setExpiry(int value) {
        copyOnWrite();
        instance.setExpiry(value);
        return this;
      }
      /**
       * <code>optional uint32 expiry = 5;</code>
       */
      public Builder clearExpiry() {
        copyOnWrite();
        instance.clearExpiry();
        return this;
      }

      /**
       * <code>optional int64 amt_to_forward_msat = 6;</code>
       */
      public long getAmtToForwardMsat() {
        return instance.getAmtToForwardMsat();
      }
      /**
       * <code>optional int64 amt_to_forward_msat = 6;</code>
       */
      public Builder setAmtToForwardMsat(long value) {
        copyOnWrite();
        instance.setAmtToForwardMsat(value);
        return this;
      }
      /**
       * <code>optional int64 amt_to_forward_msat = 6;</code>
       */
      public Builder clearAmtToForwardMsat() {
        copyOnWrite();
        instance.clearAmtToForwardMsat();
        return this;
      }

      /**
       * <code>optional int64 fee_msat = 7;</code>
       */
      public long getFeeMsat() {
        return instance.getFeeMsat();
      }
      /**
       * <code>optional int64 fee_msat = 7;</code>
       */
      public Builder setFeeMsat(long value) {
        copyOnWrite();
        instance.setFeeMsat(value);
        return this;
      }
      /**
       * <code>optional int64 fee_msat = 7;</code>
       */
      public Builder clearFeeMsat() {
        copyOnWrite();
        instance.clearFeeMsat();
        return this;
      }

      /**
       * <pre>
       **
       *An optional public key of the hop. If the public key is given, the payment
       *can be executed without relying on a copy of the channel graph.
       * </pre>
       *
       * <code>optional string pub_key = 8;</code>
       */
      public java.lang.String getPubKey() {
        return instance.getPubKey();
      }
      /**
       * <pre>
       **
       *An optional public key of the hop. If the public key is given, the payment
       *can be executed without relying on a copy of the channel graph.
       * </pre>
       *
       * <code>optional string pub_key = 8;</code>
       */
      public com.google.protobuf.ByteString
          getPubKeyBytes() {
        return instance.getPubKeyBytes();
      }
      /**
       * <pre>
       **
       *An optional public key of the hop. If the public key is given, the payment
       *can be executed without relying on a copy of the channel graph.
       * </pre>
       *
       * <code>optional string pub_key = 8;</code>
       */
      public Builder setPubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubKey(value);
        return this;
      }
      /**
       * <pre>
       **
       *An optional public key of the hop. If the public key is given, the payment
       *can be executed without relying on a copy of the channel graph.
       * </pre>
       *
       * <code>optional string pub_key = 8;</code>
       */
      public Builder clearPubKey() {
        copyOnWrite();
        instance.clearPubKey();
        return this;
      }
      /**
       * <pre>
       **
       *An optional public key of the hop. If the public key is given, the payment
       *can be executed without relying on a copy of the channel graph.
       * </pre>
       *
       * <code>optional string pub_key = 8;</code>
       */
      public Builder setPubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubKeyBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Hop)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Hop();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Hop other = (lnrpc.Rpc.Hop) arg1;
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          chanCapacity_ = visitor.visitLong(chanCapacity_ != 0L, chanCapacity_,
              other.chanCapacity_ != 0L, other.chanCapacity_);
          amtToForward_ = visitor.visitLong(amtToForward_ != 0L, amtToForward_,
              other.amtToForward_ != 0L, other.amtToForward_);
          fee_ = visitor.visitLong(fee_ != 0L, fee_,
              other.fee_ != 0L, other.fee_);
          expiry_ = visitor.visitInt(expiry_ != 0, expiry_,
              other.expiry_ != 0, other.expiry_);
          amtToForwardMsat_ = visitor.visitLong(amtToForwardMsat_ != 0L, amtToForwardMsat_,
              other.amtToForwardMsat_ != 0L, other.amtToForwardMsat_);
          feeMsat_ = visitor.visitLong(feeMsat_ != 0L, feeMsat_,
              other.feeMsat_ != 0L, other.feeMsat_);
          pubKey_ = visitor.visitString(!pubKey_.isEmpty(), pubKey_,
              !other.pubKey_.isEmpty(), other.pubKey_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  chanId_ = input.readUInt64();
                  break;
                }
                case 16: {

                  chanCapacity_ = input.readInt64();
                  break;
                }
                case 24: {

                  amtToForward_ = input.readInt64();
                  break;
                }
                case 32: {

                  fee_ = input.readInt64();
                  break;
                }
                case 40: {

                  expiry_ = input.readUInt32();
                  break;
                }
                case 48: {

                  amtToForwardMsat_ = input.readInt64();
                  break;
                }
                case 56: {

                  feeMsat_ = input.readInt64();
                  break;
                }
                case 66: {
                  String s = input.readStringRequireUtf8();

                  pubKey_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Hop.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Hop)
    private static final lnrpc.Rpc.Hop DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Hop();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Hop getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Hop> PARSER;

    public static com.google.protobuf.Parser<Hop> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface RouteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Route)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The cumulative (final) time lock across the entire route.  This is the CLTV
     *value that should be extended to the first hop in the route. All other hops
     *will decrement the time-lock as advertised, leaving enough time for all
     *hops to wait for or present the payment preimage to complete the payment.
     * </pre>
     *
     * <code>optional uint32 total_time_lock = 1;</code>
     */
    int getTotalTimeLock();

    /**
     * <pre>
     **
     *The sum of the fees paid at each hop within the final route.  In the case
     *of a one-hop payment, this value will be zero as we don't need to pay a fee
     *it ourself.
     * </pre>
     *
     * <code>optional int64 total_fees = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated long getTotalFees();

    /**
     * <pre>
     **
     *The total amount of funds required to complete a payment over this route.
     *This value includes the cumulative fees at each hop. As a result, the HTLC
     *extended to the first-hop in the route will need to have at least this many
     *satoshis, otherwise the route will fail at an intermediate node due to an
     *insufficient amount of fees.
     * </pre>
     *
     * <code>optional int64 total_amt = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated long getTotalAmt();

    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    java.util.List<lnrpc.Rpc.Hop> 
        getHopsList();
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    lnrpc.Rpc.Hop getHops(int index);
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    int getHopsCount();

    /**
     * <pre>
     **
     *The total fees in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_fees_msat = 5;</code>
     */
    long getTotalFeesMsat();

    /**
     * <pre>
     **
     *The total amount in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_amt_msat = 6;</code>
     */
    long getTotalAmtMsat();
  }
  /**
   * <pre>
   **
   *A path through the channel graph which runs over one or more channels in
   *succession. This struct carries all the information required to craft the
   *Sphinx onion packet, and send the payment along the first hop in the path. A
   *route is only selected as valid if all the channels have sufficient capacity to
   *carry the initial payment amount after fees are accounted for.
   * </pre>
   *
   * Protobuf type {@code lnrpc.Route}
   */
  public  static final class Route extends
      com.google.protobuf.GeneratedMessageLite<
          Route, Route.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Route)
      RouteOrBuilder {
    private Route() {
      hops_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int TOTAL_TIME_LOCK_FIELD_NUMBER = 1;
    private int totalTimeLock_;
    /**
     * <pre>
     **
     *The cumulative (final) time lock across the entire route.  This is the CLTV
     *value that should be extended to the first hop in the route. All other hops
     *will decrement the time-lock as advertised, leaving enough time for all
     *hops to wait for or present the payment preimage to complete the payment.
     * </pre>
     *
     * <code>optional uint32 total_time_lock = 1;</code>
     */
    public int getTotalTimeLock() {
      return totalTimeLock_;
    }
    /**
     * <pre>
     **
     *The cumulative (final) time lock across the entire route.  This is the CLTV
     *value that should be extended to the first hop in the route. All other hops
     *will decrement the time-lock as advertised, leaving enough time for all
     *hops to wait for or present the payment preimage to complete the payment.
     * </pre>
     *
     * <code>optional uint32 total_time_lock = 1;</code>
     */
    private void setTotalTimeLock(int value) {
      
      totalTimeLock_ = value;
    }
    /**
     * <pre>
     **
     *The cumulative (final) time lock across the entire route.  This is the CLTV
     *value that should be extended to the first hop in the route. All other hops
     *will decrement the time-lock as advertised, leaving enough time for all
     *hops to wait for or present the payment preimage to complete the payment.
     * </pre>
     *
     * <code>optional uint32 total_time_lock = 1;</code>
     */
    private void clearTotalTimeLock() {
      
      totalTimeLock_ = 0;
    }

    public static final int TOTAL_FEES_FIELD_NUMBER = 2;
    private long totalFees_;
    /**
     * <pre>
     **
     *The sum of the fees paid at each hop within the final route.  In the case
     *of a one-hop payment, this value will be zero as we don't need to pay a fee
     *it ourself.
     * </pre>
     *
     * <code>optional int64 total_fees = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getTotalFees() {
      return totalFees_;
    }
    /**
     * <pre>
     **
     *The sum of the fees paid at each hop within the final route.  In the case
     *of a one-hop payment, this value will be zero as we don't need to pay a fee
     *it ourself.
     * </pre>
     *
     * <code>optional int64 total_fees = 2 [deprecated = true];</code>
     */
    private void setTotalFees(long value) {
      
      totalFees_ = value;
    }
    /**
     * <pre>
     **
     *The sum of the fees paid at each hop within the final route.  In the case
     *of a one-hop payment, this value will be zero as we don't need to pay a fee
     *it ourself.
     * </pre>
     *
     * <code>optional int64 total_fees = 2 [deprecated = true];</code>
     */
    private void clearTotalFees() {
      
      totalFees_ = 0L;
    }

    public static final int TOTAL_AMT_FIELD_NUMBER = 3;
    private long totalAmt_;
    /**
     * <pre>
     **
     *The total amount of funds required to complete a payment over this route.
     *This value includes the cumulative fees at each hop. As a result, the HTLC
     *extended to the first-hop in the route will need to have at least this many
     *satoshis, otherwise the route will fail at an intermediate node due to an
     *insufficient amount of fees.
     * </pre>
     *
     * <code>optional int64 total_amt = 3 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getTotalAmt() {
      return totalAmt_;
    }
    /**
     * <pre>
     **
     *The total amount of funds required to complete a payment over this route.
     *This value includes the cumulative fees at each hop. As a result, the HTLC
     *extended to the first-hop in the route will need to have at least this many
     *satoshis, otherwise the route will fail at an intermediate node due to an
     *insufficient amount of fees.
     * </pre>
     *
     * <code>optional int64 total_amt = 3 [deprecated = true];</code>
     */
    private void setTotalAmt(long value) {
      
      totalAmt_ = value;
    }
    /**
     * <pre>
     **
     *The total amount of funds required to complete a payment over this route.
     *This value includes the cumulative fees at each hop. As a result, the HTLC
     *extended to the first-hop in the route will need to have at least this many
     *satoshis, otherwise the route will fail at an intermediate node due to an
     *insufficient amount of fees.
     * </pre>
     *
     * <code>optional int64 total_amt = 3 [deprecated = true];</code>
     */
    private void clearTotalAmt() {
      
      totalAmt_ = 0L;
    }

    public static final int HOPS_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Hop> hops_;
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    public java.util.List<lnrpc.Rpc.Hop> getHopsList() {
      return hops_;
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.HopOrBuilder> 
        getHopsOrBuilderList() {
      return hops_;
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    public int getHopsCount() {
      return hops_.size();
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    public lnrpc.Rpc.Hop getHops(int index) {
      return hops_.get(index);
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    public lnrpc.Rpc.HopOrBuilder getHopsOrBuilder(
        int index) {
      return hops_.get(index);
    }
    private void ensureHopsIsMutable() {
      if (!hops_.isModifiable()) {
        hops_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(hops_);
       }
    }

    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void setHops(
        int index, lnrpc.Rpc.Hop value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHopsIsMutable();
      hops_.set(index, value);
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void setHops(
        int index, lnrpc.Rpc.Hop.Builder builderForValue) {
      ensureHopsIsMutable();
      hops_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void addHops(lnrpc.Rpc.Hop value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHopsIsMutable();
      hops_.add(value);
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void addHops(
        int index, lnrpc.Rpc.Hop value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHopsIsMutable();
      hops_.add(index, value);
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void addHops(
        lnrpc.Rpc.Hop.Builder builderForValue) {
      ensureHopsIsMutable();
      hops_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void addHops(
        int index, lnrpc.Rpc.Hop.Builder builderForValue) {
      ensureHopsIsMutable();
      hops_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void addAllHops(
        java.lang.Iterable<? extends lnrpc.Rpc.Hop> values) {
      ensureHopsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, hops_);
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void clearHops() {
      hops_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *Contains details concerning the specific forwarding details at each hop.
     * </pre>
     *
     * <code>repeated .lnrpc.Hop hops = 4;</code>
     */
    private void removeHops(int index) {
      ensureHopsIsMutable();
      hops_.remove(index);
    }

    public static final int TOTAL_FEES_MSAT_FIELD_NUMBER = 5;
    private long totalFeesMsat_;
    /**
     * <pre>
     **
     *The total fees in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_fees_msat = 5;</code>
     */
    public long getTotalFeesMsat() {
      return totalFeesMsat_;
    }
    /**
     * <pre>
     **
     *The total fees in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_fees_msat = 5;</code>
     */
    private void setTotalFeesMsat(long value) {
      
      totalFeesMsat_ = value;
    }
    /**
     * <pre>
     **
     *The total fees in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_fees_msat = 5;</code>
     */
    private void clearTotalFeesMsat() {
      
      totalFeesMsat_ = 0L;
    }

    public static final int TOTAL_AMT_MSAT_FIELD_NUMBER = 6;
    private long totalAmtMsat_;
    /**
     * <pre>
     **
     *The total amount in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_amt_msat = 6;</code>
     */
    public long getTotalAmtMsat() {
      return totalAmtMsat_;
    }
    /**
     * <pre>
     **
     *The total amount in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_amt_msat = 6;</code>
     */
    private void setTotalAmtMsat(long value) {
      
      totalAmtMsat_ = value;
    }
    /**
     * <pre>
     **
     *The total amount in millisatoshis.
     * </pre>
     *
     * <code>optional int64 total_amt_msat = 6;</code>
     */
    private void clearTotalAmtMsat() {
      
      totalAmtMsat_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (totalTimeLock_ != 0) {
        output.writeUInt32(1, totalTimeLock_);
      }
      if (totalFees_ != 0L) {
        output.writeInt64(2, totalFees_);
      }
      if (totalAmt_ != 0L) {
        output.writeInt64(3, totalAmt_);
      }
      for (int i = 0; i < hops_.size(); i++) {
        output.writeMessage(4, hops_.get(i));
      }
      if (totalFeesMsat_ != 0L) {
        output.writeInt64(5, totalFeesMsat_);
      }
      if (totalAmtMsat_ != 0L) {
        output.writeInt64(6, totalAmtMsat_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (totalTimeLock_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, totalTimeLock_);
      }
      if (totalFees_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, totalFees_);
      }
      if (totalAmt_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, totalAmt_);
      }
      for (int i = 0; i < hops_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, hops_.get(i));
      }
      if (totalFeesMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, totalFeesMsat_);
      }
      if (totalAmtMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, totalAmtMsat_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Route parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Route parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Route parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Route parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Route parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Route parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Route parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Route parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Route parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Route parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Route prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     **
     *A path through the channel graph which runs over one or more channels in
     *succession. This struct carries all the information required to craft the
     *Sphinx onion packet, and send the payment along the first hop in the path. A
     *route is only selected as valid if all the channels have sufficient capacity to
     *carry the initial payment amount after fees are accounted for.
     * </pre>
     *
     * Protobuf type {@code lnrpc.Route}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Route, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Route)
        lnrpc.Rpc.RouteOrBuilder {
      // Construct using lnrpc.Rpc.Route.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The cumulative (final) time lock across the entire route.  This is the CLTV
       *value that should be extended to the first hop in the route. All other hops
       *will decrement the time-lock as advertised, leaving enough time for all
       *hops to wait for or present the payment preimage to complete the payment.
       * </pre>
       *
       * <code>optional uint32 total_time_lock = 1;</code>
       */
      public int getTotalTimeLock() {
        return instance.getTotalTimeLock();
      }
      /**
       * <pre>
       **
       *The cumulative (final) time lock across the entire route.  This is the CLTV
       *value that should be extended to the first hop in the route. All other hops
       *will decrement the time-lock as advertised, leaving enough time for all
       *hops to wait for or present the payment preimage to complete the payment.
       * </pre>
       *
       * <code>optional uint32 total_time_lock = 1;</code>
       */
      public Builder setTotalTimeLock(int value) {
        copyOnWrite();
        instance.setTotalTimeLock(value);
        return this;
      }
      /**
       * <pre>
       **
       *The cumulative (final) time lock across the entire route.  This is the CLTV
       *value that should be extended to the first hop in the route. All other hops
       *will decrement the time-lock as advertised, leaving enough time for all
       *hops to wait for or present the payment preimage to complete the payment.
       * </pre>
       *
       * <code>optional uint32 total_time_lock = 1;</code>
       */
      public Builder clearTotalTimeLock() {
        copyOnWrite();
        instance.clearTotalTimeLock();
        return this;
      }

      /**
       * <pre>
       **
       *The sum of the fees paid at each hop within the final route.  In the case
       *of a one-hop payment, this value will be zero as we don't need to pay a fee
       *it ourself.
       * </pre>
       *
       * <code>optional int64 total_fees = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public long getTotalFees() {
        return instance.getTotalFees();
      }
      /**
       * <pre>
       **
       *The sum of the fees paid at each hop within the final route.  In the case
       *of a one-hop payment, this value will be zero as we don't need to pay a fee
       *it ourself.
       * </pre>
       *
       * <code>optional int64 total_fees = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setTotalFees(long value) {
        copyOnWrite();
        instance.setTotalFees(value);
        return this;
      }
      /**
       * <pre>
       **
       *The sum of the fees paid at each hop within the final route.  In the case
       *of a one-hop payment, this value will be zero as we don't need to pay a fee
       *it ourself.
       * </pre>
       *
       * <code>optional int64 total_fees = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearTotalFees() {
        copyOnWrite();
        instance.clearTotalFees();
        return this;
      }

      /**
       * <pre>
       **
       *The total amount of funds required to complete a payment over this route.
       *This value includes the cumulative fees at each hop. As a result, the HTLC
       *extended to the first-hop in the route will need to have at least this many
       *satoshis, otherwise the route will fail at an intermediate node due to an
       *insufficient amount of fees.
       * </pre>
       *
       * <code>optional int64 total_amt = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public long getTotalAmt() {
        return instance.getTotalAmt();
      }
      /**
       * <pre>
       **
       *The total amount of funds required to complete a payment over this route.
       *This value includes the cumulative fees at each hop. As a result, the HTLC
       *extended to the first-hop in the route will need to have at least this many
       *satoshis, otherwise the route will fail at an intermediate node due to an
       *insufficient amount of fees.
       * </pre>
       *
       * <code>optional int64 total_amt = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setTotalAmt(long value) {
        copyOnWrite();
        instance.setTotalAmt(value);
        return this;
      }
      /**
       * <pre>
       **
       *The total amount of funds required to complete a payment over this route.
       *This value includes the cumulative fees at each hop. As a result, the HTLC
       *extended to the first-hop in the route will need to have at least this many
       *satoshis, otherwise the route will fail at an intermediate node due to an
       *insufficient amount of fees.
       * </pre>
       *
       * <code>optional int64 total_amt = 3 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearTotalAmt() {
        copyOnWrite();
        instance.clearTotalAmt();
        return this;
      }

      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public java.util.List<lnrpc.Rpc.Hop> getHopsList() {
        return java.util.Collections.unmodifiableList(
            instance.getHopsList());
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public int getHopsCount() {
        return instance.getHopsCount();
      }/**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public lnrpc.Rpc.Hop getHops(int index) {
        return instance.getHops(index);
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder setHops(
          int index, lnrpc.Rpc.Hop value) {
        copyOnWrite();
        instance.setHops(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder setHops(
          int index, lnrpc.Rpc.Hop.Builder builderForValue) {
        copyOnWrite();
        instance.setHops(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder addHops(lnrpc.Rpc.Hop value) {
        copyOnWrite();
        instance.addHops(value);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder addHops(
          int index, lnrpc.Rpc.Hop value) {
        copyOnWrite();
        instance.addHops(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder addHops(
          lnrpc.Rpc.Hop.Builder builderForValue) {
        copyOnWrite();
        instance.addHops(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder addHops(
          int index, lnrpc.Rpc.Hop.Builder builderForValue) {
        copyOnWrite();
        instance.addHops(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder addAllHops(
          java.lang.Iterable<? extends lnrpc.Rpc.Hop> values) {
        copyOnWrite();
        instance.addAllHops(values);
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder clearHops() {
        copyOnWrite();
        instance.clearHops();
        return this;
      }
      /**
       * <pre>
       **
       *Contains details concerning the specific forwarding details at each hop.
       * </pre>
       *
       * <code>repeated .lnrpc.Hop hops = 4;</code>
       */
      public Builder removeHops(int index) {
        copyOnWrite();
        instance.removeHops(index);
        return this;
      }

      /**
       * <pre>
       **
       *The total fees in millisatoshis.
       * </pre>
       *
       * <code>optional int64 total_fees_msat = 5;</code>
       */
      public long getTotalFeesMsat() {
        return instance.getTotalFeesMsat();
      }
      /**
       * <pre>
       **
       *The total fees in millisatoshis.
       * </pre>
       *
       * <code>optional int64 total_fees_msat = 5;</code>
       */
      public Builder setTotalFeesMsat(long value) {
        copyOnWrite();
        instance.setTotalFeesMsat(value);
        return this;
      }
      /**
       * <pre>
       **
       *The total fees in millisatoshis.
       * </pre>
       *
       * <code>optional int64 total_fees_msat = 5;</code>
       */
      public Builder clearTotalFeesMsat() {
        copyOnWrite();
        instance.clearTotalFeesMsat();
        return this;
      }

      /**
       * <pre>
       **
       *The total amount in millisatoshis.
       * </pre>
       *
       * <code>optional int64 total_amt_msat = 6;</code>
       */
      public long getTotalAmtMsat() {
        return instance.getTotalAmtMsat();
      }
      /**
       * <pre>
       **
       *The total amount in millisatoshis.
       * </pre>
       *
       * <code>optional int64 total_amt_msat = 6;</code>
       */
      public Builder setTotalAmtMsat(long value) {
        copyOnWrite();
        instance.setTotalAmtMsat(value);
        return this;
      }
      /**
       * <pre>
       **
       *The total amount in millisatoshis.
       * </pre>
       *
       * <code>optional int64 total_amt_msat = 6;</code>
       */
      public Builder clearTotalAmtMsat() {
        copyOnWrite();
        instance.clearTotalAmtMsat();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Route)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Route();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          hops_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Route other = (lnrpc.Rpc.Route) arg1;
          totalTimeLock_ = visitor.visitInt(totalTimeLock_ != 0, totalTimeLock_,
              other.totalTimeLock_ != 0, other.totalTimeLock_);
          totalFees_ = visitor.visitLong(totalFees_ != 0L, totalFees_,
              other.totalFees_ != 0L, other.totalFees_);
          totalAmt_ = visitor.visitLong(totalAmt_ != 0L, totalAmt_,
              other.totalAmt_ != 0L, other.totalAmt_);
          hops_= visitor.visitList(hops_, other.hops_);
          totalFeesMsat_ = visitor.visitLong(totalFeesMsat_ != 0L, totalFeesMsat_,
              other.totalFeesMsat_ != 0L, other.totalFeesMsat_);
          totalAmtMsat_ = visitor.visitLong(totalAmtMsat_ != 0L, totalAmtMsat_,
              other.totalAmtMsat_ != 0L, other.totalAmtMsat_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  totalTimeLock_ = input.readUInt32();
                  break;
                }
                case 16: {

                  totalFees_ = input.readInt64();
                  break;
                }
                case 24: {

                  totalAmt_ = input.readInt64();
                  break;
                }
                case 34: {
                  if (!hops_.isModifiable()) {
                    hops_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(hops_);
                  }
                  hops_.add(
                      input.readMessage(lnrpc.Rpc.Hop.parser(), extensionRegistry));
                  break;
                }
                case 40: {

                  totalFeesMsat_ = input.readInt64();
                  break;
                }
                case 48: {

                  totalAmtMsat_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Route.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Route)
    private static final lnrpc.Rpc.Route DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Route();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Route getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Route> PARSER;

    public static com.google.protobuf.Parser<Route> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NodeInfoRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NodeInfoRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    java.lang.String getPubKey();
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    com.google.protobuf.ByteString
        getPubKeyBytes();
  }
  /**
   * Protobuf type {@code lnrpc.NodeInfoRequest}
   */
  public  static final class NodeInfoRequest extends
      com.google.protobuf.GeneratedMessageLite<
          NodeInfoRequest, NodeInfoRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NodeInfoRequest)
      NodeInfoRequestOrBuilder {
    private NodeInfoRequest() {
      pubKey_ = "";
    }
    public static final int PUB_KEY_FIELD_NUMBER = 1;
    private java.lang.String pubKey_;
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public java.lang.String getPubKey() {
      return pubKey_;
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubKey_);
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubKey_ = value;
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void clearPubKey() {
      
      pubKey_ = getDefaultInstance().getPubKey();
    }
    /**
     * <pre>
     *&#47; The 33-byte hex-encoded compressed public of the target node 
     * </pre>
     *
     * <code>optional string pub_key = 1;</code>
     */
    private void setPubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubKey_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!pubKey_.isEmpty()) {
        output.writeString(1, getPubKey());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!pubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPubKey());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NodeInfoRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NodeInfoRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NodeInfoRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NodeInfoRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NodeInfoRequest)
        lnrpc.Rpc.NodeInfoRequestOrBuilder {
      // Construct using lnrpc.Rpc.NodeInfoRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The 33-byte hex-encoded compressed public of the target node 
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public java.lang.String getPubKey() {
        return instance.getPubKey();
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded compressed public of the target node 
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPubKeyBytes() {
        return instance.getPubKeyBytes();
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded compressed public of the target node 
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubKey(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded compressed public of the target node 
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder clearPubKey() {
        copyOnWrite();
        instance.clearPubKey();
        return this;
      }
      /**
       * <pre>
       *&#47; The 33-byte hex-encoded compressed public of the target node 
       * </pre>
       *
       * <code>optional string pub_key = 1;</code>
       */
      public Builder setPubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubKeyBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NodeInfoRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NodeInfoRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NodeInfoRequest other = (lnrpc.Rpc.NodeInfoRequest) arg1;
          pubKey_ = visitor.visitString(!pubKey_.isEmpty(), pubKey_,
              !other.pubKey_.isEmpty(), other.pubKey_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  pubKey_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NodeInfoRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NodeInfoRequest)
    private static final lnrpc.Rpc.NodeInfoRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NodeInfoRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NodeInfoRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NodeInfoRequest> PARSER;

    public static com.google.protobuf.Parser<NodeInfoRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NodeInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NodeInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    boolean hasNode();
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    lnrpc.Rpc.LightningNode getNode();

    /**
     * <code>optional uint32 num_channels = 2;</code>
     */
    int getNumChannels();

    /**
     * <code>optional int64 total_capacity = 3;</code>
     */
    long getTotalCapacity();
  }
  /**
   * Protobuf type {@code lnrpc.NodeInfo}
   */
  public  static final class NodeInfo extends
      com.google.protobuf.GeneratedMessageLite<
          NodeInfo, NodeInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NodeInfo)
      NodeInfoOrBuilder {
    private NodeInfo() {
    }
    public static final int NODE_FIELD_NUMBER = 1;
    private lnrpc.Rpc.LightningNode node_;
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    public boolean hasNode() {
      return node_ != null;
    }
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    public lnrpc.Rpc.LightningNode getNode() {
      return node_ == null ? lnrpc.Rpc.LightningNode.getDefaultInstance() : node_;
    }
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    private void setNode(lnrpc.Rpc.LightningNode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      node_ = value;
      
      }
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    private void setNode(
        lnrpc.Rpc.LightningNode.Builder builderForValue) {
      node_ = builderForValue.build();
      
    }
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    private void mergeNode(lnrpc.Rpc.LightningNode value) {
      if (node_ != null &&
          node_ != lnrpc.Rpc.LightningNode.getDefaultInstance()) {
        node_ =
          lnrpc.Rpc.LightningNode.newBuilder(node_).mergeFrom(value).buildPartial();
      } else {
        node_ = value;
      }
      
    }
    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As
     *the graph is directed, a node will also have an incoming edge attached to
     *it for each outgoing edge.
     * </pre>
     *
     * <code>optional .lnrpc.LightningNode node = 1;</code>
     */
    private void clearNode() {  node_ = null;
      
    }

    public static final int NUM_CHANNELS_FIELD_NUMBER = 2;
    private int numChannels_;
    /**
     * <code>optional uint32 num_channels = 2;</code>
     */
    public int getNumChannels() {
      return numChannels_;
    }
    /**
     * <code>optional uint32 num_channels = 2;</code>
     */
    private void setNumChannels(int value) {
      
      numChannels_ = value;
    }
    /**
     * <code>optional uint32 num_channels = 2;</code>
     */
    private void clearNumChannels() {
      
      numChannels_ = 0;
    }

    public static final int TOTAL_CAPACITY_FIELD_NUMBER = 3;
    private long totalCapacity_;
    /**
     * <code>optional int64 total_capacity = 3;</code>
     */
    public long getTotalCapacity() {
      return totalCapacity_;
    }
    /**
     * <code>optional int64 total_capacity = 3;</code>
     */
    private void setTotalCapacity(long value) {
      
      totalCapacity_ = value;
    }
    /**
     * <code>optional int64 total_capacity = 3;</code>
     */
    private void clearTotalCapacity() {
      
      totalCapacity_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (node_ != null) {
        output.writeMessage(1, getNode());
      }
      if (numChannels_ != 0) {
        output.writeUInt32(2, numChannels_);
      }
      if (totalCapacity_ != 0L) {
        output.writeInt64(3, totalCapacity_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (node_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getNode());
      }
      if (numChannels_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, numChannels_);
      }
      if (totalCapacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, totalCapacity_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NodeInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NodeInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NodeInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NodeInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NodeInfo)
        lnrpc.Rpc.NodeInfoOrBuilder {
      // Construct using lnrpc.Rpc.NodeInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *An individual vertex/node within the channel graph. A node is
       *connected to other nodes by one or more channel edges emanating from it. As
       *the graph is directed, a node will also have an incoming edge attached to
       *it for each outgoing edge.
       * </pre>
       *
       * <code>optional .lnrpc.LightningNode node = 1;</code>
       */
      public boolean hasNode() {
        return instance.hasNode();
      }
      /**
       * <pre>
       **
       *An individual vertex/node within the channel graph. A node is
       *connected to other nodes by one or more channel edges emanating from it. As
       *the graph is directed, a node will also have an incoming edge attached to
       *it for each outgoing edge.
       * </pre>
       *
       * <code>optional .lnrpc.LightningNode node = 1;</code>
       */
      public lnrpc.Rpc.LightningNode getNode() {
        return instance.getNode();
      }
      /**
       * <pre>
       **
       *An individual vertex/node within the channel graph. A node is
       *connected to other nodes by one or more channel edges emanating from it. As
       *the graph is directed, a node will also have an incoming edge attached to
       *it for each outgoing edge.
       * </pre>
       *
       * <code>optional .lnrpc.LightningNode node = 1;</code>
       */
      public Builder setNode(lnrpc.Rpc.LightningNode value) {
        copyOnWrite();
        instance.setNode(value);
        return this;
        }
      /**
       * <pre>
       **
       *An individual vertex/node within the channel graph. A node is
       *connected to other nodes by one or more channel edges emanating from it. As
       *the graph is directed, a node will also have an incoming edge attached to
       *it for each outgoing edge.
       * </pre>
       *
       * <code>optional .lnrpc.LightningNode node = 1;</code>
       */
      public Builder setNode(
          lnrpc.Rpc.LightningNode.Builder builderForValue) {
        copyOnWrite();
        instance.setNode(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *An individual vertex/node within the channel graph. A node is
       *connected to other nodes by one or more channel edges emanating from it. As
       *the graph is directed, a node will also have an incoming edge attached to
       *it for each outgoing edge.
       * </pre>
       *
       * <code>optional .lnrpc.LightningNode node = 1;</code>
       */
      public Builder mergeNode(lnrpc.Rpc.LightningNode value) {
        copyOnWrite();
        instance.mergeNode(value);
        return this;
      }
      /**
       * <pre>
       **
       *An individual vertex/node within the channel graph. A node is
       *connected to other nodes by one or more channel edges emanating from it. As
       *the graph is directed, a node will also have an incoming edge attached to
       *it for each outgoing edge.
       * </pre>
       *
       * <code>optional .lnrpc.LightningNode node = 1;</code>
       */
      public Builder clearNode() {  copyOnWrite();
        instance.clearNode();
        return this;
      }

      /**
       * <code>optional uint32 num_channels = 2;</code>
       */
      public int getNumChannels() {
        return instance.getNumChannels();
      }
      /**
       * <code>optional uint32 num_channels = 2;</code>
       */
      public Builder setNumChannels(int value) {
        copyOnWrite();
        instance.setNumChannels(value);
        return this;
      }
      /**
       * <code>optional uint32 num_channels = 2;</code>
       */
      public Builder clearNumChannels() {
        copyOnWrite();
        instance.clearNumChannels();
        return this;
      }

      /**
       * <code>optional int64 total_capacity = 3;</code>
       */
      public long getTotalCapacity() {
        return instance.getTotalCapacity();
      }
      /**
       * <code>optional int64 total_capacity = 3;</code>
       */
      public Builder setTotalCapacity(long value) {
        copyOnWrite();
        instance.setTotalCapacity(value);
        return this;
      }
      /**
       * <code>optional int64 total_capacity = 3;</code>
       */
      public Builder clearTotalCapacity() {
        copyOnWrite();
        instance.clearTotalCapacity();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NodeInfo)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NodeInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NodeInfo other = (lnrpc.Rpc.NodeInfo) arg1;
          node_ = visitor.visitMessage(node_, other.node_);
          numChannels_ = visitor.visitInt(numChannels_ != 0, numChannels_,
              other.numChannels_ != 0, other.numChannels_);
          totalCapacity_ = visitor.visitLong(totalCapacity_ != 0L, totalCapacity_,
              other.totalCapacity_ != 0L, other.totalCapacity_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.LightningNode.Builder subBuilder = null;
                  if (node_ != null) {
                    subBuilder = node_.toBuilder();
                  }
                  node_ = input.readMessage(lnrpc.Rpc.LightningNode.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(node_);
                    node_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 16: {

                  numChannels_ = input.readUInt32();
                  break;
                }
                case 24: {

                  totalCapacity_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NodeInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NodeInfo)
    private static final lnrpc.Rpc.NodeInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NodeInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NodeInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NodeInfo> PARSER;

    public static com.google.protobuf.Parser<NodeInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LightningNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.LightningNode)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 last_update = 1;</code>
     */
    int getLastUpdate();

    /**
     * <code>optional string pub_key = 2;</code>
     */
    java.lang.String getPubKey();
    /**
     * <code>optional string pub_key = 2;</code>
     */
    com.google.protobuf.ByteString
        getPubKeyBytes();

    /**
     * <code>optional string alias = 3;</code>
     */
    java.lang.String getAlias();
    /**
     * <code>optional string alias = 3;</code>
     */
    com.google.protobuf.ByteString
        getAliasBytes();

    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    java.util.List<lnrpc.Rpc.NodeAddress> 
        getAddressesList();
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    lnrpc.Rpc.NodeAddress getAddresses(int index);
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    int getAddressesCount();

    /**
     * <code>optional string color = 5;</code>
     */
    java.lang.String getColor();
    /**
     * <code>optional string color = 5;</code>
     */
    com.google.protobuf.ByteString
        getColorBytes();
  }
  /**
   * <pre>
   **
   *An individual vertex/node within the channel graph. A node is
   *connected to other nodes by one or more channel edges emanating from it. As the
   *graph is directed, a node will also have an incoming edge attached to it for
   *each outgoing edge.
   * </pre>
   *
   * Protobuf type {@code lnrpc.LightningNode}
   */
  public  static final class LightningNode extends
      com.google.protobuf.GeneratedMessageLite<
          LightningNode, LightningNode.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.LightningNode)
      LightningNodeOrBuilder {
    private LightningNode() {
      pubKey_ = "";
      alias_ = "";
      addresses_ = emptyProtobufList();
      color_ = "";
    }
    private int bitField0_;
    public static final int LAST_UPDATE_FIELD_NUMBER = 1;
    private int lastUpdate_;
    /**
     * <code>optional uint32 last_update = 1;</code>
     */
    public int getLastUpdate() {
      return lastUpdate_;
    }
    /**
     * <code>optional uint32 last_update = 1;</code>
     */
    private void setLastUpdate(int value) {
      
      lastUpdate_ = value;
    }
    /**
     * <code>optional uint32 last_update = 1;</code>
     */
    private void clearLastUpdate() {
      
      lastUpdate_ = 0;
    }

    public static final int PUB_KEY_FIELD_NUMBER = 2;
    private java.lang.String pubKey_;
    /**
     * <code>optional string pub_key = 2;</code>
     */
    public java.lang.String getPubKey() {
      return pubKey_;
    }
    /**
     * <code>optional string pub_key = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPubKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(pubKey_);
    }
    /**
     * <code>optional string pub_key = 2;</code>
     */
    private void setPubKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pubKey_ = value;
    }
    /**
     * <code>optional string pub_key = 2;</code>
     */
    private void clearPubKey() {
      
      pubKey_ = getDefaultInstance().getPubKey();
    }
    /**
     * <code>optional string pub_key = 2;</code>
     */
    private void setPubKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pubKey_ = value.toStringUtf8();
    }

    public static final int ALIAS_FIELD_NUMBER = 3;
    private java.lang.String alias_;
    /**
     * <code>optional string alias = 3;</code>
     */
    public java.lang.String getAlias() {
      return alias_;
    }
    /**
     * <code>optional string alias = 3;</code>
     */
    public com.google.protobuf.ByteString
        getAliasBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(alias_);
    }
    /**
     * <code>optional string alias = 3;</code>
     */
    private void setAlias(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      alias_ = value;
    }
    /**
     * <code>optional string alias = 3;</code>
     */
    private void clearAlias() {
      
      alias_ = getDefaultInstance().getAlias();
    }
    /**
     * <code>optional string alias = 3;</code>
     */
    private void setAliasBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      alias_ = value.toStringUtf8();
    }

    public static final int ADDRESSES_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.NodeAddress> addresses_;
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    public java.util.List<lnrpc.Rpc.NodeAddress> getAddressesList() {
      return addresses_;
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.NodeAddressOrBuilder> 
        getAddressesOrBuilderList() {
      return addresses_;
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    public int getAddressesCount() {
      return addresses_.size();
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    public lnrpc.Rpc.NodeAddress getAddresses(int index) {
      return addresses_.get(index);
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    public lnrpc.Rpc.NodeAddressOrBuilder getAddressesOrBuilder(
        int index) {
      return addresses_.get(index);
    }
    private void ensureAddressesIsMutable() {
      if (!addresses_.isModifiable()) {
        addresses_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(addresses_);
       }
    }

    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void setAddresses(
        int index, lnrpc.Rpc.NodeAddress value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureAddressesIsMutable();
      addresses_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void setAddresses(
        int index, lnrpc.Rpc.NodeAddress.Builder builderForValue) {
      ensureAddressesIsMutable();
      addresses_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void addAddresses(lnrpc.Rpc.NodeAddress value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureAddressesIsMutable();
      addresses_.add(value);
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void addAddresses(
        int index, lnrpc.Rpc.NodeAddress value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureAddressesIsMutable();
      addresses_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void addAddresses(
        lnrpc.Rpc.NodeAddress.Builder builderForValue) {
      ensureAddressesIsMutable();
      addresses_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void addAddresses(
        int index, lnrpc.Rpc.NodeAddress.Builder builderForValue) {
      ensureAddressesIsMutable();
      addresses_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void addAllAddresses(
        java.lang.Iterable<? extends lnrpc.Rpc.NodeAddress> values) {
      ensureAddressesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, addresses_);
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void clearAddresses() {
      addresses_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
     */
    private void removeAddresses(int index) {
      ensureAddressesIsMutable();
      addresses_.remove(index);
    }

    public static final int COLOR_FIELD_NUMBER = 5;
    private java.lang.String color_;
    /**
     * <code>optional string color = 5;</code>
     */
    public java.lang.String getColor() {
      return color_;
    }
    /**
     * <code>optional string color = 5;</code>
     */
    public com.google.protobuf.ByteString
        getColorBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(color_);
    }
    /**
     * <code>optional string color = 5;</code>
     */
    private void setColor(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      color_ = value;
    }
    /**
     * <code>optional string color = 5;</code>
     */
    private void clearColor() {
      
      color_ = getDefaultInstance().getColor();
    }
    /**
     * <code>optional string color = 5;</code>
     */
    private void setColorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      color_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (lastUpdate_ != 0) {
        output.writeUInt32(1, lastUpdate_);
      }
      if (!pubKey_.isEmpty()) {
        output.writeString(2, getPubKey());
      }
      if (!alias_.isEmpty()) {
        output.writeString(3, getAlias());
      }
      for (int i = 0; i < addresses_.size(); i++) {
        output.writeMessage(4, addresses_.get(i));
      }
      if (!color_.isEmpty()) {
        output.writeString(5, getColor());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (lastUpdate_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, lastUpdate_);
      }
      if (!pubKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPubKey());
      }
      if (!alias_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getAlias());
      }
      for (int i = 0; i < addresses_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, addresses_.get(i));
      }
      if (!color_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getColor());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.LightningNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.LightningNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.LightningNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.LightningNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     **
     *An individual vertex/node within the channel graph. A node is
     *connected to other nodes by one or more channel edges emanating from it. As the
     *graph is directed, a node will also have an incoming edge attached to it for
     *each outgoing edge.
     * </pre>
     *
     * Protobuf type {@code lnrpc.LightningNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.LightningNode, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.LightningNode)
        lnrpc.Rpc.LightningNodeOrBuilder {
      // Construct using lnrpc.Rpc.LightningNode.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional uint32 last_update = 1;</code>
       */
      public int getLastUpdate() {
        return instance.getLastUpdate();
      }
      /**
       * <code>optional uint32 last_update = 1;</code>
       */
      public Builder setLastUpdate(int value) {
        copyOnWrite();
        instance.setLastUpdate(value);
        return this;
      }
      /**
       * <code>optional uint32 last_update = 1;</code>
       */
      public Builder clearLastUpdate() {
        copyOnWrite();
        instance.clearLastUpdate();
        return this;
      }

      /**
       * <code>optional string pub_key = 2;</code>
       */
      public java.lang.String getPubKey() {
        return instance.getPubKey();
      }
      /**
       * <code>optional string pub_key = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPubKeyBytes() {
        return instance.getPubKeyBytes();
      }
      /**
       * <code>optional string pub_key = 2;</code>
       */
      public Builder setPubKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setPubKey(value);
        return this;
      }
      /**
       * <code>optional string pub_key = 2;</code>
       */
      public Builder clearPubKey() {
        copyOnWrite();
        instance.clearPubKey();
        return this;
      }
      /**
       * <code>optional string pub_key = 2;</code>
       */
      public Builder setPubKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPubKeyBytes(value);
        return this;
      }

      /**
       * <code>optional string alias = 3;</code>
       */
      public java.lang.String getAlias() {
        return instance.getAlias();
      }
      /**
       * <code>optional string alias = 3;</code>
       */
      public com.google.protobuf.ByteString
          getAliasBytes() {
        return instance.getAliasBytes();
      }
      /**
       * <code>optional string alias = 3;</code>
       */
      public Builder setAlias(
          java.lang.String value) {
        copyOnWrite();
        instance.setAlias(value);
        return this;
      }
      /**
       * <code>optional string alias = 3;</code>
       */
      public Builder clearAlias() {
        copyOnWrite();
        instance.clearAlias();
        return this;
      }
      /**
       * <code>optional string alias = 3;</code>
       */
      public Builder setAliasBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAliasBytes(value);
        return this;
      }

      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public java.util.List<lnrpc.Rpc.NodeAddress> getAddressesList() {
        return java.util.Collections.unmodifiableList(
            instance.getAddressesList());
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public int getAddressesCount() {
        return instance.getAddressesCount();
      }/**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public lnrpc.Rpc.NodeAddress getAddresses(int index) {
        return instance.getAddresses(index);
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder setAddresses(
          int index, lnrpc.Rpc.NodeAddress value) {
        copyOnWrite();
        instance.setAddresses(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder setAddresses(
          int index, lnrpc.Rpc.NodeAddress.Builder builderForValue) {
        copyOnWrite();
        instance.setAddresses(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder addAddresses(lnrpc.Rpc.NodeAddress value) {
        copyOnWrite();
        instance.addAddresses(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder addAddresses(
          int index, lnrpc.Rpc.NodeAddress value) {
        copyOnWrite();
        instance.addAddresses(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder addAddresses(
          lnrpc.Rpc.NodeAddress.Builder builderForValue) {
        copyOnWrite();
        instance.addAddresses(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder addAddresses(
          int index, lnrpc.Rpc.NodeAddress.Builder builderForValue) {
        copyOnWrite();
        instance.addAddresses(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder addAllAddresses(
          java.lang.Iterable<? extends lnrpc.Rpc.NodeAddress> values) {
        copyOnWrite();
        instance.addAllAddresses(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder clearAddresses() {
        copyOnWrite();
        instance.clearAddresses();
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeAddress addresses = 4;</code>
       */
      public Builder removeAddresses(int index) {
        copyOnWrite();
        instance.removeAddresses(index);
        return this;
      }

      /**
       * <code>optional string color = 5;</code>
       */
      public java.lang.String getColor() {
        return instance.getColor();
      }
      /**
       * <code>optional string color = 5;</code>
       */
      public com.google.protobuf.ByteString
          getColorBytes() {
        return instance.getColorBytes();
      }
      /**
       * <code>optional string color = 5;</code>
       */
      public Builder setColor(
          java.lang.String value) {
        copyOnWrite();
        instance.setColor(value);
        return this;
      }
      /**
       * <code>optional string color = 5;</code>
       */
      public Builder clearColor() {
        copyOnWrite();
        instance.clearColor();
        return this;
      }
      /**
       * <code>optional string color = 5;</code>
       */
      public Builder setColorBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setColorBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.LightningNode)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.LightningNode();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          addresses_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.LightningNode other = (lnrpc.Rpc.LightningNode) arg1;
          lastUpdate_ = visitor.visitInt(lastUpdate_ != 0, lastUpdate_,
              other.lastUpdate_ != 0, other.lastUpdate_);
          pubKey_ = visitor.visitString(!pubKey_.isEmpty(), pubKey_,
              !other.pubKey_.isEmpty(), other.pubKey_);
          alias_ = visitor.visitString(!alias_.isEmpty(), alias_,
              !other.alias_.isEmpty(), other.alias_);
          addresses_= visitor.visitList(addresses_, other.addresses_);
          color_ = visitor.visitString(!color_.isEmpty(), color_,
              !other.color_.isEmpty(), other.color_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  lastUpdate_ = input.readUInt32();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  pubKey_ = s;
                  break;
                }
                case 26: {
                  String s = input.readStringRequireUtf8();

                  alias_ = s;
                  break;
                }
                case 34: {
                  if (!addresses_.isModifiable()) {
                    addresses_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(addresses_);
                  }
                  addresses_.add(
                      input.readMessage(lnrpc.Rpc.NodeAddress.parser(), extensionRegistry));
                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  color_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.LightningNode.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.LightningNode)
    private static final lnrpc.Rpc.LightningNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new LightningNode();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.LightningNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<LightningNode> PARSER;

    public static com.google.protobuf.Parser<LightningNode> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NodeAddressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NodeAddress)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string network = 1;</code>
     */
    java.lang.String getNetwork();
    /**
     * <code>optional string network = 1;</code>
     */
    com.google.protobuf.ByteString
        getNetworkBytes();

    /**
     * <code>optional string addr = 2;</code>
     */
    java.lang.String getAddr();
    /**
     * <code>optional string addr = 2;</code>
     */
    com.google.protobuf.ByteString
        getAddrBytes();
  }
  /**
   * Protobuf type {@code lnrpc.NodeAddress}
   */
  public  static final class NodeAddress extends
      com.google.protobuf.GeneratedMessageLite<
          NodeAddress, NodeAddress.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NodeAddress)
      NodeAddressOrBuilder {
    private NodeAddress() {
      network_ = "";
      addr_ = "";
    }
    public static final int NETWORK_FIELD_NUMBER = 1;
    private java.lang.String network_;
    /**
     * <code>optional string network = 1;</code>
     */
    public java.lang.String getNetwork() {
      return network_;
    }
    /**
     * <code>optional string network = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNetworkBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(network_);
    }
    /**
     * <code>optional string network = 1;</code>
     */
    private void setNetwork(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      network_ = value;
    }
    /**
     * <code>optional string network = 1;</code>
     */
    private void clearNetwork() {
      
      network_ = getDefaultInstance().getNetwork();
    }
    /**
     * <code>optional string network = 1;</code>
     */
    private void setNetworkBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      network_ = value.toStringUtf8();
    }

    public static final int ADDR_FIELD_NUMBER = 2;
    private java.lang.String addr_;
    /**
     * <code>optional string addr = 2;</code>
     */
    public java.lang.String getAddr() {
      return addr_;
    }
    /**
     * <code>optional string addr = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAddrBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(addr_);
    }
    /**
     * <code>optional string addr = 2;</code>
     */
    private void setAddr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      addr_ = value;
    }
    /**
     * <code>optional string addr = 2;</code>
     */
    private void clearAddr() {
      
      addr_ = getDefaultInstance().getAddr();
    }
    /**
     * <code>optional string addr = 2;</code>
     */
    private void setAddrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      addr_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!network_.isEmpty()) {
        output.writeString(1, getNetwork());
      }
      if (!addr_.isEmpty()) {
        output.writeString(2, getAddr());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!network_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getNetwork());
      }
      if (!addr_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getAddr());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NodeAddress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeAddress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeAddress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeAddress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NodeAddress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NodeAddress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NodeAddress, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NodeAddress)
        lnrpc.Rpc.NodeAddressOrBuilder {
      // Construct using lnrpc.Rpc.NodeAddress.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string network = 1;</code>
       */
      public java.lang.String getNetwork() {
        return instance.getNetwork();
      }
      /**
       * <code>optional string network = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNetworkBytes() {
        return instance.getNetworkBytes();
      }
      /**
       * <code>optional string network = 1;</code>
       */
      public Builder setNetwork(
          java.lang.String value) {
        copyOnWrite();
        instance.setNetwork(value);
        return this;
      }
      /**
       * <code>optional string network = 1;</code>
       */
      public Builder clearNetwork() {
        copyOnWrite();
        instance.clearNetwork();
        return this;
      }
      /**
       * <code>optional string network = 1;</code>
       */
      public Builder setNetworkBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNetworkBytes(value);
        return this;
      }

      /**
       * <code>optional string addr = 2;</code>
       */
      public java.lang.String getAddr() {
        return instance.getAddr();
      }
      /**
       * <code>optional string addr = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAddrBytes() {
        return instance.getAddrBytes();
      }
      /**
       * <code>optional string addr = 2;</code>
       */
      public Builder setAddr(
          java.lang.String value) {
        copyOnWrite();
        instance.setAddr(value);
        return this;
      }
      /**
       * <code>optional string addr = 2;</code>
       */
      public Builder clearAddr() {
        copyOnWrite();
        instance.clearAddr();
        return this;
      }
      /**
       * <code>optional string addr = 2;</code>
       */
      public Builder setAddrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAddrBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NodeAddress)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NodeAddress();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NodeAddress other = (lnrpc.Rpc.NodeAddress) arg1;
          network_ = visitor.visitString(!network_.isEmpty(), network_,
              !other.network_.isEmpty(), other.network_);
          addr_ = visitor.visitString(!addr_.isEmpty(), addr_,
              !other.addr_.isEmpty(), other.addr_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  network_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  addr_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NodeAddress.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NodeAddress)
    private static final lnrpc.Rpc.NodeAddress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NodeAddress();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NodeAddress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NodeAddress> PARSER;

    public static com.google.protobuf.Parser<NodeAddress> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface RoutingPolicyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.RoutingPolicy)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 time_lock_delta = 1;</code>
     */
    int getTimeLockDelta();

    /**
     * <code>optional int64 min_htlc = 2;</code>
     */
    long getMinHtlc();

    /**
     * <code>optional int64 fee_base_msat = 3;</code>
     */
    long getFeeBaseMsat();

    /**
     * <code>optional int64 fee_rate_milli_msat = 4;</code>
     */
    long getFeeRateMilliMsat();

    /**
     * <code>optional bool disabled = 5;</code>
     */
    boolean getDisabled();

    /**
     * <code>optional uint64 max_htlc_msat = 6;</code>
     */
    long getMaxHtlcMsat();
  }
  /**
   * Protobuf type {@code lnrpc.RoutingPolicy}
   */
  public  static final class RoutingPolicy extends
      com.google.protobuf.GeneratedMessageLite<
          RoutingPolicy, RoutingPolicy.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.RoutingPolicy)
      RoutingPolicyOrBuilder {
    private RoutingPolicy() {
    }
    public static final int TIME_LOCK_DELTA_FIELD_NUMBER = 1;
    private int timeLockDelta_;
    /**
     * <code>optional uint32 time_lock_delta = 1;</code>
     */
    public int getTimeLockDelta() {
      return timeLockDelta_;
    }
    /**
     * <code>optional uint32 time_lock_delta = 1;</code>
     */
    private void setTimeLockDelta(int value) {
      
      timeLockDelta_ = value;
    }
    /**
     * <code>optional uint32 time_lock_delta = 1;</code>
     */
    private void clearTimeLockDelta() {
      
      timeLockDelta_ = 0;
    }

    public static final int MIN_HTLC_FIELD_NUMBER = 2;
    private long minHtlc_;
    /**
     * <code>optional int64 min_htlc = 2;</code>
     */
    public long getMinHtlc() {
      return minHtlc_;
    }
    /**
     * <code>optional int64 min_htlc = 2;</code>
     */
    private void setMinHtlc(long value) {
      
      minHtlc_ = value;
    }
    /**
     * <code>optional int64 min_htlc = 2;</code>
     */
    private void clearMinHtlc() {
      
      minHtlc_ = 0L;
    }

    public static final int FEE_BASE_MSAT_FIELD_NUMBER = 3;
    private long feeBaseMsat_;
    /**
     * <code>optional int64 fee_base_msat = 3;</code>
     */
    public long getFeeBaseMsat() {
      return feeBaseMsat_;
    }
    /**
     * <code>optional int64 fee_base_msat = 3;</code>
     */
    private void setFeeBaseMsat(long value) {
      
      feeBaseMsat_ = value;
    }
    /**
     * <code>optional int64 fee_base_msat = 3;</code>
     */
    private void clearFeeBaseMsat() {
      
      feeBaseMsat_ = 0L;
    }

    public static final int FEE_RATE_MILLI_MSAT_FIELD_NUMBER = 4;
    private long feeRateMilliMsat_;
    /**
     * <code>optional int64 fee_rate_milli_msat = 4;</code>
     */
    public long getFeeRateMilliMsat() {
      return feeRateMilliMsat_;
    }
    /**
     * <code>optional int64 fee_rate_milli_msat = 4;</code>
     */
    private void setFeeRateMilliMsat(long value) {
      
      feeRateMilliMsat_ = value;
    }
    /**
     * <code>optional int64 fee_rate_milli_msat = 4;</code>
     */
    private void clearFeeRateMilliMsat() {
      
      feeRateMilliMsat_ = 0L;
    }

    public static final int DISABLED_FIELD_NUMBER = 5;
    private boolean disabled_;
    /**
     * <code>optional bool disabled = 5;</code>
     */
    public boolean getDisabled() {
      return disabled_;
    }
    /**
     * <code>optional bool disabled = 5;</code>
     */
    private void setDisabled(boolean value) {
      
      disabled_ = value;
    }
    /**
     * <code>optional bool disabled = 5;</code>
     */
    private void clearDisabled() {
      
      disabled_ = false;
    }

    public static final int MAX_HTLC_MSAT_FIELD_NUMBER = 6;
    private long maxHtlcMsat_;
    /**
     * <code>optional uint64 max_htlc_msat = 6;</code>
     */
    public long getMaxHtlcMsat() {
      return maxHtlcMsat_;
    }
    /**
     * <code>optional uint64 max_htlc_msat = 6;</code>
     */
    private void setMaxHtlcMsat(long value) {
      
      maxHtlcMsat_ = value;
    }
    /**
     * <code>optional uint64 max_htlc_msat = 6;</code>
     */
    private void clearMaxHtlcMsat() {
      
      maxHtlcMsat_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timeLockDelta_ != 0) {
        output.writeUInt32(1, timeLockDelta_);
      }
      if (minHtlc_ != 0L) {
        output.writeInt64(2, minHtlc_);
      }
      if (feeBaseMsat_ != 0L) {
        output.writeInt64(3, feeBaseMsat_);
      }
      if (feeRateMilliMsat_ != 0L) {
        output.writeInt64(4, feeRateMilliMsat_);
      }
      if (disabled_ != false) {
        output.writeBool(5, disabled_);
      }
      if (maxHtlcMsat_ != 0L) {
        output.writeUInt64(6, maxHtlcMsat_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (timeLockDelta_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, timeLockDelta_);
      }
      if (minHtlc_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, minHtlc_);
      }
      if (feeBaseMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, feeBaseMsat_);
      }
      if (feeRateMilliMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, feeRateMilliMsat_);
      }
      if (disabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, disabled_);
      }
      if (maxHtlcMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, maxHtlcMsat_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.RoutingPolicy parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.RoutingPolicy parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.RoutingPolicy parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.RoutingPolicy parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.RoutingPolicy prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.RoutingPolicy}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.RoutingPolicy, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.RoutingPolicy)
        lnrpc.Rpc.RoutingPolicyOrBuilder {
      // Construct using lnrpc.Rpc.RoutingPolicy.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional uint32 time_lock_delta = 1;</code>
       */
      public int getTimeLockDelta() {
        return instance.getTimeLockDelta();
      }
      /**
       * <code>optional uint32 time_lock_delta = 1;</code>
       */
      public Builder setTimeLockDelta(int value) {
        copyOnWrite();
        instance.setTimeLockDelta(value);
        return this;
      }
      /**
       * <code>optional uint32 time_lock_delta = 1;</code>
       */
      public Builder clearTimeLockDelta() {
        copyOnWrite();
        instance.clearTimeLockDelta();
        return this;
      }

      /**
       * <code>optional int64 min_htlc = 2;</code>
       */
      public long getMinHtlc() {
        return instance.getMinHtlc();
      }
      /**
       * <code>optional int64 min_htlc = 2;</code>
       */
      public Builder setMinHtlc(long value) {
        copyOnWrite();
        instance.setMinHtlc(value);
        return this;
      }
      /**
       * <code>optional int64 min_htlc = 2;</code>
       */
      public Builder clearMinHtlc() {
        copyOnWrite();
        instance.clearMinHtlc();
        return this;
      }

      /**
       * <code>optional int64 fee_base_msat = 3;</code>
       */
      public long getFeeBaseMsat() {
        return instance.getFeeBaseMsat();
      }
      /**
       * <code>optional int64 fee_base_msat = 3;</code>
       */
      public Builder setFeeBaseMsat(long value) {
        copyOnWrite();
        instance.setFeeBaseMsat(value);
        return this;
      }
      /**
       * <code>optional int64 fee_base_msat = 3;</code>
       */
      public Builder clearFeeBaseMsat() {
        copyOnWrite();
        instance.clearFeeBaseMsat();
        return this;
      }

      /**
       * <code>optional int64 fee_rate_milli_msat = 4;</code>
       */
      public long getFeeRateMilliMsat() {
        return instance.getFeeRateMilliMsat();
      }
      /**
       * <code>optional int64 fee_rate_milli_msat = 4;</code>
       */
      public Builder setFeeRateMilliMsat(long value) {
        copyOnWrite();
        instance.setFeeRateMilliMsat(value);
        return this;
      }
      /**
       * <code>optional int64 fee_rate_milli_msat = 4;</code>
       */
      public Builder clearFeeRateMilliMsat() {
        copyOnWrite();
        instance.clearFeeRateMilliMsat();
        return this;
      }

      /**
       * <code>optional bool disabled = 5;</code>
       */
      public boolean getDisabled() {
        return instance.getDisabled();
      }
      /**
       * <code>optional bool disabled = 5;</code>
       */
      public Builder setDisabled(boolean value) {
        copyOnWrite();
        instance.setDisabled(value);
        return this;
      }
      /**
       * <code>optional bool disabled = 5;</code>
       */
      public Builder clearDisabled() {
        copyOnWrite();
        instance.clearDisabled();
        return this;
      }

      /**
       * <code>optional uint64 max_htlc_msat = 6;</code>
       */
      public long getMaxHtlcMsat() {
        return instance.getMaxHtlcMsat();
      }
      /**
       * <code>optional uint64 max_htlc_msat = 6;</code>
       */
      public Builder setMaxHtlcMsat(long value) {
        copyOnWrite();
        instance.setMaxHtlcMsat(value);
        return this;
      }
      /**
       * <code>optional uint64 max_htlc_msat = 6;</code>
       */
      public Builder clearMaxHtlcMsat() {
        copyOnWrite();
        instance.clearMaxHtlcMsat();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.RoutingPolicy)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.RoutingPolicy();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.RoutingPolicy other = (lnrpc.Rpc.RoutingPolicy) arg1;
          timeLockDelta_ = visitor.visitInt(timeLockDelta_ != 0, timeLockDelta_,
              other.timeLockDelta_ != 0, other.timeLockDelta_);
          minHtlc_ = visitor.visitLong(minHtlc_ != 0L, minHtlc_,
              other.minHtlc_ != 0L, other.minHtlc_);
          feeBaseMsat_ = visitor.visitLong(feeBaseMsat_ != 0L, feeBaseMsat_,
              other.feeBaseMsat_ != 0L, other.feeBaseMsat_);
          feeRateMilliMsat_ = visitor.visitLong(feeRateMilliMsat_ != 0L, feeRateMilliMsat_,
              other.feeRateMilliMsat_ != 0L, other.feeRateMilliMsat_);
          disabled_ = visitor.visitBoolean(disabled_ != false, disabled_,
              other.disabled_ != false, other.disabled_);
          maxHtlcMsat_ = visitor.visitLong(maxHtlcMsat_ != 0L, maxHtlcMsat_,
              other.maxHtlcMsat_ != 0L, other.maxHtlcMsat_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  timeLockDelta_ = input.readUInt32();
                  break;
                }
                case 16: {

                  minHtlc_ = input.readInt64();
                  break;
                }
                case 24: {

                  feeBaseMsat_ = input.readInt64();
                  break;
                }
                case 32: {

                  feeRateMilliMsat_ = input.readInt64();
                  break;
                }
                case 40: {

                  disabled_ = input.readBool();
                  break;
                }
                case 48: {

                  maxHtlcMsat_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.RoutingPolicy.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.RoutingPolicy)
    private static final lnrpc.Rpc.RoutingPolicy DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RoutingPolicy();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.RoutingPolicy getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RoutingPolicy> PARSER;

    public static com.google.protobuf.Parser<RoutingPolicy> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelEdgeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelEdge)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    long getChannelId();

    /**
     * <code>optional string chan_point = 2;</code>
     */
    java.lang.String getChanPoint();
    /**
     * <code>optional string chan_point = 2;</code>
     */
    com.google.protobuf.ByteString
        getChanPointBytes();

    /**
     * <code>optional uint32 last_update = 3;</code>
     */
    int getLastUpdate();

    /**
     * <code>optional string node1_pub = 4;</code>
     */
    java.lang.String getNode1Pub();
    /**
     * <code>optional string node1_pub = 4;</code>
     */
    com.google.protobuf.ByteString
        getNode1PubBytes();

    /**
     * <code>optional string node2_pub = 5;</code>
     */
    java.lang.String getNode2Pub();
    /**
     * <code>optional string node2_pub = 5;</code>
     */
    com.google.protobuf.ByteString
        getNode2PubBytes();

    /**
     * <code>optional int64 capacity = 6;</code>
     */
    long getCapacity();

    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    boolean hasNode1Policy();
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    lnrpc.Rpc.RoutingPolicy getNode1Policy();

    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    boolean hasNode2Policy();
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    lnrpc.Rpc.RoutingPolicy getNode2Policy();
  }
  /**
   * <pre>
   **
   *A fully authenticated channel along with all its unique attributes.
   *Once an authenticated channel announcement has been processed on the network,
   *then an instance of ChannelEdgeInfo encapsulating the channels attributes is
   *stored. The other portions relevant to routing policy of a channel are stored
   *within a ChannelEdgePolicy for each direction of the channel.
   * </pre>
   *
   * Protobuf type {@code lnrpc.ChannelEdge}
   */
  public  static final class ChannelEdge extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelEdge, ChannelEdge.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelEdge)
      ChannelEdgeOrBuilder {
    private ChannelEdge() {
      chanPoint_ = "";
      node1Pub_ = "";
      node2Pub_ = "";
    }
    public static final int CHANNEL_ID_FIELD_NUMBER = 1;
    private long channelId_;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    public long getChannelId() {
      return channelId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    private void setChannelId(long value) {
      
      channelId_ = value;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 channel_id = 1;</code>
     */
    private void clearChannelId() {
      
      channelId_ = 0L;
    }

    public static final int CHAN_POINT_FIELD_NUMBER = 2;
    private java.lang.String chanPoint_;
    /**
     * <code>optional string chan_point = 2;</code>
     */
    public java.lang.String getChanPoint() {
      return chanPoint_;
    }
    /**
     * <code>optional string chan_point = 2;</code>
     */
    public com.google.protobuf.ByteString
        getChanPointBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(chanPoint_);
    }
    /**
     * <code>optional string chan_point = 2;</code>
     */
    private void setChanPoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      chanPoint_ = value;
    }
    /**
     * <code>optional string chan_point = 2;</code>
     */
    private void clearChanPoint() {
      
      chanPoint_ = getDefaultInstance().getChanPoint();
    }
    /**
     * <code>optional string chan_point = 2;</code>
     */
    private void setChanPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      chanPoint_ = value.toStringUtf8();
    }

    public static final int LAST_UPDATE_FIELD_NUMBER = 3;
    private int lastUpdate_;
    /**
     * <code>optional uint32 last_update = 3;</code>
     */
    public int getLastUpdate() {
      return lastUpdate_;
    }
    /**
     * <code>optional uint32 last_update = 3;</code>
     */
    private void setLastUpdate(int value) {
      
      lastUpdate_ = value;
    }
    /**
     * <code>optional uint32 last_update = 3;</code>
     */
    private void clearLastUpdate() {
      
      lastUpdate_ = 0;
    }

    public static final int NODE1_PUB_FIELD_NUMBER = 4;
    private java.lang.String node1Pub_;
    /**
     * <code>optional string node1_pub = 4;</code>
     */
    public java.lang.String getNode1Pub() {
      return node1Pub_;
    }
    /**
     * <code>optional string node1_pub = 4;</code>
     */
    public com.google.protobuf.ByteString
        getNode1PubBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(node1Pub_);
    }
    /**
     * <code>optional string node1_pub = 4;</code>
     */
    private void setNode1Pub(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      node1Pub_ = value;
    }
    /**
     * <code>optional string node1_pub = 4;</code>
     */
    private void clearNode1Pub() {
      
      node1Pub_ = getDefaultInstance().getNode1Pub();
    }
    /**
     * <code>optional string node1_pub = 4;</code>
     */
    private void setNode1PubBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      node1Pub_ = value.toStringUtf8();
    }

    public static final int NODE2_PUB_FIELD_NUMBER = 5;
    private java.lang.String node2Pub_;
    /**
     * <code>optional string node2_pub = 5;</code>
     */
    public java.lang.String getNode2Pub() {
      return node2Pub_;
    }
    /**
     * <code>optional string node2_pub = 5;</code>
     */
    public com.google.protobuf.ByteString
        getNode2PubBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(node2Pub_);
    }
    /**
     * <code>optional string node2_pub = 5;</code>
     */
    private void setNode2Pub(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      node2Pub_ = value;
    }
    /**
     * <code>optional string node2_pub = 5;</code>
     */
    private void clearNode2Pub() {
      
      node2Pub_ = getDefaultInstance().getNode2Pub();
    }
    /**
     * <code>optional string node2_pub = 5;</code>
     */
    private void setNode2PubBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      node2Pub_ = value.toStringUtf8();
    }

    public static final int CAPACITY_FIELD_NUMBER = 6;
    private long capacity_;
    /**
     * <code>optional int64 capacity = 6;</code>
     */
    public long getCapacity() {
      return capacity_;
    }
    /**
     * <code>optional int64 capacity = 6;</code>
     */
    private void setCapacity(long value) {
      
      capacity_ = value;
    }
    /**
     * <code>optional int64 capacity = 6;</code>
     */
    private void clearCapacity() {
      
      capacity_ = 0L;
    }

    public static final int NODE1_POLICY_FIELD_NUMBER = 7;
    private lnrpc.Rpc.RoutingPolicy node1Policy_;
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    public boolean hasNode1Policy() {
      return node1Policy_ != null;
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    public lnrpc.Rpc.RoutingPolicy getNode1Policy() {
      return node1Policy_ == null ? lnrpc.Rpc.RoutingPolicy.getDefaultInstance() : node1Policy_;
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    private void setNode1Policy(lnrpc.Rpc.RoutingPolicy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      node1Policy_ = value;
      
      }
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    private void setNode1Policy(
        lnrpc.Rpc.RoutingPolicy.Builder builderForValue) {
      node1Policy_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    private void mergeNode1Policy(lnrpc.Rpc.RoutingPolicy value) {
      if (node1Policy_ != null &&
          node1Policy_ != lnrpc.Rpc.RoutingPolicy.getDefaultInstance()) {
        node1Policy_ =
          lnrpc.Rpc.RoutingPolicy.newBuilder(node1Policy_).mergeFrom(value).buildPartial();
      } else {
        node1Policy_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
     */
    private void clearNode1Policy() {  node1Policy_ = null;
      
    }

    public static final int NODE2_POLICY_FIELD_NUMBER = 8;
    private lnrpc.Rpc.RoutingPolicy node2Policy_;
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    public boolean hasNode2Policy() {
      return node2Policy_ != null;
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    public lnrpc.Rpc.RoutingPolicy getNode2Policy() {
      return node2Policy_ == null ? lnrpc.Rpc.RoutingPolicy.getDefaultInstance() : node2Policy_;
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    private void setNode2Policy(lnrpc.Rpc.RoutingPolicy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      node2Policy_ = value;
      
      }
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    private void setNode2Policy(
        lnrpc.Rpc.RoutingPolicy.Builder builderForValue) {
      node2Policy_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    private void mergeNode2Policy(lnrpc.Rpc.RoutingPolicy value) {
      if (node2Policy_ != null &&
          node2Policy_ != lnrpc.Rpc.RoutingPolicy.getDefaultInstance()) {
        node2Policy_ =
          lnrpc.Rpc.RoutingPolicy.newBuilder(node2Policy_).mergeFrom(value).buildPartial();
      } else {
        node2Policy_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
     */
    private void clearNode2Policy() {  node2Policy_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelId_ != 0L) {
        output.writeUInt64(1, channelId_);
      }
      if (!chanPoint_.isEmpty()) {
        output.writeString(2, getChanPoint());
      }
      if (lastUpdate_ != 0) {
        output.writeUInt32(3, lastUpdate_);
      }
      if (!node1Pub_.isEmpty()) {
        output.writeString(4, getNode1Pub());
      }
      if (!node2Pub_.isEmpty()) {
        output.writeString(5, getNode2Pub());
      }
      if (capacity_ != 0L) {
        output.writeInt64(6, capacity_);
      }
      if (node1Policy_ != null) {
        output.writeMessage(7, getNode1Policy());
      }
      if (node2Policy_ != null) {
        output.writeMessage(8, getNode2Policy());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, channelId_);
      }
      if (!chanPoint_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getChanPoint());
      }
      if (lastUpdate_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, lastUpdate_);
      }
      if (!node1Pub_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getNode1Pub());
      }
      if (!node2Pub_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getNode2Pub());
      }
      if (capacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, capacity_);
      }
      if (node1Policy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getNode1Policy());
      }
      if (node2Policy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getNode2Policy());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelEdge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEdge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEdge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelEdge prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     **
     *A fully authenticated channel along with all its unique attributes.
     *Once an authenticated channel announcement has been processed on the network,
     *then an instance of ChannelEdgeInfo encapsulating the channels attributes is
     *stored. The other portions relevant to routing policy of a channel are stored
     *within a ChannelEdgePolicy for each direction of the channel.
     * </pre>
     *
     * Protobuf type {@code lnrpc.ChannelEdge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelEdge, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelEdge)
        lnrpc.Rpc.ChannelEdgeOrBuilder {
      // Construct using lnrpc.Rpc.ChannelEdge.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 channel_id = 1;</code>
       */
      public long getChannelId() {
        return instance.getChannelId();
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 channel_id = 1;</code>
       */
      public Builder setChannelId(long value) {
        copyOnWrite();
        instance.setChannelId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 channel_id = 1;</code>
       */
      public Builder clearChannelId() {
        copyOnWrite();
        instance.clearChannelId();
        return this;
      }

      /**
       * <code>optional string chan_point = 2;</code>
       */
      public java.lang.String getChanPoint() {
        return instance.getChanPoint();
      }
      /**
       * <code>optional string chan_point = 2;</code>
       */
      public com.google.protobuf.ByteString
          getChanPointBytes() {
        return instance.getChanPointBytes();
      }
      /**
       * <code>optional string chan_point = 2;</code>
       */
      public Builder setChanPoint(
          java.lang.String value) {
        copyOnWrite();
        instance.setChanPoint(value);
        return this;
      }
      /**
       * <code>optional string chan_point = 2;</code>
       */
      public Builder clearChanPoint() {
        copyOnWrite();
        instance.clearChanPoint();
        return this;
      }
      /**
       * <code>optional string chan_point = 2;</code>
       */
      public Builder setChanPointBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChanPointBytes(value);
        return this;
      }

      /**
       * <code>optional uint32 last_update = 3;</code>
       */
      public int getLastUpdate() {
        return instance.getLastUpdate();
      }
      /**
       * <code>optional uint32 last_update = 3;</code>
       */
      public Builder setLastUpdate(int value) {
        copyOnWrite();
        instance.setLastUpdate(value);
        return this;
      }
      /**
       * <code>optional uint32 last_update = 3;</code>
       */
      public Builder clearLastUpdate() {
        copyOnWrite();
        instance.clearLastUpdate();
        return this;
      }

      /**
       * <code>optional string node1_pub = 4;</code>
       */
      public java.lang.String getNode1Pub() {
        return instance.getNode1Pub();
      }
      /**
       * <code>optional string node1_pub = 4;</code>
       */
      public com.google.protobuf.ByteString
          getNode1PubBytes() {
        return instance.getNode1PubBytes();
      }
      /**
       * <code>optional string node1_pub = 4;</code>
       */
      public Builder setNode1Pub(
          java.lang.String value) {
        copyOnWrite();
        instance.setNode1Pub(value);
        return this;
      }
      /**
       * <code>optional string node1_pub = 4;</code>
       */
      public Builder clearNode1Pub() {
        copyOnWrite();
        instance.clearNode1Pub();
        return this;
      }
      /**
       * <code>optional string node1_pub = 4;</code>
       */
      public Builder setNode1PubBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNode1PubBytes(value);
        return this;
      }

      /**
       * <code>optional string node2_pub = 5;</code>
       */
      public java.lang.String getNode2Pub() {
        return instance.getNode2Pub();
      }
      /**
       * <code>optional string node2_pub = 5;</code>
       */
      public com.google.protobuf.ByteString
          getNode2PubBytes() {
        return instance.getNode2PubBytes();
      }
      /**
       * <code>optional string node2_pub = 5;</code>
       */
      public Builder setNode2Pub(
          java.lang.String value) {
        copyOnWrite();
        instance.setNode2Pub(value);
        return this;
      }
      /**
       * <code>optional string node2_pub = 5;</code>
       */
      public Builder clearNode2Pub() {
        copyOnWrite();
        instance.clearNode2Pub();
        return this;
      }
      /**
       * <code>optional string node2_pub = 5;</code>
       */
      public Builder setNode2PubBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNode2PubBytes(value);
        return this;
      }

      /**
       * <code>optional int64 capacity = 6;</code>
       */
      public long getCapacity() {
        return instance.getCapacity();
      }
      /**
       * <code>optional int64 capacity = 6;</code>
       */
      public Builder setCapacity(long value) {
        copyOnWrite();
        instance.setCapacity(value);
        return this;
      }
      /**
       * <code>optional int64 capacity = 6;</code>
       */
      public Builder clearCapacity() {
        copyOnWrite();
        instance.clearCapacity();
        return this;
      }

      /**
       * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
       */
      public boolean hasNode1Policy() {
        return instance.hasNode1Policy();
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
       */
      public lnrpc.Rpc.RoutingPolicy getNode1Policy() {
        return instance.getNode1Policy();
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
       */
      public Builder setNode1Policy(lnrpc.Rpc.RoutingPolicy value) {
        copyOnWrite();
        instance.setNode1Policy(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
       */
      public Builder setNode1Policy(
          lnrpc.Rpc.RoutingPolicy.Builder builderForValue) {
        copyOnWrite();
        instance.setNode1Policy(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
       */
      public Builder mergeNode1Policy(lnrpc.Rpc.RoutingPolicy value) {
        copyOnWrite();
        instance.mergeNode1Policy(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node1_policy = 7;</code>
       */
      public Builder clearNode1Policy() {  copyOnWrite();
        instance.clearNode1Policy();
        return this;
      }

      /**
       * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
       */
      public boolean hasNode2Policy() {
        return instance.hasNode2Policy();
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
       */
      public lnrpc.Rpc.RoutingPolicy getNode2Policy() {
        return instance.getNode2Policy();
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
       */
      public Builder setNode2Policy(lnrpc.Rpc.RoutingPolicy value) {
        copyOnWrite();
        instance.setNode2Policy(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
       */
      public Builder setNode2Policy(
          lnrpc.Rpc.RoutingPolicy.Builder builderForValue) {
        copyOnWrite();
        instance.setNode2Policy(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
       */
      public Builder mergeNode2Policy(lnrpc.Rpc.RoutingPolicy value) {
        copyOnWrite();
        instance.mergeNode2Policy(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy node2_policy = 8;</code>
       */
      public Builder clearNode2Policy() {  copyOnWrite();
        instance.clearNode2Policy();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelEdge)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelEdge();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelEdge other = (lnrpc.Rpc.ChannelEdge) arg1;
          channelId_ = visitor.visitLong(channelId_ != 0L, channelId_,
              other.channelId_ != 0L, other.channelId_);
          chanPoint_ = visitor.visitString(!chanPoint_.isEmpty(), chanPoint_,
              !other.chanPoint_.isEmpty(), other.chanPoint_);
          lastUpdate_ = visitor.visitInt(lastUpdate_ != 0, lastUpdate_,
              other.lastUpdate_ != 0, other.lastUpdate_);
          node1Pub_ = visitor.visitString(!node1Pub_.isEmpty(), node1Pub_,
              !other.node1Pub_.isEmpty(), other.node1Pub_);
          node2Pub_ = visitor.visitString(!node2Pub_.isEmpty(), node2Pub_,
              !other.node2Pub_.isEmpty(), other.node2Pub_);
          capacity_ = visitor.visitLong(capacity_ != 0L, capacity_,
              other.capacity_ != 0L, other.capacity_);
          node1Policy_ = visitor.visitMessage(node1Policy_, other.node1Policy_);
          node2Policy_ = visitor.visitMessage(node2Policy_, other.node2Policy_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  channelId_ = input.readUInt64();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  chanPoint_ = s;
                  break;
                }
                case 24: {

                  lastUpdate_ = input.readUInt32();
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  node1Pub_ = s;
                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  node2Pub_ = s;
                  break;
                }
                case 48: {

                  capacity_ = input.readInt64();
                  break;
                }
                case 58: {
                  lnrpc.Rpc.RoutingPolicy.Builder subBuilder = null;
                  if (node1Policy_ != null) {
                    subBuilder = node1Policy_.toBuilder();
                  }
                  node1Policy_ = input.readMessage(lnrpc.Rpc.RoutingPolicy.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(node1Policy_);
                    node1Policy_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 66: {
                  lnrpc.Rpc.RoutingPolicy.Builder subBuilder = null;
                  if (node2Policy_ != null) {
                    subBuilder = node2Policy_.toBuilder();
                  }
                  node2Policy_ = input.readMessage(lnrpc.Rpc.RoutingPolicy.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(node2Policy_);
                    node2Policy_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelEdge.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelEdge)
    private static final lnrpc.Rpc.ChannelEdge DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelEdge();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelEdge getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelEdge> PARSER;

    public static com.google.protobuf.Parser<ChannelEdge> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelGraphRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelGraphRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *Whether unannounced channels are included in the response or not. If set,
     *unannounced channels are included. Unannounced channels are both private
     *channels, and public channels that are not yet announced to the network.
     * </pre>
     *
     * <code>optional bool include_unannounced = 1;</code>
     */
    boolean getIncludeUnannounced();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelGraphRequest}
   */
  public  static final class ChannelGraphRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelGraphRequest, ChannelGraphRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelGraphRequest)
      ChannelGraphRequestOrBuilder {
    private ChannelGraphRequest() {
    }
    public static final int INCLUDE_UNANNOUNCED_FIELD_NUMBER = 1;
    private boolean includeUnannounced_;
    /**
     * <pre>
     **
     *Whether unannounced channels are included in the response or not. If set,
     *unannounced channels are included. Unannounced channels are both private
     *channels, and public channels that are not yet announced to the network.
     * </pre>
     *
     * <code>optional bool include_unannounced = 1;</code>
     */
    public boolean getIncludeUnannounced() {
      return includeUnannounced_;
    }
    /**
     * <pre>
     **
     *Whether unannounced channels are included in the response or not. If set,
     *unannounced channels are included. Unannounced channels are both private
     *channels, and public channels that are not yet announced to the network.
     * </pre>
     *
     * <code>optional bool include_unannounced = 1;</code>
     */
    private void setIncludeUnannounced(boolean value) {
      
      includeUnannounced_ = value;
    }
    /**
     * <pre>
     **
     *Whether unannounced channels are included in the response or not. If set,
     *unannounced channels are included. Unannounced channels are both private
     *channels, and public channels that are not yet announced to the network.
     * </pre>
     *
     * <code>optional bool include_unannounced = 1;</code>
     */
    private void clearIncludeUnannounced() {
      
      includeUnannounced_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (includeUnannounced_ != false) {
        output.writeBool(1, includeUnannounced_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (includeUnannounced_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, includeUnannounced_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelGraphRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelGraphRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelGraphRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelGraphRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelGraphRequest)
        lnrpc.Rpc.ChannelGraphRequestOrBuilder {
      // Construct using lnrpc.Rpc.ChannelGraphRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *Whether unannounced channels are included in the response or not. If set,
       *unannounced channels are included. Unannounced channels are both private
       *channels, and public channels that are not yet announced to the network.
       * </pre>
       *
       * <code>optional bool include_unannounced = 1;</code>
       */
      public boolean getIncludeUnannounced() {
        return instance.getIncludeUnannounced();
      }
      /**
       * <pre>
       **
       *Whether unannounced channels are included in the response or not. If set,
       *unannounced channels are included. Unannounced channels are both private
       *channels, and public channels that are not yet announced to the network.
       * </pre>
       *
       * <code>optional bool include_unannounced = 1;</code>
       */
      public Builder setIncludeUnannounced(boolean value) {
        copyOnWrite();
        instance.setIncludeUnannounced(value);
        return this;
      }
      /**
       * <pre>
       **
       *Whether unannounced channels are included in the response or not. If set,
       *unannounced channels are included. Unannounced channels are both private
       *channels, and public channels that are not yet announced to the network.
       * </pre>
       *
       * <code>optional bool include_unannounced = 1;</code>
       */
      public Builder clearIncludeUnannounced() {
        copyOnWrite();
        instance.clearIncludeUnannounced();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelGraphRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelGraphRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelGraphRequest other = (lnrpc.Rpc.ChannelGraphRequest) arg1;
          includeUnannounced_ = visitor.visitBoolean(includeUnannounced_ != false, includeUnannounced_,
              other.includeUnannounced_ != false, other.includeUnannounced_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  includeUnannounced_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelGraphRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelGraphRequest)
    private static final lnrpc.Rpc.ChannelGraphRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelGraphRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelGraphRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelGraphRequest> PARSER;

    public static com.google.protobuf.Parser<ChannelGraphRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelGraphOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelGraph)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    java.util.List<lnrpc.Rpc.LightningNode> 
        getNodesList();
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    lnrpc.Rpc.LightningNode getNodes(int index);
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    int getNodesCount();

    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    java.util.List<lnrpc.Rpc.ChannelEdge> 
        getEdgesList();
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    lnrpc.Rpc.ChannelEdge getEdges(int index);
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    int getEdgesCount();
  }
  /**
   * <pre>
   *&#47; Returns a new instance of the directed channel graph.
   * </pre>
   *
   * Protobuf type {@code lnrpc.ChannelGraph}
   */
  public  static final class ChannelGraph extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelGraph, ChannelGraph.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelGraph)
      ChannelGraphOrBuilder {
    private ChannelGraph() {
      nodes_ = emptyProtobufList();
      edges_ = emptyProtobufList();
    }
    public static final int NODES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.LightningNode> nodes_;
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.LightningNode> getNodesList() {
      return nodes_;
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.LightningNodeOrBuilder> 
        getNodesOrBuilderList() {
      return nodes_;
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    public int getNodesCount() {
      return nodes_.size();
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    public lnrpc.Rpc.LightningNode getNodes(int index) {
      return nodes_.get(index);
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    public lnrpc.Rpc.LightningNodeOrBuilder getNodesOrBuilder(
        int index) {
      return nodes_.get(index);
    }
    private void ensureNodesIsMutable() {
      if (!nodes_.isModifiable()) {
        nodes_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(nodes_);
       }
    }

    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void setNodes(
        int index, lnrpc.Rpc.LightningNode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNodesIsMutable();
      nodes_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void setNodes(
        int index, lnrpc.Rpc.LightningNode.Builder builderForValue) {
      ensureNodesIsMutable();
      nodes_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void addNodes(lnrpc.Rpc.LightningNode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNodesIsMutable();
      nodes_.add(value);
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void addNodes(
        int index, lnrpc.Rpc.LightningNode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNodesIsMutable();
      nodes_.add(index, value);
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void addNodes(
        lnrpc.Rpc.LightningNode.Builder builderForValue) {
      ensureNodesIsMutable();
      nodes_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void addNodes(
        int index, lnrpc.Rpc.LightningNode.Builder builderForValue) {
      ensureNodesIsMutable();
      nodes_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void addAllNodes(
        java.lang.Iterable<? extends lnrpc.Rpc.LightningNode> values) {
      ensureNodesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, nodes_);
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void clearNodes() {
      nodes_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The list of `LightningNode`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
     */
    private void removeNodes(int index) {
      ensureNodesIsMutable();
      nodes_.remove(index);
    }

    public static final int EDGES_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.ChannelEdge> edges_;
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    public java.util.List<lnrpc.Rpc.ChannelEdge> getEdgesList() {
      return edges_;
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ChannelEdgeOrBuilder> 
        getEdgesOrBuilderList() {
      return edges_;
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    public int getEdgesCount() {
      return edges_.size();
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    public lnrpc.Rpc.ChannelEdge getEdges(int index) {
      return edges_.get(index);
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    public lnrpc.Rpc.ChannelEdgeOrBuilder getEdgesOrBuilder(
        int index) {
      return edges_.get(index);
    }
    private void ensureEdgesIsMutable() {
      if (!edges_.isModifiable()) {
        edges_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(edges_);
       }
    }

    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void setEdges(
        int index, lnrpc.Rpc.ChannelEdge value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEdgesIsMutable();
      edges_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void setEdges(
        int index, lnrpc.Rpc.ChannelEdge.Builder builderForValue) {
      ensureEdgesIsMutable();
      edges_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void addEdges(lnrpc.Rpc.ChannelEdge value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEdgesIsMutable();
      edges_.add(value);
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void addEdges(
        int index, lnrpc.Rpc.ChannelEdge value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureEdgesIsMutable();
      edges_.add(index, value);
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void addEdges(
        lnrpc.Rpc.ChannelEdge.Builder builderForValue) {
      ensureEdgesIsMutable();
      edges_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void addEdges(
        int index, lnrpc.Rpc.ChannelEdge.Builder builderForValue) {
      ensureEdgesIsMutable();
      edges_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void addAllEdges(
        java.lang.Iterable<? extends lnrpc.Rpc.ChannelEdge> values) {
      ensureEdgesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, edges_);
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void clearEdges() {
      edges_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The list of `ChannelEdge`s in this channel graph
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
     */
    private void removeEdges(int index) {
      ensureEdgesIsMutable();
      edges_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < nodes_.size(); i++) {
        output.writeMessage(1, nodes_.get(i));
      }
      for (int i = 0; i < edges_.size(); i++) {
        output.writeMessage(2, edges_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < nodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, nodes_.get(i));
      }
      for (int i = 0; i < edges_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, edges_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelGraph parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraph parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelGraph parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelGraph parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelGraph prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     *&#47; Returns a new instance of the directed channel graph.
     * </pre>
     *
     * Protobuf type {@code lnrpc.ChannelGraph}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelGraph, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelGraph)
        lnrpc.Rpc.ChannelGraphOrBuilder {
      // Construct using lnrpc.Rpc.ChannelGraph.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.LightningNode> getNodesList() {
        return java.util.Collections.unmodifiableList(
            instance.getNodesList());
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public int getNodesCount() {
        return instance.getNodesCount();
      }/**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public lnrpc.Rpc.LightningNode getNodes(int index) {
        return instance.getNodes(index);
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder setNodes(
          int index, lnrpc.Rpc.LightningNode value) {
        copyOnWrite();
        instance.setNodes(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder setNodes(
          int index, lnrpc.Rpc.LightningNode.Builder builderForValue) {
        copyOnWrite();
        instance.setNodes(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder addNodes(lnrpc.Rpc.LightningNode value) {
        copyOnWrite();
        instance.addNodes(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder addNodes(
          int index, lnrpc.Rpc.LightningNode value) {
        copyOnWrite();
        instance.addNodes(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder addNodes(
          lnrpc.Rpc.LightningNode.Builder builderForValue) {
        copyOnWrite();
        instance.addNodes(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder addNodes(
          int index, lnrpc.Rpc.LightningNode.Builder builderForValue) {
        copyOnWrite();
        instance.addNodes(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder addAllNodes(
          java.lang.Iterable<? extends lnrpc.Rpc.LightningNode> values) {
        copyOnWrite();
        instance.addAllNodes(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder clearNodes() {
        copyOnWrite();
        instance.clearNodes();
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `LightningNode`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.LightningNode nodes = 1;</code>
       */
      public Builder removeNodes(int index) {
        copyOnWrite();
        instance.removeNodes(index);
        return this;
      }

      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public java.util.List<lnrpc.Rpc.ChannelEdge> getEdgesList() {
        return java.util.Collections.unmodifiableList(
            instance.getEdgesList());
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public int getEdgesCount() {
        return instance.getEdgesCount();
      }/**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public lnrpc.Rpc.ChannelEdge getEdges(int index) {
        return instance.getEdges(index);
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder setEdges(
          int index, lnrpc.Rpc.ChannelEdge value) {
        copyOnWrite();
        instance.setEdges(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder setEdges(
          int index, lnrpc.Rpc.ChannelEdge.Builder builderForValue) {
        copyOnWrite();
        instance.setEdges(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder addEdges(lnrpc.Rpc.ChannelEdge value) {
        copyOnWrite();
        instance.addEdges(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder addEdges(
          int index, lnrpc.Rpc.ChannelEdge value) {
        copyOnWrite();
        instance.addEdges(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder addEdges(
          lnrpc.Rpc.ChannelEdge.Builder builderForValue) {
        copyOnWrite();
        instance.addEdges(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder addEdges(
          int index, lnrpc.Rpc.ChannelEdge.Builder builderForValue) {
        copyOnWrite();
        instance.addEdges(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder addAllEdges(
          java.lang.Iterable<? extends lnrpc.Rpc.ChannelEdge> values) {
        copyOnWrite();
        instance.addAllEdges(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder clearEdges() {
        copyOnWrite();
        instance.clearEdges();
        return this;
      }
      /**
       * <pre>
       *&#47; The list of `ChannelEdge`s in this channel graph
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelEdge edges = 2;</code>
       */
      public Builder removeEdges(int index) {
        copyOnWrite();
        instance.removeEdges(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelGraph)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelGraph();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          nodes_.makeImmutable();
          edges_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelGraph other = (lnrpc.Rpc.ChannelGraph) arg1;
          nodes_= visitor.visitList(nodes_, other.nodes_);
          edges_= visitor.visitList(edges_, other.edges_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!nodes_.isModifiable()) {
                    nodes_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(nodes_);
                  }
                  nodes_.add(
                      input.readMessage(lnrpc.Rpc.LightningNode.parser(), extensionRegistry));
                  break;
                }
                case 18: {
                  if (!edges_.isModifiable()) {
                    edges_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(edges_);
                  }
                  edges_.add(
                      input.readMessage(lnrpc.Rpc.ChannelEdge.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelGraph.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelGraph)
    private static final lnrpc.Rpc.ChannelGraph DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelGraph();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelGraph getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelGraph> PARSER;

    public static com.google.protobuf.Parser<ChannelGraph> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChanInfoRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChanInfoRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    long getChanId();
  }
  /**
   * Protobuf type {@code lnrpc.ChanInfoRequest}
   */
  public  static final class ChanInfoRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ChanInfoRequest, ChanInfoRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChanInfoRequest)
      ChanInfoRequestOrBuilder {
    private ChanInfoRequest() {
    }
    public static final int CHAN_ID_FIELD_NUMBER = 1;
    private long chanId_;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (chanId_ != 0L) {
        output.writeUInt64(1, chanId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, chanId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChanInfoRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChanInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChanInfoRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChanInfoRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChanInfoRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChanInfoRequest)
        lnrpc.Rpc.ChanInfoRequestOrBuilder {
      // Construct using lnrpc.Rpc.ChanInfoRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChanInfoRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChanInfoRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChanInfoRequest other = (lnrpc.Rpc.ChanInfoRequest) arg1;
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  chanId_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChanInfoRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChanInfoRequest)
    private static final lnrpc.Rpc.ChanInfoRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChanInfoRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChanInfoRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChanInfoRequest> PARSER;

    public static com.google.protobuf.Parser<ChanInfoRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NetworkInfoRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NetworkInfoRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.NetworkInfoRequest}
   */
  public  static final class NetworkInfoRequest extends
      com.google.protobuf.GeneratedMessageLite<
          NetworkInfoRequest, NetworkInfoRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NetworkInfoRequest)
      NetworkInfoRequestOrBuilder {
    private NetworkInfoRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NetworkInfoRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NetworkInfoRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NetworkInfoRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NetworkInfoRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NetworkInfoRequest)
        lnrpc.Rpc.NetworkInfoRequestOrBuilder {
      // Construct using lnrpc.Rpc.NetworkInfoRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.NetworkInfoRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NetworkInfoRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NetworkInfoRequest other = (lnrpc.Rpc.NetworkInfoRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NetworkInfoRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NetworkInfoRequest)
    private static final lnrpc.Rpc.NetworkInfoRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NetworkInfoRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NetworkInfoRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NetworkInfoRequest> PARSER;

    public static com.google.protobuf.Parser<NetworkInfoRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NetworkInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NetworkInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional uint32 graph_diameter = 1;</code>
     */
    int getGraphDiameter();

    /**
     * <code>optional double avg_out_degree = 2;</code>
     */
    double getAvgOutDegree();

    /**
     * <code>optional uint32 max_out_degree = 3;</code>
     */
    int getMaxOutDegree();

    /**
     * <code>optional uint32 num_nodes = 4;</code>
     */
    int getNumNodes();

    /**
     * <code>optional uint32 num_channels = 5;</code>
     */
    int getNumChannels();

    /**
     * <code>optional int64 total_network_capacity = 6;</code>
     */
    long getTotalNetworkCapacity();

    /**
     * <code>optional double avg_channel_size = 7;</code>
     */
    double getAvgChannelSize();

    /**
     * <code>optional int64 min_channel_size = 8;</code>
     */
    long getMinChannelSize();

    /**
     * <code>optional int64 max_channel_size = 9;</code>
     */
    long getMaxChannelSize();
  }
  /**
   * Protobuf type {@code lnrpc.NetworkInfo}
   */
  public  static final class NetworkInfo extends
      com.google.protobuf.GeneratedMessageLite<
          NetworkInfo, NetworkInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NetworkInfo)
      NetworkInfoOrBuilder {
    private NetworkInfo() {
    }
    public static final int GRAPH_DIAMETER_FIELD_NUMBER = 1;
    private int graphDiameter_;
    /**
     * <code>optional uint32 graph_diameter = 1;</code>
     */
    public int getGraphDiameter() {
      return graphDiameter_;
    }
    /**
     * <code>optional uint32 graph_diameter = 1;</code>
     */
    private void setGraphDiameter(int value) {
      
      graphDiameter_ = value;
    }
    /**
     * <code>optional uint32 graph_diameter = 1;</code>
     */
    private void clearGraphDiameter() {
      
      graphDiameter_ = 0;
    }

    public static final int AVG_OUT_DEGREE_FIELD_NUMBER = 2;
    private double avgOutDegree_;
    /**
     * <code>optional double avg_out_degree = 2;</code>
     */
    public double getAvgOutDegree() {
      return avgOutDegree_;
    }
    /**
     * <code>optional double avg_out_degree = 2;</code>
     */
    private void setAvgOutDegree(double value) {
      
      avgOutDegree_ = value;
    }
    /**
     * <code>optional double avg_out_degree = 2;</code>
     */
    private void clearAvgOutDegree() {
      
      avgOutDegree_ = 0D;
    }

    public static final int MAX_OUT_DEGREE_FIELD_NUMBER = 3;
    private int maxOutDegree_;
    /**
     * <code>optional uint32 max_out_degree = 3;</code>
     */
    public int getMaxOutDegree() {
      return maxOutDegree_;
    }
    /**
     * <code>optional uint32 max_out_degree = 3;</code>
     */
    private void setMaxOutDegree(int value) {
      
      maxOutDegree_ = value;
    }
    /**
     * <code>optional uint32 max_out_degree = 3;</code>
     */
    private void clearMaxOutDegree() {
      
      maxOutDegree_ = 0;
    }

    public static final int NUM_NODES_FIELD_NUMBER = 4;
    private int numNodes_;
    /**
     * <code>optional uint32 num_nodes = 4;</code>
     */
    public int getNumNodes() {
      return numNodes_;
    }
    /**
     * <code>optional uint32 num_nodes = 4;</code>
     */
    private void setNumNodes(int value) {
      
      numNodes_ = value;
    }
    /**
     * <code>optional uint32 num_nodes = 4;</code>
     */
    private void clearNumNodes() {
      
      numNodes_ = 0;
    }

    public static final int NUM_CHANNELS_FIELD_NUMBER = 5;
    private int numChannels_;
    /**
     * <code>optional uint32 num_channels = 5;</code>
     */
    public int getNumChannels() {
      return numChannels_;
    }
    /**
     * <code>optional uint32 num_channels = 5;</code>
     */
    private void setNumChannels(int value) {
      
      numChannels_ = value;
    }
    /**
     * <code>optional uint32 num_channels = 5;</code>
     */
    private void clearNumChannels() {
      
      numChannels_ = 0;
    }

    public static final int TOTAL_NETWORK_CAPACITY_FIELD_NUMBER = 6;
    private long totalNetworkCapacity_;
    /**
     * <code>optional int64 total_network_capacity = 6;</code>
     */
    public long getTotalNetworkCapacity() {
      return totalNetworkCapacity_;
    }
    /**
     * <code>optional int64 total_network_capacity = 6;</code>
     */
    private void setTotalNetworkCapacity(long value) {
      
      totalNetworkCapacity_ = value;
    }
    /**
     * <code>optional int64 total_network_capacity = 6;</code>
     */
    private void clearTotalNetworkCapacity() {
      
      totalNetworkCapacity_ = 0L;
    }

    public static final int AVG_CHANNEL_SIZE_FIELD_NUMBER = 7;
    private double avgChannelSize_;
    /**
     * <code>optional double avg_channel_size = 7;</code>
     */
    public double getAvgChannelSize() {
      return avgChannelSize_;
    }
    /**
     * <code>optional double avg_channel_size = 7;</code>
     */
    private void setAvgChannelSize(double value) {
      
      avgChannelSize_ = value;
    }
    /**
     * <code>optional double avg_channel_size = 7;</code>
     */
    private void clearAvgChannelSize() {
      
      avgChannelSize_ = 0D;
    }

    public static final int MIN_CHANNEL_SIZE_FIELD_NUMBER = 8;
    private long minChannelSize_;
    /**
     * <code>optional int64 min_channel_size = 8;</code>
     */
    public long getMinChannelSize() {
      return minChannelSize_;
    }
    /**
     * <code>optional int64 min_channel_size = 8;</code>
     */
    private void setMinChannelSize(long value) {
      
      minChannelSize_ = value;
    }
    /**
     * <code>optional int64 min_channel_size = 8;</code>
     */
    private void clearMinChannelSize() {
      
      minChannelSize_ = 0L;
    }

    public static final int MAX_CHANNEL_SIZE_FIELD_NUMBER = 9;
    private long maxChannelSize_;
    /**
     * <code>optional int64 max_channel_size = 9;</code>
     */
    public long getMaxChannelSize() {
      return maxChannelSize_;
    }
    /**
     * <code>optional int64 max_channel_size = 9;</code>
     */
    private void setMaxChannelSize(long value) {
      
      maxChannelSize_ = value;
    }
    /**
     * <code>optional int64 max_channel_size = 9;</code>
     */
    private void clearMaxChannelSize() {
      
      maxChannelSize_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (graphDiameter_ != 0) {
        output.writeUInt32(1, graphDiameter_);
      }
      if (avgOutDegree_ != 0D) {
        output.writeDouble(2, avgOutDegree_);
      }
      if (maxOutDegree_ != 0) {
        output.writeUInt32(3, maxOutDegree_);
      }
      if (numNodes_ != 0) {
        output.writeUInt32(4, numNodes_);
      }
      if (numChannels_ != 0) {
        output.writeUInt32(5, numChannels_);
      }
      if (totalNetworkCapacity_ != 0L) {
        output.writeInt64(6, totalNetworkCapacity_);
      }
      if (avgChannelSize_ != 0D) {
        output.writeDouble(7, avgChannelSize_);
      }
      if (minChannelSize_ != 0L) {
        output.writeInt64(8, minChannelSize_);
      }
      if (maxChannelSize_ != 0L) {
        output.writeInt64(9, maxChannelSize_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (graphDiameter_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, graphDiameter_);
      }
      if (avgOutDegree_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, avgOutDegree_);
      }
      if (maxOutDegree_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, maxOutDegree_);
      }
      if (numNodes_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, numNodes_);
      }
      if (numChannels_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, numChannels_);
      }
      if (totalNetworkCapacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, totalNetworkCapacity_);
      }
      if (avgChannelSize_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, avgChannelSize_);
      }
      if (minChannelSize_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, minChannelSize_);
      }
      if (maxChannelSize_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, maxChannelSize_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NetworkInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NetworkInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NetworkInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NetworkInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NetworkInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NetworkInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NetworkInfo)
        lnrpc.Rpc.NetworkInfoOrBuilder {
      // Construct using lnrpc.Rpc.NetworkInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional uint32 graph_diameter = 1;</code>
       */
      public int getGraphDiameter() {
        return instance.getGraphDiameter();
      }
      /**
       * <code>optional uint32 graph_diameter = 1;</code>
       */
      public Builder setGraphDiameter(int value) {
        copyOnWrite();
        instance.setGraphDiameter(value);
        return this;
      }
      /**
       * <code>optional uint32 graph_diameter = 1;</code>
       */
      public Builder clearGraphDiameter() {
        copyOnWrite();
        instance.clearGraphDiameter();
        return this;
      }

      /**
       * <code>optional double avg_out_degree = 2;</code>
       */
      public double getAvgOutDegree() {
        return instance.getAvgOutDegree();
      }
      /**
       * <code>optional double avg_out_degree = 2;</code>
       */
      public Builder setAvgOutDegree(double value) {
        copyOnWrite();
        instance.setAvgOutDegree(value);
        return this;
      }
      /**
       * <code>optional double avg_out_degree = 2;</code>
       */
      public Builder clearAvgOutDegree() {
        copyOnWrite();
        instance.clearAvgOutDegree();
        return this;
      }

      /**
       * <code>optional uint32 max_out_degree = 3;</code>
       */
      public int getMaxOutDegree() {
        return instance.getMaxOutDegree();
      }
      /**
       * <code>optional uint32 max_out_degree = 3;</code>
       */
      public Builder setMaxOutDegree(int value) {
        copyOnWrite();
        instance.setMaxOutDegree(value);
        return this;
      }
      /**
       * <code>optional uint32 max_out_degree = 3;</code>
       */
      public Builder clearMaxOutDegree() {
        copyOnWrite();
        instance.clearMaxOutDegree();
        return this;
      }

      /**
       * <code>optional uint32 num_nodes = 4;</code>
       */
      public int getNumNodes() {
        return instance.getNumNodes();
      }
      /**
       * <code>optional uint32 num_nodes = 4;</code>
       */
      public Builder setNumNodes(int value) {
        copyOnWrite();
        instance.setNumNodes(value);
        return this;
      }
      /**
       * <code>optional uint32 num_nodes = 4;</code>
       */
      public Builder clearNumNodes() {
        copyOnWrite();
        instance.clearNumNodes();
        return this;
      }

      /**
       * <code>optional uint32 num_channels = 5;</code>
       */
      public int getNumChannels() {
        return instance.getNumChannels();
      }
      /**
       * <code>optional uint32 num_channels = 5;</code>
       */
      public Builder setNumChannels(int value) {
        copyOnWrite();
        instance.setNumChannels(value);
        return this;
      }
      /**
       * <code>optional uint32 num_channels = 5;</code>
       */
      public Builder clearNumChannels() {
        copyOnWrite();
        instance.clearNumChannels();
        return this;
      }

      /**
       * <code>optional int64 total_network_capacity = 6;</code>
       */
      public long getTotalNetworkCapacity() {
        return instance.getTotalNetworkCapacity();
      }
      /**
       * <code>optional int64 total_network_capacity = 6;</code>
       */
      public Builder setTotalNetworkCapacity(long value) {
        copyOnWrite();
        instance.setTotalNetworkCapacity(value);
        return this;
      }
      /**
       * <code>optional int64 total_network_capacity = 6;</code>
       */
      public Builder clearTotalNetworkCapacity() {
        copyOnWrite();
        instance.clearTotalNetworkCapacity();
        return this;
      }

      /**
       * <code>optional double avg_channel_size = 7;</code>
       */
      public double getAvgChannelSize() {
        return instance.getAvgChannelSize();
      }
      /**
       * <code>optional double avg_channel_size = 7;</code>
       */
      public Builder setAvgChannelSize(double value) {
        copyOnWrite();
        instance.setAvgChannelSize(value);
        return this;
      }
      /**
       * <code>optional double avg_channel_size = 7;</code>
       */
      public Builder clearAvgChannelSize() {
        copyOnWrite();
        instance.clearAvgChannelSize();
        return this;
      }

      /**
       * <code>optional int64 min_channel_size = 8;</code>
       */
      public long getMinChannelSize() {
        return instance.getMinChannelSize();
      }
      /**
       * <code>optional int64 min_channel_size = 8;</code>
       */
      public Builder setMinChannelSize(long value) {
        copyOnWrite();
        instance.setMinChannelSize(value);
        return this;
      }
      /**
       * <code>optional int64 min_channel_size = 8;</code>
       */
      public Builder clearMinChannelSize() {
        copyOnWrite();
        instance.clearMinChannelSize();
        return this;
      }

      /**
       * <code>optional int64 max_channel_size = 9;</code>
       */
      public long getMaxChannelSize() {
        return instance.getMaxChannelSize();
      }
      /**
       * <code>optional int64 max_channel_size = 9;</code>
       */
      public Builder setMaxChannelSize(long value) {
        copyOnWrite();
        instance.setMaxChannelSize(value);
        return this;
      }
      /**
       * <code>optional int64 max_channel_size = 9;</code>
       */
      public Builder clearMaxChannelSize() {
        copyOnWrite();
        instance.clearMaxChannelSize();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NetworkInfo)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NetworkInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NetworkInfo other = (lnrpc.Rpc.NetworkInfo) arg1;
          graphDiameter_ = visitor.visitInt(graphDiameter_ != 0, graphDiameter_,
              other.graphDiameter_ != 0, other.graphDiameter_);
          avgOutDegree_ = visitor.visitDouble(avgOutDegree_ != 0D, avgOutDegree_,
              other.avgOutDegree_ != 0D, other.avgOutDegree_);
          maxOutDegree_ = visitor.visitInt(maxOutDegree_ != 0, maxOutDegree_,
              other.maxOutDegree_ != 0, other.maxOutDegree_);
          numNodes_ = visitor.visitInt(numNodes_ != 0, numNodes_,
              other.numNodes_ != 0, other.numNodes_);
          numChannels_ = visitor.visitInt(numChannels_ != 0, numChannels_,
              other.numChannels_ != 0, other.numChannels_);
          totalNetworkCapacity_ = visitor.visitLong(totalNetworkCapacity_ != 0L, totalNetworkCapacity_,
              other.totalNetworkCapacity_ != 0L, other.totalNetworkCapacity_);
          avgChannelSize_ = visitor.visitDouble(avgChannelSize_ != 0D, avgChannelSize_,
              other.avgChannelSize_ != 0D, other.avgChannelSize_);
          minChannelSize_ = visitor.visitLong(minChannelSize_ != 0L, minChannelSize_,
              other.minChannelSize_ != 0L, other.minChannelSize_);
          maxChannelSize_ = visitor.visitLong(maxChannelSize_ != 0L, maxChannelSize_,
              other.maxChannelSize_ != 0L, other.maxChannelSize_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  graphDiameter_ = input.readUInt32();
                  break;
                }
                case 17: {

                  avgOutDegree_ = input.readDouble();
                  break;
                }
                case 24: {

                  maxOutDegree_ = input.readUInt32();
                  break;
                }
                case 32: {

                  numNodes_ = input.readUInt32();
                  break;
                }
                case 40: {

                  numChannels_ = input.readUInt32();
                  break;
                }
                case 48: {

                  totalNetworkCapacity_ = input.readInt64();
                  break;
                }
                case 57: {

                  avgChannelSize_ = input.readDouble();
                  break;
                }
                case 64: {

                  minChannelSize_ = input.readInt64();
                  break;
                }
                case 72: {

                  maxChannelSize_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NetworkInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NetworkInfo)
    private static final lnrpc.Rpc.NetworkInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NetworkInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NetworkInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NetworkInfo> PARSER;

    public static com.google.protobuf.Parser<NetworkInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StopRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.StopRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.StopRequest}
   */
  public  static final class StopRequest extends
      com.google.protobuf.GeneratedMessageLite<
          StopRequest, StopRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.StopRequest)
      StopRequestOrBuilder {
    private StopRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.StopRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.StopRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.StopRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.StopRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.StopRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.StopRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.StopRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.StopRequest)
        lnrpc.Rpc.StopRequestOrBuilder {
      // Construct using lnrpc.Rpc.StopRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.StopRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.StopRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.StopRequest other = (lnrpc.Rpc.StopRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.StopRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.StopRequest)
    private static final lnrpc.Rpc.StopRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new StopRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.StopRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StopRequest> PARSER;

    public static com.google.protobuf.Parser<StopRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StopResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.StopResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.StopResponse}
   */
  public  static final class StopResponse extends
      com.google.protobuf.GeneratedMessageLite<
          StopResponse, StopResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.StopResponse)
      StopResponseOrBuilder {
    private StopResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.StopResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.StopResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.StopResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.StopResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.StopResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.StopResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.StopResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.StopResponse)
        lnrpc.Rpc.StopResponseOrBuilder {
      // Construct using lnrpc.Rpc.StopResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.StopResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.StopResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.StopResponse other = (lnrpc.Rpc.StopResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.StopResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.StopResponse)
    private static final lnrpc.Rpc.StopResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new StopResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.StopResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StopResponse> PARSER;

    public static com.google.protobuf.Parser<StopResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GraphTopologySubscriptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GraphTopologySubscription)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.GraphTopologySubscription}
   */
  public  static final class GraphTopologySubscription extends
      com.google.protobuf.GeneratedMessageLite<
          GraphTopologySubscription, GraphTopologySubscription.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GraphTopologySubscription)
      GraphTopologySubscriptionOrBuilder {
    private GraphTopologySubscription() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GraphTopologySubscription parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GraphTopologySubscription prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GraphTopologySubscription}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GraphTopologySubscription, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GraphTopologySubscription)
        lnrpc.Rpc.GraphTopologySubscriptionOrBuilder {
      // Construct using lnrpc.Rpc.GraphTopologySubscription.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.GraphTopologySubscription)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GraphTopologySubscription();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GraphTopologySubscription other = (lnrpc.Rpc.GraphTopologySubscription) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GraphTopologySubscription.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GraphTopologySubscription)
    private static final lnrpc.Rpc.GraphTopologySubscription DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GraphTopologySubscription();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GraphTopologySubscription getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GraphTopologySubscription> PARSER;

    public static com.google.protobuf.Parser<GraphTopologySubscription> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface GraphTopologyUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.GraphTopologyUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    java.util.List<lnrpc.Rpc.NodeUpdate> 
        getNodeUpdatesList();
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    lnrpc.Rpc.NodeUpdate getNodeUpdates(int index);
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    int getNodeUpdatesCount();

    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    java.util.List<lnrpc.Rpc.ChannelEdgeUpdate> 
        getChannelUpdatesList();
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    lnrpc.Rpc.ChannelEdgeUpdate getChannelUpdates(int index);
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    int getChannelUpdatesCount();

    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    java.util.List<lnrpc.Rpc.ClosedChannelUpdate> 
        getClosedChansList();
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    lnrpc.Rpc.ClosedChannelUpdate getClosedChans(int index);
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    int getClosedChansCount();
  }
  /**
   * Protobuf type {@code lnrpc.GraphTopologyUpdate}
   */
  public  static final class GraphTopologyUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          GraphTopologyUpdate, GraphTopologyUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.GraphTopologyUpdate)
      GraphTopologyUpdateOrBuilder {
    private GraphTopologyUpdate() {
      nodeUpdates_ = emptyProtobufList();
      channelUpdates_ = emptyProtobufList();
      closedChans_ = emptyProtobufList();
    }
    public static final int NODE_UPDATES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.NodeUpdate> nodeUpdates_;
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.NodeUpdate> getNodeUpdatesList() {
      return nodeUpdates_;
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.NodeUpdateOrBuilder> 
        getNodeUpdatesOrBuilderList() {
      return nodeUpdates_;
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    public int getNodeUpdatesCount() {
      return nodeUpdates_.size();
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    public lnrpc.Rpc.NodeUpdate getNodeUpdates(int index) {
      return nodeUpdates_.get(index);
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    public lnrpc.Rpc.NodeUpdateOrBuilder getNodeUpdatesOrBuilder(
        int index) {
      return nodeUpdates_.get(index);
    }
    private void ensureNodeUpdatesIsMutable() {
      if (!nodeUpdates_.isModifiable()) {
        nodeUpdates_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(nodeUpdates_);
       }
    }

    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void setNodeUpdates(
        int index, lnrpc.Rpc.NodeUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void setNodeUpdates(
        int index, lnrpc.Rpc.NodeUpdate.Builder builderForValue) {
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void addNodeUpdates(lnrpc.Rpc.NodeUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.add(value);
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void addNodeUpdates(
        int index, lnrpc.Rpc.NodeUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void addNodeUpdates(
        lnrpc.Rpc.NodeUpdate.Builder builderForValue) {
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void addNodeUpdates(
        int index, lnrpc.Rpc.NodeUpdate.Builder builderForValue) {
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void addAllNodeUpdates(
        java.lang.Iterable<? extends lnrpc.Rpc.NodeUpdate> values) {
      ensureNodeUpdatesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, nodeUpdates_);
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void clearNodeUpdates() {
      nodeUpdates_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
     */
    private void removeNodeUpdates(int index) {
      ensureNodeUpdatesIsMutable();
      nodeUpdates_.remove(index);
    }

    public static final int CHANNEL_UPDATES_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.ChannelEdgeUpdate> channelUpdates_;
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    public java.util.List<lnrpc.Rpc.ChannelEdgeUpdate> getChannelUpdatesList() {
      return channelUpdates_;
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ChannelEdgeUpdateOrBuilder> 
        getChannelUpdatesOrBuilderList() {
      return channelUpdates_;
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    public int getChannelUpdatesCount() {
      return channelUpdates_.size();
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    public lnrpc.Rpc.ChannelEdgeUpdate getChannelUpdates(int index) {
      return channelUpdates_.get(index);
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    public lnrpc.Rpc.ChannelEdgeUpdateOrBuilder getChannelUpdatesOrBuilder(
        int index) {
      return channelUpdates_.get(index);
    }
    private void ensureChannelUpdatesIsMutable() {
      if (!channelUpdates_.isModifiable()) {
        channelUpdates_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(channelUpdates_);
       }
    }

    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void setChannelUpdates(
        int index, lnrpc.Rpc.ChannelEdgeUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelUpdatesIsMutable();
      channelUpdates_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void setChannelUpdates(
        int index, lnrpc.Rpc.ChannelEdgeUpdate.Builder builderForValue) {
      ensureChannelUpdatesIsMutable();
      channelUpdates_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void addChannelUpdates(lnrpc.Rpc.ChannelEdgeUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelUpdatesIsMutable();
      channelUpdates_.add(value);
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void addChannelUpdates(
        int index, lnrpc.Rpc.ChannelEdgeUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelUpdatesIsMutable();
      channelUpdates_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void addChannelUpdates(
        lnrpc.Rpc.ChannelEdgeUpdate.Builder builderForValue) {
      ensureChannelUpdatesIsMutable();
      channelUpdates_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void addChannelUpdates(
        int index, lnrpc.Rpc.ChannelEdgeUpdate.Builder builderForValue) {
      ensureChannelUpdatesIsMutable();
      channelUpdates_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void addAllChannelUpdates(
        java.lang.Iterable<? extends lnrpc.Rpc.ChannelEdgeUpdate> values) {
      ensureChannelUpdatesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, channelUpdates_);
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void clearChannelUpdates() {
      channelUpdates_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
     */
    private void removeChannelUpdates(int index) {
      ensureChannelUpdatesIsMutable();
      channelUpdates_.remove(index);
    }

    public static final int CLOSED_CHANS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.ClosedChannelUpdate> closedChans_;
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    public java.util.List<lnrpc.Rpc.ClosedChannelUpdate> getClosedChansList() {
      return closedChans_;
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ClosedChannelUpdateOrBuilder> 
        getClosedChansOrBuilderList() {
      return closedChans_;
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    public int getClosedChansCount() {
      return closedChans_.size();
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    public lnrpc.Rpc.ClosedChannelUpdate getClosedChans(int index) {
      return closedChans_.get(index);
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    public lnrpc.Rpc.ClosedChannelUpdateOrBuilder getClosedChansOrBuilder(
        int index) {
      return closedChans_.get(index);
    }
    private void ensureClosedChansIsMutable() {
      if (!closedChans_.isModifiable()) {
        closedChans_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(closedChans_);
       }
    }

    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void setClosedChans(
        int index, lnrpc.Rpc.ClosedChannelUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureClosedChansIsMutable();
      closedChans_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void setClosedChans(
        int index, lnrpc.Rpc.ClosedChannelUpdate.Builder builderForValue) {
      ensureClosedChansIsMutable();
      closedChans_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void addClosedChans(lnrpc.Rpc.ClosedChannelUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureClosedChansIsMutable();
      closedChans_.add(value);
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void addClosedChans(
        int index, lnrpc.Rpc.ClosedChannelUpdate value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureClosedChansIsMutable();
      closedChans_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void addClosedChans(
        lnrpc.Rpc.ClosedChannelUpdate.Builder builderForValue) {
      ensureClosedChansIsMutable();
      closedChans_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void addClosedChans(
        int index, lnrpc.Rpc.ClosedChannelUpdate.Builder builderForValue) {
      ensureClosedChansIsMutable();
      closedChans_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void addAllClosedChans(
        java.lang.Iterable<? extends lnrpc.Rpc.ClosedChannelUpdate> values) {
      ensureClosedChansIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, closedChans_);
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void clearClosedChans() {
      closedChans_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
     */
    private void removeClosedChans(int index) {
      ensureClosedChansIsMutable();
      closedChans_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < nodeUpdates_.size(); i++) {
        output.writeMessage(1, nodeUpdates_.get(i));
      }
      for (int i = 0; i < channelUpdates_.size(); i++) {
        output.writeMessage(2, channelUpdates_.get(i));
      }
      for (int i = 0; i < closedChans_.size(); i++) {
        output.writeMessage(3, closedChans_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < nodeUpdates_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, nodeUpdates_.get(i));
      }
      for (int i = 0; i < channelUpdates_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, channelUpdates_.get(i));
      }
      for (int i = 0; i < closedChans_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, closedChans_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.GraphTopologyUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.GraphTopologyUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.GraphTopologyUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.GraphTopologyUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.GraphTopologyUpdate)
        lnrpc.Rpc.GraphTopologyUpdateOrBuilder {
      // Construct using lnrpc.Rpc.GraphTopologyUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.NodeUpdate> getNodeUpdatesList() {
        return java.util.Collections.unmodifiableList(
            instance.getNodeUpdatesList());
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public int getNodeUpdatesCount() {
        return instance.getNodeUpdatesCount();
      }/**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public lnrpc.Rpc.NodeUpdate getNodeUpdates(int index) {
        return instance.getNodeUpdates(index);
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder setNodeUpdates(
          int index, lnrpc.Rpc.NodeUpdate value) {
        copyOnWrite();
        instance.setNodeUpdates(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder setNodeUpdates(
          int index, lnrpc.Rpc.NodeUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setNodeUpdates(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder addNodeUpdates(lnrpc.Rpc.NodeUpdate value) {
        copyOnWrite();
        instance.addNodeUpdates(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder addNodeUpdates(
          int index, lnrpc.Rpc.NodeUpdate value) {
        copyOnWrite();
        instance.addNodeUpdates(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder addNodeUpdates(
          lnrpc.Rpc.NodeUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.addNodeUpdates(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder addNodeUpdates(
          int index, lnrpc.Rpc.NodeUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.addNodeUpdates(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder addAllNodeUpdates(
          java.lang.Iterable<? extends lnrpc.Rpc.NodeUpdate> values) {
        copyOnWrite();
        instance.addAllNodeUpdates(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder clearNodeUpdates() {
        copyOnWrite();
        instance.clearNodeUpdates();
        return this;
      }
      /**
       * <code>repeated .lnrpc.NodeUpdate node_updates = 1;</code>
       */
      public Builder removeNodeUpdates(int index) {
        copyOnWrite();
        instance.removeNodeUpdates(index);
        return this;
      }

      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public java.util.List<lnrpc.Rpc.ChannelEdgeUpdate> getChannelUpdatesList() {
        return java.util.Collections.unmodifiableList(
            instance.getChannelUpdatesList());
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public int getChannelUpdatesCount() {
        return instance.getChannelUpdatesCount();
      }/**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public lnrpc.Rpc.ChannelEdgeUpdate getChannelUpdates(int index) {
        return instance.getChannelUpdates(index);
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder setChannelUpdates(
          int index, lnrpc.Rpc.ChannelEdgeUpdate value) {
        copyOnWrite();
        instance.setChannelUpdates(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder setChannelUpdates(
          int index, lnrpc.Rpc.ChannelEdgeUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setChannelUpdates(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder addChannelUpdates(lnrpc.Rpc.ChannelEdgeUpdate value) {
        copyOnWrite();
        instance.addChannelUpdates(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder addChannelUpdates(
          int index, lnrpc.Rpc.ChannelEdgeUpdate value) {
        copyOnWrite();
        instance.addChannelUpdates(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder addChannelUpdates(
          lnrpc.Rpc.ChannelEdgeUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.addChannelUpdates(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder addChannelUpdates(
          int index, lnrpc.Rpc.ChannelEdgeUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.addChannelUpdates(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder addAllChannelUpdates(
          java.lang.Iterable<? extends lnrpc.Rpc.ChannelEdgeUpdate> values) {
        copyOnWrite();
        instance.addAllChannelUpdates(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder clearChannelUpdates() {
        copyOnWrite();
        instance.clearChannelUpdates();
        return this;
      }
      /**
       * <code>repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;</code>
       */
      public Builder removeChannelUpdates(int index) {
        copyOnWrite();
        instance.removeChannelUpdates(index);
        return this;
      }

      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public java.util.List<lnrpc.Rpc.ClosedChannelUpdate> getClosedChansList() {
        return java.util.Collections.unmodifiableList(
            instance.getClosedChansList());
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public int getClosedChansCount() {
        return instance.getClosedChansCount();
      }/**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public lnrpc.Rpc.ClosedChannelUpdate getClosedChans(int index) {
        return instance.getClosedChans(index);
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder setClosedChans(
          int index, lnrpc.Rpc.ClosedChannelUpdate value) {
        copyOnWrite();
        instance.setClosedChans(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder setClosedChans(
          int index, lnrpc.Rpc.ClosedChannelUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.setClosedChans(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder addClosedChans(lnrpc.Rpc.ClosedChannelUpdate value) {
        copyOnWrite();
        instance.addClosedChans(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder addClosedChans(
          int index, lnrpc.Rpc.ClosedChannelUpdate value) {
        copyOnWrite();
        instance.addClosedChans(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder addClosedChans(
          lnrpc.Rpc.ClosedChannelUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.addClosedChans(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder addClosedChans(
          int index, lnrpc.Rpc.ClosedChannelUpdate.Builder builderForValue) {
        copyOnWrite();
        instance.addClosedChans(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder addAllClosedChans(
          java.lang.Iterable<? extends lnrpc.Rpc.ClosedChannelUpdate> values) {
        copyOnWrite();
        instance.addAllClosedChans(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder clearClosedChans() {
        copyOnWrite();
        instance.clearClosedChans();
        return this;
      }
      /**
       * <code>repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;</code>
       */
      public Builder removeClosedChans(int index) {
        copyOnWrite();
        instance.removeClosedChans(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.GraphTopologyUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.GraphTopologyUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          nodeUpdates_.makeImmutable();
          channelUpdates_.makeImmutable();
          closedChans_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.GraphTopologyUpdate other = (lnrpc.Rpc.GraphTopologyUpdate) arg1;
          nodeUpdates_= visitor.visitList(nodeUpdates_, other.nodeUpdates_);
          channelUpdates_= visitor.visitList(channelUpdates_, other.channelUpdates_);
          closedChans_= visitor.visitList(closedChans_, other.closedChans_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!nodeUpdates_.isModifiable()) {
                    nodeUpdates_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(nodeUpdates_);
                  }
                  nodeUpdates_.add(
                      input.readMessage(lnrpc.Rpc.NodeUpdate.parser(), extensionRegistry));
                  break;
                }
                case 18: {
                  if (!channelUpdates_.isModifiable()) {
                    channelUpdates_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(channelUpdates_);
                  }
                  channelUpdates_.add(
                      input.readMessage(lnrpc.Rpc.ChannelEdgeUpdate.parser(), extensionRegistry));
                  break;
                }
                case 26: {
                  if (!closedChans_.isModifiable()) {
                    closedChans_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(closedChans_);
                  }
                  closedChans_.add(
                      input.readMessage(lnrpc.Rpc.ClosedChannelUpdate.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.GraphTopologyUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.GraphTopologyUpdate)
    private static final lnrpc.Rpc.GraphTopologyUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new GraphTopologyUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.GraphTopologyUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<GraphTopologyUpdate> PARSER;

    public static com.google.protobuf.Parser<GraphTopologyUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface NodeUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.NodeUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>repeated string addresses = 1;</code>
     */
    java.util.List<String>
        getAddressesList();
    /**
     * <code>repeated string addresses = 1;</code>
     */
    int getAddressesCount();
    /**
     * <code>repeated string addresses = 1;</code>
     */
    java.lang.String getAddresses(int index);
    /**
     * <code>repeated string addresses = 1;</code>
     */
    com.google.protobuf.ByteString
        getAddressesBytes(int index);

    /**
     * <code>optional string identity_key = 2;</code>
     */
    java.lang.String getIdentityKey();
    /**
     * <code>optional string identity_key = 2;</code>
     */
    com.google.protobuf.ByteString
        getIdentityKeyBytes();

    /**
     * <code>optional bytes global_features = 3;</code>
     */
    com.google.protobuf.ByteString getGlobalFeatures();

    /**
     * <code>optional string alias = 4;</code>
     */
    java.lang.String getAlias();
    /**
     * <code>optional string alias = 4;</code>
     */
    com.google.protobuf.ByteString
        getAliasBytes();
  }
  /**
   * Protobuf type {@code lnrpc.NodeUpdate}
   */
  public  static final class NodeUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          NodeUpdate, NodeUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.NodeUpdate)
      NodeUpdateOrBuilder {
    private NodeUpdate() {
      addresses_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      identityKey_ = "";
      globalFeatures_ = com.google.protobuf.ByteString.EMPTY;
      alias_ = "";
    }
    private int bitField0_;
    public static final int ADDRESSES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<String> addresses_;
    /**
     * <code>repeated string addresses = 1;</code>
     */
    public java.util.List<String> getAddressesList() {
      return addresses_;
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    public int getAddressesCount() {
      return addresses_.size();
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    public java.lang.String getAddresses(int index) {
      return addresses_.get(index);
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAddressesBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          addresses_.get(index));
    }
    private void ensureAddressesIsMutable() {
      if (!addresses_.isModifiable()) {
        addresses_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(addresses_);
       }
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    private void setAddresses(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAddressesIsMutable();
      addresses_.set(index, value);
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    private void addAddresses(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureAddressesIsMutable();
      addresses_.add(value);
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    private void addAllAddresses(
        java.lang.Iterable<java.lang.String> values) {
      ensureAddressesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, addresses_);
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    private void clearAddresses() {
      addresses_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <code>repeated string addresses = 1;</code>
     */
    private void addAddressesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureAddressesIsMutable();
      addresses_.add(value.toStringUtf8());
    }

    public static final int IDENTITY_KEY_FIELD_NUMBER = 2;
    private java.lang.String identityKey_;
    /**
     * <code>optional string identity_key = 2;</code>
     */
    public java.lang.String getIdentityKey() {
      return identityKey_;
    }
    /**
     * <code>optional string identity_key = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIdentityKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(identityKey_);
    }
    /**
     * <code>optional string identity_key = 2;</code>
     */
    private void setIdentityKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      identityKey_ = value;
    }
    /**
     * <code>optional string identity_key = 2;</code>
     */
    private void clearIdentityKey() {
      
      identityKey_ = getDefaultInstance().getIdentityKey();
    }
    /**
     * <code>optional string identity_key = 2;</code>
     */
    private void setIdentityKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      identityKey_ = value.toStringUtf8();
    }

    public static final int GLOBAL_FEATURES_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString globalFeatures_;
    /**
     * <code>optional bytes global_features = 3;</code>
     */
    public com.google.protobuf.ByteString getGlobalFeatures() {
      return globalFeatures_;
    }
    /**
     * <code>optional bytes global_features = 3;</code>
     */
    private void setGlobalFeatures(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      globalFeatures_ = value;
    }
    /**
     * <code>optional bytes global_features = 3;</code>
     */
    private void clearGlobalFeatures() {
      
      globalFeatures_ = getDefaultInstance().getGlobalFeatures();
    }

    public static final int ALIAS_FIELD_NUMBER = 4;
    private java.lang.String alias_;
    /**
     * <code>optional string alias = 4;</code>
     */
    public java.lang.String getAlias() {
      return alias_;
    }
    /**
     * <code>optional string alias = 4;</code>
     */
    public com.google.protobuf.ByteString
        getAliasBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(alias_);
    }
    /**
     * <code>optional string alias = 4;</code>
     */
    private void setAlias(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      alias_ = value;
    }
    /**
     * <code>optional string alias = 4;</code>
     */
    private void clearAlias() {
      
      alias_ = getDefaultInstance().getAlias();
    }
    /**
     * <code>optional string alias = 4;</code>
     */
    private void setAliasBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      alias_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < addresses_.size(); i++) {
        output.writeString(1, addresses_.get(i));
      }
      if (!identityKey_.isEmpty()) {
        output.writeString(2, getIdentityKey());
      }
      if (!globalFeatures_.isEmpty()) {
        output.writeBytes(3, globalFeatures_);
      }
      if (!alias_.isEmpty()) {
        output.writeString(4, getAlias());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < addresses_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(addresses_.get(i));
        }
        size += dataSize;
        size += 1 * getAddressesList().size();
      }
      if (!identityKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getIdentityKey());
      }
      if (!globalFeatures_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, globalFeatures_);
      }
      if (!alias_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getAlias());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.NodeUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.NodeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.NodeUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.NodeUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.NodeUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.NodeUpdate)
        lnrpc.Rpc.NodeUpdateOrBuilder {
      // Construct using lnrpc.Rpc.NodeUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>repeated string addresses = 1;</code>
       */
      public java.util.List<String>
          getAddressesList() {
        return java.util.Collections.unmodifiableList(
            instance.getAddressesList());
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public int getAddressesCount() {
        return instance.getAddressesCount();
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public java.lang.String getAddresses(int index) {
        return instance.getAddresses(index);
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public com.google.protobuf.ByteString
          getAddressesBytes(int index) {
        return instance.getAddressesBytes(index);
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public Builder setAddresses(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setAddresses(index, value);
        return this;
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public Builder addAddresses(
          java.lang.String value) {
        copyOnWrite();
        instance.addAddresses(value);
        return this;
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public Builder addAllAddresses(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllAddresses(values);
        return this;
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public Builder clearAddresses() {
        copyOnWrite();
        instance.clearAddresses();
        return this;
      }
      /**
       * <code>repeated string addresses = 1;</code>
       */
      public Builder addAddressesBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addAddressesBytes(value);
        return this;
      }

      /**
       * <code>optional string identity_key = 2;</code>
       */
      public java.lang.String getIdentityKey() {
        return instance.getIdentityKey();
      }
      /**
       * <code>optional string identity_key = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIdentityKeyBytes() {
        return instance.getIdentityKeyBytes();
      }
      /**
       * <code>optional string identity_key = 2;</code>
       */
      public Builder setIdentityKey(
          java.lang.String value) {
        copyOnWrite();
        instance.setIdentityKey(value);
        return this;
      }
      /**
       * <code>optional string identity_key = 2;</code>
       */
      public Builder clearIdentityKey() {
        copyOnWrite();
        instance.clearIdentityKey();
        return this;
      }
      /**
       * <code>optional string identity_key = 2;</code>
       */
      public Builder setIdentityKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setIdentityKeyBytes(value);
        return this;
      }

      /**
       * <code>optional bytes global_features = 3;</code>
       */
      public com.google.protobuf.ByteString getGlobalFeatures() {
        return instance.getGlobalFeatures();
      }
      /**
       * <code>optional bytes global_features = 3;</code>
       */
      public Builder setGlobalFeatures(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setGlobalFeatures(value);
        return this;
      }
      /**
       * <code>optional bytes global_features = 3;</code>
       */
      public Builder clearGlobalFeatures() {
        copyOnWrite();
        instance.clearGlobalFeatures();
        return this;
      }

      /**
       * <code>optional string alias = 4;</code>
       */
      public java.lang.String getAlias() {
        return instance.getAlias();
      }
      /**
       * <code>optional string alias = 4;</code>
       */
      public com.google.protobuf.ByteString
          getAliasBytes() {
        return instance.getAliasBytes();
      }
      /**
       * <code>optional string alias = 4;</code>
       */
      public Builder setAlias(
          java.lang.String value) {
        copyOnWrite();
        instance.setAlias(value);
        return this;
      }
      /**
       * <code>optional string alias = 4;</code>
       */
      public Builder clearAlias() {
        copyOnWrite();
        instance.clearAlias();
        return this;
      }
      /**
       * <code>optional string alias = 4;</code>
       */
      public Builder setAliasBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAliasBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.NodeUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.NodeUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          addresses_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.NodeUpdate other = (lnrpc.Rpc.NodeUpdate) arg1;
          addresses_= visitor.visitList(addresses_, other.addresses_);
          identityKey_ = visitor.visitString(!identityKey_.isEmpty(), identityKey_,
              !other.identityKey_.isEmpty(), other.identityKey_);
          globalFeatures_ = visitor.visitByteString(globalFeatures_ != com.google.protobuf.ByteString.EMPTY, globalFeatures_,
              other.globalFeatures_ != com.google.protobuf.ByteString.EMPTY, other.globalFeatures_);
          alias_ = visitor.visitString(!alias_.isEmpty(), alias_,
              !other.alias_.isEmpty(), other.alias_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();
                  if (!addresses_.isModifiable()) {
                    addresses_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(addresses_);
                  }
                  addresses_.add(s);
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  identityKey_ = s;
                  break;
                }
                case 26: {

                  globalFeatures_ = input.readBytes();
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();

                  alias_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.NodeUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.NodeUpdate)
    private static final lnrpc.Rpc.NodeUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NodeUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.NodeUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<NodeUpdate> PARSER;

    public static com.google.protobuf.Parser<NodeUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelEdgeUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelEdgeUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    long getChanId();

    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    boolean hasChanPoint();
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    lnrpc.Rpc.ChannelPoint getChanPoint();

    /**
     * <code>optional int64 capacity = 3;</code>
     */
    long getCapacity();

    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    boolean hasRoutingPolicy();
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    lnrpc.Rpc.RoutingPolicy getRoutingPolicy();

    /**
     * <code>optional string advertising_node = 5;</code>
     */
    java.lang.String getAdvertisingNode();
    /**
     * <code>optional string advertising_node = 5;</code>
     */
    com.google.protobuf.ByteString
        getAdvertisingNodeBytes();

    /**
     * <code>optional string connecting_node = 6;</code>
     */
    java.lang.String getConnectingNode();
    /**
     * <code>optional string connecting_node = 6;</code>
     */
    com.google.protobuf.ByteString
        getConnectingNodeBytes();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelEdgeUpdate}
   */
  public  static final class ChannelEdgeUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelEdgeUpdate, ChannelEdgeUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelEdgeUpdate)
      ChannelEdgeUpdateOrBuilder {
    private ChannelEdgeUpdate() {
      advertisingNode_ = "";
      connectingNode_ = "";
    }
    public static final int CHAN_ID_FIELD_NUMBER = 1;
    private long chanId_;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public static final int CHAN_POINT_FIELD_NUMBER = 2;
    private lnrpc.Rpc.ChannelPoint chanPoint_;
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    public boolean hasChanPoint() {
      return chanPoint_ != null;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    public lnrpc.Rpc.ChannelPoint getChanPoint() {
      return chanPoint_ == null ? lnrpc.Rpc.ChannelPoint.getDefaultInstance() : chanPoint_;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void setChanPoint(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      chanPoint_ = value;
      
      }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void setChanPoint(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      chanPoint_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void mergeChanPoint(lnrpc.Rpc.ChannelPoint value) {
      if (chanPoint_ != null &&
          chanPoint_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        chanPoint_ =
          lnrpc.Rpc.ChannelPoint.newBuilder(chanPoint_).mergeFrom(value).buildPartial();
      } else {
        chanPoint_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void clearChanPoint() {  chanPoint_ = null;
      
    }

    public static final int CAPACITY_FIELD_NUMBER = 3;
    private long capacity_;
    /**
     * <code>optional int64 capacity = 3;</code>
     */
    public long getCapacity() {
      return capacity_;
    }
    /**
     * <code>optional int64 capacity = 3;</code>
     */
    private void setCapacity(long value) {
      
      capacity_ = value;
    }
    /**
     * <code>optional int64 capacity = 3;</code>
     */
    private void clearCapacity() {
      
      capacity_ = 0L;
    }

    public static final int ROUTING_POLICY_FIELD_NUMBER = 4;
    private lnrpc.Rpc.RoutingPolicy routingPolicy_;
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    public boolean hasRoutingPolicy() {
      return routingPolicy_ != null;
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    public lnrpc.Rpc.RoutingPolicy getRoutingPolicy() {
      return routingPolicy_ == null ? lnrpc.Rpc.RoutingPolicy.getDefaultInstance() : routingPolicy_;
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    private void setRoutingPolicy(lnrpc.Rpc.RoutingPolicy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      routingPolicy_ = value;
      
      }
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    private void setRoutingPolicy(
        lnrpc.Rpc.RoutingPolicy.Builder builderForValue) {
      routingPolicy_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    private void mergeRoutingPolicy(lnrpc.Rpc.RoutingPolicy value) {
      if (routingPolicy_ != null &&
          routingPolicy_ != lnrpc.Rpc.RoutingPolicy.getDefaultInstance()) {
        routingPolicy_ =
          lnrpc.Rpc.RoutingPolicy.newBuilder(routingPolicy_).mergeFrom(value).buildPartial();
      } else {
        routingPolicy_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
     */
    private void clearRoutingPolicy() {  routingPolicy_ = null;
      
    }

    public static final int ADVERTISING_NODE_FIELD_NUMBER = 5;
    private java.lang.String advertisingNode_;
    /**
     * <code>optional string advertising_node = 5;</code>
     */
    public java.lang.String getAdvertisingNode() {
      return advertisingNode_;
    }
    /**
     * <code>optional string advertising_node = 5;</code>
     */
    public com.google.protobuf.ByteString
        getAdvertisingNodeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(advertisingNode_);
    }
    /**
     * <code>optional string advertising_node = 5;</code>
     */
    private void setAdvertisingNode(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      advertisingNode_ = value;
    }
    /**
     * <code>optional string advertising_node = 5;</code>
     */
    private void clearAdvertisingNode() {
      
      advertisingNode_ = getDefaultInstance().getAdvertisingNode();
    }
    /**
     * <code>optional string advertising_node = 5;</code>
     */
    private void setAdvertisingNodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      advertisingNode_ = value.toStringUtf8();
    }

    public static final int CONNECTING_NODE_FIELD_NUMBER = 6;
    private java.lang.String connectingNode_;
    /**
     * <code>optional string connecting_node = 6;</code>
     */
    public java.lang.String getConnectingNode() {
      return connectingNode_;
    }
    /**
     * <code>optional string connecting_node = 6;</code>
     */
    public com.google.protobuf.ByteString
        getConnectingNodeBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(connectingNode_);
    }
    /**
     * <code>optional string connecting_node = 6;</code>
     */
    private void setConnectingNode(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      connectingNode_ = value;
    }
    /**
     * <code>optional string connecting_node = 6;</code>
     */
    private void clearConnectingNode() {
      
      connectingNode_ = getDefaultInstance().getConnectingNode();
    }
    /**
     * <code>optional string connecting_node = 6;</code>
     */
    private void setConnectingNodeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      connectingNode_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (chanId_ != 0L) {
        output.writeUInt64(1, chanId_);
      }
      if (chanPoint_ != null) {
        output.writeMessage(2, getChanPoint());
      }
      if (capacity_ != 0L) {
        output.writeInt64(3, capacity_);
      }
      if (routingPolicy_ != null) {
        output.writeMessage(4, getRoutingPolicy());
      }
      if (!advertisingNode_.isEmpty()) {
        output.writeString(5, getAdvertisingNode());
      }
      if (!connectingNode_.isEmpty()) {
        output.writeString(6, getConnectingNode());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, chanId_);
      }
      if (chanPoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getChanPoint());
      }
      if (capacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, capacity_);
      }
      if (routingPolicy_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getRoutingPolicy());
      }
      if (!advertisingNode_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getAdvertisingNode());
      }
      if (!connectingNode_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getConnectingNode());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelEdgeUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelEdgeUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelEdgeUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelEdgeUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelEdgeUpdate)
        lnrpc.Rpc.ChannelEdgeUpdateOrBuilder {
      // Construct using lnrpc.Rpc.ChannelEdgeUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public boolean hasChanPoint() {
        return instance.hasChanPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public lnrpc.Rpc.ChannelPoint getChanPoint() {
        return instance.getChanPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder setChanPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setChanPoint(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder setChanPoint(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setChanPoint(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder mergeChanPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeChanPoint(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder clearChanPoint() {  copyOnWrite();
        instance.clearChanPoint();
        return this;
      }

      /**
       * <code>optional int64 capacity = 3;</code>
       */
      public long getCapacity() {
        return instance.getCapacity();
      }
      /**
       * <code>optional int64 capacity = 3;</code>
       */
      public Builder setCapacity(long value) {
        copyOnWrite();
        instance.setCapacity(value);
        return this;
      }
      /**
       * <code>optional int64 capacity = 3;</code>
       */
      public Builder clearCapacity() {
        copyOnWrite();
        instance.clearCapacity();
        return this;
      }

      /**
       * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
       */
      public boolean hasRoutingPolicy() {
        return instance.hasRoutingPolicy();
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
       */
      public lnrpc.Rpc.RoutingPolicy getRoutingPolicy() {
        return instance.getRoutingPolicy();
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
       */
      public Builder setRoutingPolicy(lnrpc.Rpc.RoutingPolicy value) {
        copyOnWrite();
        instance.setRoutingPolicy(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
       */
      public Builder setRoutingPolicy(
          lnrpc.Rpc.RoutingPolicy.Builder builderForValue) {
        copyOnWrite();
        instance.setRoutingPolicy(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
       */
      public Builder mergeRoutingPolicy(lnrpc.Rpc.RoutingPolicy value) {
        copyOnWrite();
        instance.mergeRoutingPolicy(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.RoutingPolicy routing_policy = 4;</code>
       */
      public Builder clearRoutingPolicy() {  copyOnWrite();
        instance.clearRoutingPolicy();
        return this;
      }

      /**
       * <code>optional string advertising_node = 5;</code>
       */
      public java.lang.String getAdvertisingNode() {
        return instance.getAdvertisingNode();
      }
      /**
       * <code>optional string advertising_node = 5;</code>
       */
      public com.google.protobuf.ByteString
          getAdvertisingNodeBytes() {
        return instance.getAdvertisingNodeBytes();
      }
      /**
       * <code>optional string advertising_node = 5;</code>
       */
      public Builder setAdvertisingNode(
          java.lang.String value) {
        copyOnWrite();
        instance.setAdvertisingNode(value);
        return this;
      }
      /**
       * <code>optional string advertising_node = 5;</code>
       */
      public Builder clearAdvertisingNode() {
        copyOnWrite();
        instance.clearAdvertisingNode();
        return this;
      }
      /**
       * <code>optional string advertising_node = 5;</code>
       */
      public Builder setAdvertisingNodeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAdvertisingNodeBytes(value);
        return this;
      }

      /**
       * <code>optional string connecting_node = 6;</code>
       */
      public java.lang.String getConnectingNode() {
        return instance.getConnectingNode();
      }
      /**
       * <code>optional string connecting_node = 6;</code>
       */
      public com.google.protobuf.ByteString
          getConnectingNodeBytes() {
        return instance.getConnectingNodeBytes();
      }
      /**
       * <code>optional string connecting_node = 6;</code>
       */
      public Builder setConnectingNode(
          java.lang.String value) {
        copyOnWrite();
        instance.setConnectingNode(value);
        return this;
      }
      /**
       * <code>optional string connecting_node = 6;</code>
       */
      public Builder clearConnectingNode() {
        copyOnWrite();
        instance.clearConnectingNode();
        return this;
      }
      /**
       * <code>optional string connecting_node = 6;</code>
       */
      public Builder setConnectingNodeBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setConnectingNodeBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelEdgeUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelEdgeUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelEdgeUpdate other = (lnrpc.Rpc.ChannelEdgeUpdate) arg1;
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          chanPoint_ = visitor.visitMessage(chanPoint_, other.chanPoint_);
          capacity_ = visitor.visitLong(capacity_ != 0L, capacity_,
              other.capacity_ != 0L, other.capacity_);
          routingPolicy_ = visitor.visitMessage(routingPolicy_, other.routingPolicy_);
          advertisingNode_ = visitor.visitString(!advertisingNode_.isEmpty(), advertisingNode_,
              !other.advertisingNode_.isEmpty(), other.advertisingNode_);
          connectingNode_ = visitor.visitString(!connectingNode_.isEmpty(), connectingNode_,
              !other.connectingNode_.isEmpty(), other.connectingNode_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  chanId_ = input.readUInt64();
                  break;
                }
                case 18: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (chanPoint_ != null) {
                    subBuilder = chanPoint_.toBuilder();
                  }
                  chanPoint_ = input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(chanPoint_);
                    chanPoint_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 24: {

                  capacity_ = input.readInt64();
                  break;
                }
                case 34: {
                  lnrpc.Rpc.RoutingPolicy.Builder subBuilder = null;
                  if (routingPolicy_ != null) {
                    subBuilder = routingPolicy_.toBuilder();
                  }
                  routingPolicy_ = input.readMessage(lnrpc.Rpc.RoutingPolicy.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(routingPolicy_);
                    routingPolicy_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 42: {
                  String s = input.readStringRequireUtf8();

                  advertisingNode_ = s;
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  connectingNode_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelEdgeUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelEdgeUpdate)
    private static final lnrpc.Rpc.ChannelEdgeUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelEdgeUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelEdgeUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelEdgeUpdate> PARSER;

    public static com.google.protobuf.Parser<ChannelEdgeUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ClosedChannelUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ClosedChannelUpdate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    long getChanId();

    /**
     * <code>optional int64 capacity = 2;</code>
     */
    long getCapacity();

    /**
     * <code>optional uint32 closed_height = 3;</code>
     */
    int getClosedHeight();

    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    boolean hasChanPoint();
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    lnrpc.Rpc.ChannelPoint getChanPoint();
  }
  /**
   * Protobuf type {@code lnrpc.ClosedChannelUpdate}
   */
  public  static final class ClosedChannelUpdate extends
      com.google.protobuf.GeneratedMessageLite<
          ClosedChannelUpdate, ClosedChannelUpdate.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ClosedChannelUpdate)
      ClosedChannelUpdateOrBuilder {
    private ClosedChannelUpdate() {
    }
    public static final int CHAN_ID_FIELD_NUMBER = 1;
    private long chanId_;
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     **
     *The unique channel ID for the channel. The first 3 bytes are the block
     *height, the next 3 the index within the block, and the last 2 bytes are the
     *output index for the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 1;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public static final int CAPACITY_FIELD_NUMBER = 2;
    private long capacity_;
    /**
     * <code>optional int64 capacity = 2;</code>
     */
    public long getCapacity() {
      return capacity_;
    }
    /**
     * <code>optional int64 capacity = 2;</code>
     */
    private void setCapacity(long value) {
      
      capacity_ = value;
    }
    /**
     * <code>optional int64 capacity = 2;</code>
     */
    private void clearCapacity() {
      
      capacity_ = 0L;
    }

    public static final int CLOSED_HEIGHT_FIELD_NUMBER = 3;
    private int closedHeight_;
    /**
     * <code>optional uint32 closed_height = 3;</code>
     */
    public int getClosedHeight() {
      return closedHeight_;
    }
    /**
     * <code>optional uint32 closed_height = 3;</code>
     */
    private void setClosedHeight(int value) {
      
      closedHeight_ = value;
    }
    /**
     * <code>optional uint32 closed_height = 3;</code>
     */
    private void clearClosedHeight() {
      
      closedHeight_ = 0;
    }

    public static final int CHAN_POINT_FIELD_NUMBER = 4;
    private lnrpc.Rpc.ChannelPoint chanPoint_;
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    public boolean hasChanPoint() {
      return chanPoint_ != null;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    public lnrpc.Rpc.ChannelPoint getChanPoint() {
      return chanPoint_ == null ? lnrpc.Rpc.ChannelPoint.getDefaultInstance() : chanPoint_;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    private void setChanPoint(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      chanPoint_ = value;
      
      }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    private void setChanPoint(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      chanPoint_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    private void mergeChanPoint(lnrpc.Rpc.ChannelPoint value) {
      if (chanPoint_ != null &&
          chanPoint_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        chanPoint_ =
          lnrpc.Rpc.ChannelPoint.newBuilder(chanPoint_).mergeFrom(value).buildPartial();
      } else {
        chanPoint_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
     */
    private void clearChanPoint() {  chanPoint_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (chanId_ != 0L) {
        output.writeUInt64(1, chanId_);
      }
      if (capacity_ != 0L) {
        output.writeInt64(2, capacity_);
      }
      if (closedHeight_ != 0) {
        output.writeUInt32(3, closedHeight_);
      }
      if (chanPoint_ != null) {
        output.writeMessage(4, getChanPoint());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, chanId_);
      }
      if (capacity_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, capacity_);
      }
      if (closedHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, closedHeight_);
      }
      if (chanPoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getChanPoint());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ClosedChannelUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ClosedChannelUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ClosedChannelUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ClosedChannelUpdate, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ClosedChannelUpdate)
        lnrpc.Rpc.ClosedChannelUpdateOrBuilder {
      // Construct using lnrpc.Rpc.ClosedChannelUpdate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       **
       *The unique channel ID for the channel. The first 3 bytes are the block
       *height, the next 3 the index within the block, and the last 2 bytes are the
       *output index for the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 1;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      /**
       * <code>optional int64 capacity = 2;</code>
       */
      public long getCapacity() {
        return instance.getCapacity();
      }
      /**
       * <code>optional int64 capacity = 2;</code>
       */
      public Builder setCapacity(long value) {
        copyOnWrite();
        instance.setCapacity(value);
        return this;
      }
      /**
       * <code>optional int64 capacity = 2;</code>
       */
      public Builder clearCapacity() {
        copyOnWrite();
        instance.clearCapacity();
        return this;
      }

      /**
       * <code>optional uint32 closed_height = 3;</code>
       */
      public int getClosedHeight() {
        return instance.getClosedHeight();
      }
      /**
       * <code>optional uint32 closed_height = 3;</code>
       */
      public Builder setClosedHeight(int value) {
        copyOnWrite();
        instance.setClosedHeight(value);
        return this;
      }
      /**
       * <code>optional uint32 closed_height = 3;</code>
       */
      public Builder clearClosedHeight() {
        copyOnWrite();
        instance.clearClosedHeight();
        return this;
      }

      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
       */
      public boolean hasChanPoint() {
        return instance.hasChanPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
       */
      public lnrpc.Rpc.ChannelPoint getChanPoint() {
        return instance.getChanPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
       */
      public Builder setChanPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setChanPoint(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
       */
      public Builder setChanPoint(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setChanPoint(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
       */
      public Builder mergeChanPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeChanPoint(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint chan_point = 4;</code>
       */
      public Builder clearChanPoint() {  copyOnWrite();
        instance.clearChanPoint();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ClosedChannelUpdate)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ClosedChannelUpdate();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ClosedChannelUpdate other = (lnrpc.Rpc.ClosedChannelUpdate) arg1;
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          capacity_ = visitor.visitLong(capacity_ != 0L, capacity_,
              other.capacity_ != 0L, other.capacity_);
          closedHeight_ = visitor.visitInt(closedHeight_ != 0, closedHeight_,
              other.closedHeight_ != 0, other.closedHeight_);
          chanPoint_ = visitor.visitMessage(chanPoint_, other.chanPoint_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  chanId_ = input.readUInt64();
                  break;
                }
                case 16: {

                  capacity_ = input.readInt64();
                  break;
                }
                case 24: {

                  closedHeight_ = input.readUInt32();
                  break;
                }
                case 34: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (chanPoint_ != null) {
                    subBuilder = chanPoint_.toBuilder();
                  }
                  chanPoint_ = input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(chanPoint_);
                    chanPoint_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ClosedChannelUpdate.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ClosedChannelUpdate)
    private static final lnrpc.Rpc.ClosedChannelUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ClosedChannelUpdate();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ClosedChannelUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ClosedChannelUpdate> PARSER;

    public static com.google.protobuf.Parser<ClosedChannelUpdate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface HopHintOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.HopHint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    java.lang.String getNodeId();
    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getNodeIdBytes();

    /**
     * <pre>
     *&#47; The unique identifier of the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    long getChanId();

    /**
     * <pre>
     *&#47; The base fee of the channel denominated in millisatoshis.
     * </pre>
     *
     * <code>optional uint32 fee_base_msat = 3;</code>
     */
    int getFeeBaseMsat();

    /**
     * <pre>
     **
     *The fee rate of the channel for sending one satoshi across it denominated in
     *millionths of a satoshi.
     * </pre>
     *
     * <code>optional uint32 fee_proportional_millionths = 4;</code>
     */
    int getFeeProportionalMillionths();

    /**
     * <pre>
     *&#47; The time-lock delta of the channel.
     * </pre>
     *
     * <code>optional uint32 cltv_expiry_delta = 5;</code>
     */
    int getCltvExpiryDelta();
  }
  /**
   * Protobuf type {@code lnrpc.HopHint}
   */
  public  static final class HopHint extends
      com.google.protobuf.GeneratedMessageLite<
          HopHint, HopHint.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.HopHint)
      HopHintOrBuilder {
    private HopHint() {
      nodeId_ = "";
    }
    public static final int NODE_ID_FIELD_NUMBER = 1;
    private java.lang.String nodeId_;
    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    public java.lang.String getNodeId() {
      return nodeId_;
    }
    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNodeIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(nodeId_);
    }
    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    private void setNodeId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      nodeId_ = value;
    }
    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    private void clearNodeId() {
      
      nodeId_ = getDefaultInstance().getNodeId();
    }
    /**
     * <pre>
     *&#47; The public key of the node at the start of the channel.
     * </pre>
     *
     * <code>optional string node_id = 1;</code>
     */
    private void setNodeIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      nodeId_ = value.toStringUtf8();
    }

    public static final int CHAN_ID_FIELD_NUMBER = 2;
    private long chanId_;
    /**
     * <pre>
     *&#47; The unique identifier of the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    public long getChanId() {
      return chanId_;
    }
    /**
     * <pre>
     *&#47; The unique identifier of the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    private void setChanId(long value) {
      
      chanId_ = value;
    }
    /**
     * <pre>
     *&#47; The unique identifier of the channel.
     * </pre>
     *
     * <code>optional uint64 chan_id = 2;</code>
     */
    private void clearChanId() {
      
      chanId_ = 0L;
    }

    public static final int FEE_BASE_MSAT_FIELD_NUMBER = 3;
    private int feeBaseMsat_;
    /**
     * <pre>
     *&#47; The base fee of the channel denominated in millisatoshis.
     * </pre>
     *
     * <code>optional uint32 fee_base_msat = 3;</code>
     */
    public int getFeeBaseMsat() {
      return feeBaseMsat_;
    }
    /**
     * <pre>
     *&#47; The base fee of the channel denominated in millisatoshis.
     * </pre>
     *
     * <code>optional uint32 fee_base_msat = 3;</code>
     */
    private void setFeeBaseMsat(int value) {
      
      feeBaseMsat_ = value;
    }
    /**
     * <pre>
     *&#47; The base fee of the channel denominated in millisatoshis.
     * </pre>
     *
     * <code>optional uint32 fee_base_msat = 3;</code>
     */
    private void clearFeeBaseMsat() {
      
      feeBaseMsat_ = 0;
    }

    public static final int FEE_PROPORTIONAL_MILLIONTHS_FIELD_NUMBER = 4;
    private int feeProportionalMillionths_;
    /**
     * <pre>
     **
     *The fee rate of the channel for sending one satoshi across it denominated in
     *millionths of a satoshi.
     * </pre>
     *
     * <code>optional uint32 fee_proportional_millionths = 4;</code>
     */
    public int getFeeProportionalMillionths() {
      return feeProportionalMillionths_;
    }
    /**
     * <pre>
     **
     *The fee rate of the channel for sending one satoshi across it denominated in
     *millionths of a satoshi.
     * </pre>
     *
     * <code>optional uint32 fee_proportional_millionths = 4;</code>
     */
    private void setFeeProportionalMillionths(int value) {
      
      feeProportionalMillionths_ = value;
    }
    /**
     * <pre>
     **
     *The fee rate of the channel for sending one satoshi across it denominated in
     *millionths of a satoshi.
     * </pre>
     *
     * <code>optional uint32 fee_proportional_millionths = 4;</code>
     */
    private void clearFeeProportionalMillionths() {
      
      feeProportionalMillionths_ = 0;
    }

    public static final int CLTV_EXPIRY_DELTA_FIELD_NUMBER = 5;
    private int cltvExpiryDelta_;
    /**
     * <pre>
     *&#47; The time-lock delta of the channel.
     * </pre>
     *
     * <code>optional uint32 cltv_expiry_delta = 5;</code>
     */
    public int getCltvExpiryDelta() {
      return cltvExpiryDelta_;
    }
    /**
     * <pre>
     *&#47; The time-lock delta of the channel.
     * </pre>
     *
     * <code>optional uint32 cltv_expiry_delta = 5;</code>
     */
    private void setCltvExpiryDelta(int value) {
      
      cltvExpiryDelta_ = value;
    }
    /**
     * <pre>
     *&#47; The time-lock delta of the channel.
     * </pre>
     *
     * <code>optional uint32 cltv_expiry_delta = 5;</code>
     */
    private void clearCltvExpiryDelta() {
      
      cltvExpiryDelta_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!nodeId_.isEmpty()) {
        output.writeString(1, getNodeId());
      }
      if (chanId_ != 0L) {
        output.writeUInt64(2, chanId_);
      }
      if (feeBaseMsat_ != 0) {
        output.writeUInt32(3, feeBaseMsat_);
      }
      if (feeProportionalMillionths_ != 0) {
        output.writeUInt32(4, feeProportionalMillionths_);
      }
      if (cltvExpiryDelta_ != 0) {
        output.writeUInt32(5, cltvExpiryDelta_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!nodeId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getNodeId());
      }
      if (chanId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, chanId_);
      }
      if (feeBaseMsat_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, feeBaseMsat_);
      }
      if (feeProportionalMillionths_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, feeProportionalMillionths_);
      }
      if (cltvExpiryDelta_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cltvExpiryDelta_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.HopHint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.HopHint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.HopHint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.HopHint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.HopHint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.HopHint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.HopHint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.HopHint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.HopHint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.HopHint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.HopHint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.HopHint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.HopHint, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.HopHint)
        lnrpc.Rpc.HopHintOrBuilder {
      // Construct using lnrpc.Rpc.HopHint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The public key of the node at the start of the channel.
       * </pre>
       *
       * <code>optional string node_id = 1;</code>
       */
      public java.lang.String getNodeId() {
        return instance.getNodeId();
      }
      /**
       * <pre>
       *&#47; The public key of the node at the start of the channel.
       * </pre>
       *
       * <code>optional string node_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNodeIdBytes() {
        return instance.getNodeIdBytes();
      }
      /**
       * <pre>
       *&#47; The public key of the node at the start of the channel.
       * </pre>
       *
       * <code>optional string node_id = 1;</code>
       */
      public Builder setNodeId(
          java.lang.String value) {
        copyOnWrite();
        instance.setNodeId(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The public key of the node at the start of the channel.
       * </pre>
       *
       * <code>optional string node_id = 1;</code>
       */
      public Builder clearNodeId() {
        copyOnWrite();
        instance.clearNodeId();
        return this;
      }
      /**
       * <pre>
       *&#47; The public key of the node at the start of the channel.
       * </pre>
       *
       * <code>optional string node_id = 1;</code>
       */
      public Builder setNodeIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setNodeIdBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The unique identifier of the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 2;</code>
       */
      public long getChanId() {
        return instance.getChanId();
      }
      /**
       * <pre>
       *&#47; The unique identifier of the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 2;</code>
       */
      public Builder setChanId(long value) {
        copyOnWrite();
        instance.setChanId(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The unique identifier of the channel.
       * </pre>
       *
       * <code>optional uint64 chan_id = 2;</code>
       */
      public Builder clearChanId() {
        copyOnWrite();
        instance.clearChanId();
        return this;
      }

      /**
       * <pre>
       *&#47; The base fee of the channel denominated in millisatoshis.
       * </pre>
       *
       * <code>optional uint32 fee_base_msat = 3;</code>
       */
      public int getFeeBaseMsat() {
        return instance.getFeeBaseMsat();
      }
      /**
       * <pre>
       *&#47; The base fee of the channel denominated in millisatoshis.
       * </pre>
       *
       * <code>optional uint32 fee_base_msat = 3;</code>
       */
      public Builder setFeeBaseMsat(int value) {
        copyOnWrite();
        instance.setFeeBaseMsat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The base fee of the channel denominated in millisatoshis.
       * </pre>
       *
       * <code>optional uint32 fee_base_msat = 3;</code>
       */
      public Builder clearFeeBaseMsat() {
        copyOnWrite();
        instance.clearFeeBaseMsat();
        return this;
      }

      /**
       * <pre>
       **
       *The fee rate of the channel for sending one satoshi across it denominated in
       *millionths of a satoshi.
       * </pre>
       *
       * <code>optional uint32 fee_proportional_millionths = 4;</code>
       */
      public int getFeeProportionalMillionths() {
        return instance.getFeeProportionalMillionths();
      }
      /**
       * <pre>
       **
       *The fee rate of the channel for sending one satoshi across it denominated in
       *millionths of a satoshi.
       * </pre>
       *
       * <code>optional uint32 fee_proportional_millionths = 4;</code>
       */
      public Builder setFeeProportionalMillionths(int value) {
        copyOnWrite();
        instance.setFeeProportionalMillionths(value);
        return this;
      }
      /**
       * <pre>
       **
       *The fee rate of the channel for sending one satoshi across it denominated in
       *millionths of a satoshi.
       * </pre>
       *
       * <code>optional uint32 fee_proportional_millionths = 4;</code>
       */
      public Builder clearFeeProportionalMillionths() {
        copyOnWrite();
        instance.clearFeeProportionalMillionths();
        return this;
      }

      /**
       * <pre>
       *&#47; The time-lock delta of the channel.
       * </pre>
       *
       * <code>optional uint32 cltv_expiry_delta = 5;</code>
       */
      public int getCltvExpiryDelta() {
        return instance.getCltvExpiryDelta();
      }
      /**
       * <pre>
       *&#47; The time-lock delta of the channel.
       * </pre>
       *
       * <code>optional uint32 cltv_expiry_delta = 5;</code>
       */
      public Builder setCltvExpiryDelta(int value) {
        copyOnWrite();
        instance.setCltvExpiryDelta(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The time-lock delta of the channel.
       * </pre>
       *
       * <code>optional uint32 cltv_expiry_delta = 5;</code>
       */
      public Builder clearCltvExpiryDelta() {
        copyOnWrite();
        instance.clearCltvExpiryDelta();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.HopHint)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.HopHint();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.HopHint other = (lnrpc.Rpc.HopHint) arg1;
          nodeId_ = visitor.visitString(!nodeId_.isEmpty(), nodeId_,
              !other.nodeId_.isEmpty(), other.nodeId_);
          chanId_ = visitor.visitLong(chanId_ != 0L, chanId_,
              other.chanId_ != 0L, other.chanId_);
          feeBaseMsat_ = visitor.visitInt(feeBaseMsat_ != 0, feeBaseMsat_,
              other.feeBaseMsat_ != 0, other.feeBaseMsat_);
          feeProportionalMillionths_ = visitor.visitInt(feeProportionalMillionths_ != 0, feeProportionalMillionths_,
              other.feeProportionalMillionths_ != 0, other.feeProportionalMillionths_);
          cltvExpiryDelta_ = visitor.visitInt(cltvExpiryDelta_ != 0, cltvExpiryDelta_,
              other.cltvExpiryDelta_ != 0, other.cltvExpiryDelta_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  nodeId_ = s;
                  break;
                }
                case 16: {

                  chanId_ = input.readUInt64();
                  break;
                }
                case 24: {

                  feeBaseMsat_ = input.readUInt32();
                  break;
                }
                case 32: {

                  feeProportionalMillionths_ = input.readUInt32();
                  break;
                }
                case 40: {

                  cltvExpiryDelta_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.HopHint.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.HopHint)
    private static final lnrpc.Rpc.HopHint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new HopHint();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.HopHint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HopHint> PARSER;

    public static com.google.protobuf.Parser<HopHint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface RouteHintOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.RouteHint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    java.util.List<lnrpc.Rpc.HopHint> 
        getHopHintsList();
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    lnrpc.Rpc.HopHint getHopHints(int index);
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    int getHopHintsCount();
  }
  /**
   * Protobuf type {@code lnrpc.RouteHint}
   */
  public  static final class RouteHint extends
      com.google.protobuf.GeneratedMessageLite<
          RouteHint, RouteHint.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.RouteHint)
      RouteHintOrBuilder {
    private RouteHint() {
      hopHints_ = emptyProtobufList();
    }
    public static final int HOP_HINTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.HopHint> hopHints_;
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.HopHint> getHopHintsList() {
      return hopHints_;
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.HopHintOrBuilder> 
        getHopHintsOrBuilderList() {
      return hopHints_;
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    public int getHopHintsCount() {
      return hopHints_.size();
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    public lnrpc.Rpc.HopHint getHopHints(int index) {
      return hopHints_.get(index);
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    public lnrpc.Rpc.HopHintOrBuilder getHopHintsOrBuilder(
        int index) {
      return hopHints_.get(index);
    }
    private void ensureHopHintsIsMutable() {
      if (!hopHints_.isModifiable()) {
        hopHints_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(hopHints_);
       }
    }

    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void setHopHints(
        int index, lnrpc.Rpc.HopHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHopHintsIsMutable();
      hopHints_.set(index, value);
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void setHopHints(
        int index, lnrpc.Rpc.HopHint.Builder builderForValue) {
      ensureHopHintsIsMutable();
      hopHints_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void addHopHints(lnrpc.Rpc.HopHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHopHintsIsMutable();
      hopHints_.add(value);
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void addHopHints(
        int index, lnrpc.Rpc.HopHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureHopHintsIsMutable();
      hopHints_.add(index, value);
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void addHopHints(
        lnrpc.Rpc.HopHint.Builder builderForValue) {
      ensureHopHintsIsMutable();
      hopHints_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void addHopHints(
        int index, lnrpc.Rpc.HopHint.Builder builderForValue) {
      ensureHopHintsIsMutable();
      hopHints_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void addAllHopHints(
        java.lang.Iterable<? extends lnrpc.Rpc.HopHint> values) {
      ensureHopHintsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, hopHints_);
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void clearHopHints() {
      hopHints_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *A list of hop hints that when chained together can assist in reaching a
     *specific destination.
     * </pre>
     *
     * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
     */
    private void removeHopHints(int index) {
      ensureHopHintsIsMutable();
      hopHints_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < hopHints_.size(); i++) {
        output.writeMessage(1, hopHints_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < hopHints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, hopHints_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.RouteHint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.RouteHint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.RouteHint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.RouteHint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.RouteHint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.RouteHint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.RouteHint, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.RouteHint)
        lnrpc.Rpc.RouteHintOrBuilder {
      // Construct using lnrpc.Rpc.RouteHint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.HopHint> getHopHintsList() {
        return java.util.Collections.unmodifiableList(
            instance.getHopHintsList());
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public int getHopHintsCount() {
        return instance.getHopHintsCount();
      }/**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public lnrpc.Rpc.HopHint getHopHints(int index) {
        return instance.getHopHints(index);
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder setHopHints(
          int index, lnrpc.Rpc.HopHint value) {
        copyOnWrite();
        instance.setHopHints(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder setHopHints(
          int index, lnrpc.Rpc.HopHint.Builder builderForValue) {
        copyOnWrite();
        instance.setHopHints(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder addHopHints(lnrpc.Rpc.HopHint value) {
        copyOnWrite();
        instance.addHopHints(value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder addHopHints(
          int index, lnrpc.Rpc.HopHint value) {
        copyOnWrite();
        instance.addHopHints(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder addHopHints(
          lnrpc.Rpc.HopHint.Builder builderForValue) {
        copyOnWrite();
        instance.addHopHints(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder addHopHints(
          int index, lnrpc.Rpc.HopHint.Builder builderForValue) {
        copyOnWrite();
        instance.addHopHints(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder addAllHopHints(
          java.lang.Iterable<? extends lnrpc.Rpc.HopHint> values) {
        copyOnWrite();
        instance.addAllHopHints(values);
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder clearHopHints() {
        copyOnWrite();
        instance.clearHopHints();
        return this;
      }
      /**
       * <pre>
       **
       *A list of hop hints that when chained together can assist in reaching a
       *specific destination.
       * </pre>
       *
       * <code>repeated .lnrpc.HopHint hop_hints = 1;</code>
       */
      public Builder removeHopHints(int index) {
        copyOnWrite();
        instance.removeHopHints(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.RouteHint)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.RouteHint();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          hopHints_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.RouteHint other = (lnrpc.Rpc.RouteHint) arg1;
          hopHints_= visitor.visitList(hopHints_, other.hopHints_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!hopHints_.isModifiable()) {
                    hopHints_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(hopHints_);
                  }
                  hopHints_.add(
                      input.readMessage(lnrpc.Rpc.HopHint.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.RouteHint.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.RouteHint)
    private static final lnrpc.Rpc.RouteHint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new RouteHint();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.RouteHint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<RouteHint> PARSER;

    public static com.google.protobuf.Parser<RouteHint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InvoiceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Invoice)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    java.lang.String getMemo();
    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    com.google.protobuf.ByteString
        getMemoBytes();

    /**
     * <pre>
     ** Deprecated. An optional cryptographic receipt of payment which is not
     *implemented.
     * </pre>
     *
     * <code>optional bytes receipt = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated com.google.protobuf.ByteString getReceipt();

    /**
     * <pre>
     **
     *The hex-encoded preimage (32 byte) which will allow settling an incoming
     *HTLC payable to this preimage
     * </pre>
     *
     * <code>optional bytes r_preimage = 3;</code>
     */
    com.google.protobuf.ByteString getRPreimage();

    /**
     * <pre>
     *&#47; The hash of the preimage
     * </pre>
     *
     * <code>optional bytes r_hash = 4;</code>
     */
    com.google.protobuf.ByteString getRHash();

    /**
     * <pre>
     *&#47; The value of this invoice in satoshis
     * </pre>
     *
     * <code>optional int64 value = 5;</code>
     */
    long getValue();

    /**
     * <pre>
     *&#47; Whether this invoice has been fulfilled
     * </pre>
     *
     * <code>optional bool settled = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean getSettled();

    /**
     * <pre>
     *&#47; When this invoice was created
     * </pre>
     *
     * <code>optional int64 creation_date = 7;</code>
     */
    long getCreationDate();

    /**
     * <pre>
     *&#47; When this invoice was settled
     * </pre>
     *
     * <code>optional int64 settle_date = 8;</code>
     */
    long getSettleDate();

    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    java.lang.String getPaymentRequest();
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    com.google.protobuf.ByteString
        getPaymentRequestBytes();

    /**
     * <pre>
     **
     *Hash (SHA-256) of a description of the payment. Used if the description of
     *payment (memo) is too long to naturally fit within the description field
     *of an encoded payment request.
     * </pre>
     *
     * <code>optional bytes description_hash = 10;</code>
     */
    com.google.protobuf.ByteString getDescriptionHash();

    /**
     * <pre>
     *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
     * </pre>
     *
     * <code>optional int64 expiry = 11;</code>
     */
    long getExpiry();

    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    java.lang.String getFallbackAddr();
    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    com.google.protobuf.ByteString
        getFallbackAddrBytes();

    /**
     * <pre>
     *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
     * </pre>
     *
     * <code>optional uint64 cltv_expiry = 13;</code>
     */
    long getCltvExpiry();

    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    java.util.List<lnrpc.Rpc.RouteHint> 
        getRouteHintsList();
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    lnrpc.Rpc.RouteHint getRouteHints(int index);
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    int getRouteHintsCount();

    /**
     * <pre>
     *&#47; Whether this invoice should include routing hints for private channels.
     * </pre>
     *
     * <code>optional bool private = 15;</code>
     */
    boolean getPrivate();

    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    long getAddIndex();

    /**
     * <pre>
     **
     *The "settle" index of this invoice. Each newly settled invoice will
     *increment this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all
     *settled invoices with an settle_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 settle_index = 17;</code>
     */
    long getSettleIndex();

    /**
     * <pre>
     *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
     * </pre>
     *
     * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated long getAmtPaid();

    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in satoshis. This will ONLY
     *be set if this invoice has been settled. We provide this field as if the
     *invoice was created with a zero value, then we need to record what amount
     *was ultimately accepted. Additionally, it's possible that the sender paid
     *MORE that was specified in the original invoice. So we'll record that here
     *as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_sat = 19;</code>
     */
    long getAmtPaidSat();

    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in millisatoshis. This will
     *ONLY be set if this invoice has been settled. We provide this field as if
     *the invoice was created with a zero value, then we need to record what
     *amount was ultimately accepted. Additionally, it's possible that the sender
     *paid MORE that was specified in the original invoice. So we'll record that
     *here as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_msat = 20;</code>
     */
    long getAmtPaidMsat();

    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    int getStateValue();
    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    lnrpc.Rpc.Invoice.InvoiceState getState();
  }
  /**
   * Protobuf type {@code lnrpc.Invoice}
   */
  public  static final class Invoice extends
      com.google.protobuf.GeneratedMessageLite<
          Invoice, Invoice.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Invoice)
      InvoiceOrBuilder {
    private Invoice() {
      memo_ = "";
      receipt_ = com.google.protobuf.ByteString.EMPTY;
      rPreimage_ = com.google.protobuf.ByteString.EMPTY;
      rHash_ = com.google.protobuf.ByteString.EMPTY;
      paymentRequest_ = "";
      descriptionHash_ = com.google.protobuf.ByteString.EMPTY;
      fallbackAddr_ = "";
      routeHints_ = emptyProtobufList();
    }
    /**
     * Protobuf enum {@code lnrpc.Invoice.InvoiceState}
     */
    public enum InvoiceState
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>OPEN = 0;</code>
       */
      OPEN(0),
      /**
       * <code>SETTLED = 1;</code>
       */
      SETTLED(1),
      /**
       * <code>CANCELED = 2;</code>
       */
      CANCELED(2),
      /**
       * <code>ACCEPTED = 3;</code>
       */
      ACCEPTED(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>OPEN = 0;</code>
       */
      public static final int OPEN_VALUE = 0;
      /**
       * <code>SETTLED = 1;</code>
       */
      public static final int SETTLED_VALUE = 1;
      /**
       * <code>CANCELED = 2;</code>
       */
      public static final int CANCELED_VALUE = 2;
      /**
       * <code>ACCEPTED = 3;</code>
       */
      public static final int ACCEPTED_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InvoiceState valueOf(int value) {
        return forNumber(value);
      }

      public static InvoiceState forNumber(int value) {
        switch (value) {
          case 0: return OPEN;
          case 1: return SETTLED;
          case 2: return CANCELED;
          case 3: return ACCEPTED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InvoiceState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          InvoiceState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InvoiceState>() {
              public InvoiceState findValueByNumber(int number) {
                return InvoiceState.forNumber(number);
              }
            };

      private final int value;

      private InvoiceState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:lnrpc.Invoice.InvoiceState)
    }

    private int bitField0_;
    public static final int MEMO_FIELD_NUMBER = 1;
    private java.lang.String memo_;
    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    public java.lang.String getMemo() {
      return memo_;
    }
    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMemoBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(memo_);
    }
    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    private void setMemo(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      memo_ = value;
    }
    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    private void clearMemo() {
      
      memo_ = getDefaultInstance().getMemo();
    }
    /**
     * <pre>
     **
     *An optional memo to attach along with the invoice. Used for record keeping
     *purposes for the invoice's creator, and will also be set in the description
     *field of the encoded payment request if the description_hash field is not
     *being used.
     * </pre>
     *
     * <code>optional string memo = 1;</code>
     */
    private void setMemoBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      memo_ = value.toStringUtf8();
    }

    public static final int RECEIPT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString receipt_;
    /**
     * <pre>
     ** Deprecated. An optional cryptographic receipt of payment which is not
     *implemented.
     * </pre>
     *
     * <code>optional bytes receipt = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString getReceipt() {
      return receipt_;
    }
    /**
     * <pre>
     ** Deprecated. An optional cryptographic receipt of payment which is not
     *implemented.
     * </pre>
     *
     * <code>optional bytes receipt = 2 [deprecated = true];</code>
     */
    private void setReceipt(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      receipt_ = value;
    }
    /**
     * <pre>
     ** Deprecated. An optional cryptographic receipt of payment which is not
     *implemented.
     * </pre>
     *
     * <code>optional bytes receipt = 2 [deprecated = true];</code>
     */
    private void clearReceipt() {
      
      receipt_ = getDefaultInstance().getReceipt();
    }

    public static final int R_PREIMAGE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString rPreimage_;
    /**
     * <pre>
     **
     *The hex-encoded preimage (32 byte) which will allow settling an incoming
     *HTLC payable to this preimage
     * </pre>
     *
     * <code>optional bytes r_preimage = 3;</code>
     */
    public com.google.protobuf.ByteString getRPreimage() {
      return rPreimage_;
    }
    /**
     * <pre>
     **
     *The hex-encoded preimage (32 byte) which will allow settling an incoming
     *HTLC payable to this preimage
     * </pre>
     *
     * <code>optional bytes r_preimage = 3;</code>
     */
    private void setRPreimage(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rPreimage_ = value;
    }
    /**
     * <pre>
     **
     *The hex-encoded preimage (32 byte) which will allow settling an incoming
     *HTLC payable to this preimage
     * </pre>
     *
     * <code>optional bytes r_preimage = 3;</code>
     */
    private void clearRPreimage() {
      
      rPreimage_ = getDefaultInstance().getRPreimage();
    }

    public static final int R_HASH_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString rHash_;
    /**
     * <pre>
     *&#47; The hash of the preimage
     * </pre>
     *
     * <code>optional bytes r_hash = 4;</code>
     */
    public com.google.protobuf.ByteString getRHash() {
      return rHash_;
    }
    /**
     * <pre>
     *&#47; The hash of the preimage
     * </pre>
     *
     * <code>optional bytes r_hash = 4;</code>
     */
    private void setRHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rHash_ = value;
    }
    /**
     * <pre>
     *&#47; The hash of the preimage
     * </pre>
     *
     * <code>optional bytes r_hash = 4;</code>
     */
    private void clearRHash() {
      
      rHash_ = getDefaultInstance().getRHash();
    }

    public static final int VALUE_FIELD_NUMBER = 5;
    private long value_;
    /**
     * <pre>
     *&#47; The value of this invoice in satoshis
     * </pre>
     *
     * <code>optional int64 value = 5;</code>
     */
    public long getValue() {
      return value_;
    }
    /**
     * <pre>
     *&#47; The value of this invoice in satoshis
     * </pre>
     *
     * <code>optional int64 value = 5;</code>
     */
    private void setValue(long value) {
      
      value_ = value;
    }
    /**
     * <pre>
     *&#47; The value of this invoice in satoshis
     * </pre>
     *
     * <code>optional int64 value = 5;</code>
     */
    private void clearValue() {
      
      value_ = 0L;
    }

    public static final int SETTLED_FIELD_NUMBER = 6;
    private boolean settled_;
    /**
     * <pre>
     *&#47; Whether this invoice has been fulfilled
     * </pre>
     *
     * <code>optional bool settled = 6 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getSettled() {
      return settled_;
    }
    /**
     * <pre>
     *&#47; Whether this invoice has been fulfilled
     * </pre>
     *
     * <code>optional bool settled = 6 [deprecated = true];</code>
     */
    private void setSettled(boolean value) {
      
      settled_ = value;
    }
    /**
     * <pre>
     *&#47; Whether this invoice has been fulfilled
     * </pre>
     *
     * <code>optional bool settled = 6 [deprecated = true];</code>
     */
    private void clearSettled() {
      
      settled_ = false;
    }

    public static final int CREATION_DATE_FIELD_NUMBER = 7;
    private long creationDate_;
    /**
     * <pre>
     *&#47; When this invoice was created
     * </pre>
     *
     * <code>optional int64 creation_date = 7;</code>
     */
    public long getCreationDate() {
      return creationDate_;
    }
    /**
     * <pre>
     *&#47; When this invoice was created
     * </pre>
     *
     * <code>optional int64 creation_date = 7;</code>
     */
    private void setCreationDate(long value) {
      
      creationDate_ = value;
    }
    /**
     * <pre>
     *&#47; When this invoice was created
     * </pre>
     *
     * <code>optional int64 creation_date = 7;</code>
     */
    private void clearCreationDate() {
      
      creationDate_ = 0L;
    }

    public static final int SETTLE_DATE_FIELD_NUMBER = 8;
    private long settleDate_;
    /**
     * <pre>
     *&#47; When this invoice was settled
     * </pre>
     *
     * <code>optional int64 settle_date = 8;</code>
     */
    public long getSettleDate() {
      return settleDate_;
    }
    /**
     * <pre>
     *&#47; When this invoice was settled
     * </pre>
     *
     * <code>optional int64 settle_date = 8;</code>
     */
    private void setSettleDate(long value) {
      
      settleDate_ = value;
    }
    /**
     * <pre>
     *&#47; When this invoice was settled
     * </pre>
     *
     * <code>optional int64 settle_date = 8;</code>
     */
    private void clearSettleDate() {
      
      settleDate_ = 0L;
    }

    public static final int PAYMENT_REQUEST_FIELD_NUMBER = 9;
    private java.lang.String paymentRequest_;
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    public java.lang.String getPaymentRequest() {
      return paymentRequest_;
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentRequestBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentRequest_);
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    private void setPaymentRequest(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentRequest_ = value;
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    private void clearPaymentRequest() {
      
      paymentRequest_ = getDefaultInstance().getPaymentRequest();
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 9;</code>
     */
    private void setPaymentRequestBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentRequest_ = value.toStringUtf8();
    }

    public static final int DESCRIPTION_HASH_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString descriptionHash_;
    /**
     * <pre>
     **
     *Hash (SHA-256) of a description of the payment. Used if the description of
     *payment (memo) is too long to naturally fit within the description field
     *of an encoded payment request.
     * </pre>
     *
     * <code>optional bytes description_hash = 10;</code>
     */
    public com.google.protobuf.ByteString getDescriptionHash() {
      return descriptionHash_;
    }
    /**
     * <pre>
     **
     *Hash (SHA-256) of a description of the payment. Used if the description of
     *payment (memo) is too long to naturally fit within the description field
     *of an encoded payment request.
     * </pre>
     *
     * <code>optional bytes description_hash = 10;</code>
     */
    private void setDescriptionHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      descriptionHash_ = value;
    }
    /**
     * <pre>
     **
     *Hash (SHA-256) of a description of the payment. Used if the description of
     *payment (memo) is too long to naturally fit within the description field
     *of an encoded payment request.
     * </pre>
     *
     * <code>optional bytes description_hash = 10;</code>
     */
    private void clearDescriptionHash() {
      
      descriptionHash_ = getDefaultInstance().getDescriptionHash();
    }

    public static final int EXPIRY_FIELD_NUMBER = 11;
    private long expiry_;
    /**
     * <pre>
     *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
     * </pre>
     *
     * <code>optional int64 expiry = 11;</code>
     */
    public long getExpiry() {
      return expiry_;
    }
    /**
     * <pre>
     *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
     * </pre>
     *
     * <code>optional int64 expiry = 11;</code>
     */
    private void setExpiry(long value) {
      
      expiry_ = value;
    }
    /**
     * <pre>
     *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
     * </pre>
     *
     * <code>optional int64 expiry = 11;</code>
     */
    private void clearExpiry() {
      
      expiry_ = 0L;
    }

    public static final int FALLBACK_ADDR_FIELD_NUMBER = 12;
    private java.lang.String fallbackAddr_;
    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    public java.lang.String getFallbackAddr() {
      return fallbackAddr_;
    }
    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    public com.google.protobuf.ByteString
        getFallbackAddrBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(fallbackAddr_);
    }
    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    private void setFallbackAddr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fallbackAddr_ = value;
    }
    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    private void clearFallbackAddr() {
      
      fallbackAddr_ = getDefaultInstance().getFallbackAddr();
    }
    /**
     * <pre>
     *&#47; Fallback on-chain address.
     * </pre>
     *
     * <code>optional string fallback_addr = 12;</code>
     */
    private void setFallbackAddrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      fallbackAddr_ = value.toStringUtf8();
    }

    public static final int CLTV_EXPIRY_FIELD_NUMBER = 13;
    private long cltvExpiry_;
    /**
     * <pre>
     *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
     * </pre>
     *
     * <code>optional uint64 cltv_expiry = 13;</code>
     */
    public long getCltvExpiry() {
      return cltvExpiry_;
    }
    /**
     * <pre>
     *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
     * </pre>
     *
     * <code>optional uint64 cltv_expiry = 13;</code>
     */
    private void setCltvExpiry(long value) {
      
      cltvExpiry_ = value;
    }
    /**
     * <pre>
     *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
     * </pre>
     *
     * <code>optional uint64 cltv_expiry = 13;</code>
     */
    private void clearCltvExpiry() {
      
      cltvExpiry_ = 0L;
    }

    public static final int ROUTE_HINTS_FIELD_NUMBER = 14;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.RouteHint> routeHints_;
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    public java.util.List<lnrpc.Rpc.RouteHint> getRouteHintsList() {
      return routeHints_;
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.RouteHintOrBuilder> 
        getRouteHintsOrBuilderList() {
      return routeHints_;
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    public int getRouteHintsCount() {
      return routeHints_.size();
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    public lnrpc.Rpc.RouteHint getRouteHints(int index) {
      return routeHints_.get(index);
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    public lnrpc.Rpc.RouteHintOrBuilder getRouteHintsOrBuilder(
        int index) {
      return routeHints_.get(index);
    }
    private void ensureRouteHintsIsMutable() {
      if (!routeHints_.isModifiable()) {
        routeHints_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(routeHints_);
       }
    }

    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void setRouteHints(
        int index, lnrpc.Rpc.RouteHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRouteHintsIsMutable();
      routeHints_.set(index, value);
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void setRouteHints(
        int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
      ensureRouteHintsIsMutable();
      routeHints_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void addRouteHints(lnrpc.Rpc.RouteHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRouteHintsIsMutable();
      routeHints_.add(value);
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void addRouteHints(
        int index, lnrpc.Rpc.RouteHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRouteHintsIsMutable();
      routeHints_.add(index, value);
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void addRouteHints(
        lnrpc.Rpc.RouteHint.Builder builderForValue) {
      ensureRouteHintsIsMutable();
      routeHints_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void addRouteHints(
        int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
      ensureRouteHintsIsMutable();
      routeHints_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void addAllRouteHints(
        java.lang.Iterable<? extends lnrpc.Rpc.RouteHint> values) {
      ensureRouteHintsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, routeHints_);
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void clearRouteHints() {
      routeHints_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *Route hints that can each be individually used to assist in reaching the
     *invoice's destination.
     * </pre>
     *
     * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
     */
    private void removeRouteHints(int index) {
      ensureRouteHintsIsMutable();
      routeHints_.remove(index);
    }

    public static final int PRIVATE_FIELD_NUMBER = 15;
    private boolean private_;
    /**
     * <pre>
     *&#47; Whether this invoice should include routing hints for private channels.
     * </pre>
     *
     * <code>optional bool private = 15;</code>
     */
    public boolean getPrivate() {
      return private_;
    }
    /**
     * <pre>
     *&#47; Whether this invoice should include routing hints for private channels.
     * </pre>
     *
     * <code>optional bool private = 15;</code>
     */
    private void setPrivate(boolean value) {
      
      private_ = value;
    }
    /**
     * <pre>
     *&#47; Whether this invoice should include routing hints for private channels.
     * </pre>
     *
     * <code>optional bool private = 15;</code>
     */
    private void clearPrivate() {
      
      private_ = false;
    }

    public static final int ADD_INDEX_FIELD_NUMBER = 16;
    private long addIndex_;
    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    public long getAddIndex() {
      return addIndex_;
    }
    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    private void setAddIndex(long value) {
      
      addIndex_ = value;
    }
    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    private void clearAddIndex() {
      
      addIndex_ = 0L;
    }

    public static final int SETTLE_INDEX_FIELD_NUMBER = 17;
    private long settleIndex_;
    /**
     * <pre>
     **
     *The "settle" index of this invoice. Each newly settled invoice will
     *increment this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all
     *settled invoices with an settle_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 settle_index = 17;</code>
     */
    public long getSettleIndex() {
      return settleIndex_;
    }
    /**
     * <pre>
     **
     *The "settle" index of this invoice. Each newly settled invoice will
     *increment this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all
     *settled invoices with an settle_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 settle_index = 17;</code>
     */
    private void setSettleIndex(long value) {
      
      settleIndex_ = value;
    }
    /**
     * <pre>
     **
     *The "settle" index of this invoice. Each newly settled invoice will
     *increment this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all
     *settled invoices with an settle_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 settle_index = 17;</code>
     */
    private void clearSettleIndex() {
      
      settleIndex_ = 0L;
    }

    public static final int AMT_PAID_FIELD_NUMBER = 18;
    private long amtPaid_;
    /**
     * <pre>
     *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
     * </pre>
     *
     * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getAmtPaid() {
      return amtPaid_;
    }
    /**
     * <pre>
     *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
     * </pre>
     *
     * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
     */
    private void setAmtPaid(long value) {
      
      amtPaid_ = value;
    }
    /**
     * <pre>
     *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
     * </pre>
     *
     * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
     */
    private void clearAmtPaid() {
      
      amtPaid_ = 0L;
    }

    public static final int AMT_PAID_SAT_FIELD_NUMBER = 19;
    private long amtPaidSat_;
    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in satoshis. This will ONLY
     *be set if this invoice has been settled. We provide this field as if the
     *invoice was created with a zero value, then we need to record what amount
     *was ultimately accepted. Additionally, it's possible that the sender paid
     *MORE that was specified in the original invoice. So we'll record that here
     *as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_sat = 19;</code>
     */
    public long getAmtPaidSat() {
      return amtPaidSat_;
    }
    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in satoshis. This will ONLY
     *be set if this invoice has been settled. We provide this field as if the
     *invoice was created with a zero value, then we need to record what amount
     *was ultimately accepted. Additionally, it's possible that the sender paid
     *MORE that was specified in the original invoice. So we'll record that here
     *as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_sat = 19;</code>
     */
    private void setAmtPaidSat(long value) {
      
      amtPaidSat_ = value;
    }
    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in satoshis. This will ONLY
     *be set if this invoice has been settled. We provide this field as if the
     *invoice was created with a zero value, then we need to record what amount
     *was ultimately accepted. Additionally, it's possible that the sender paid
     *MORE that was specified in the original invoice. So we'll record that here
     *as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_sat = 19;</code>
     */
    private void clearAmtPaidSat() {
      
      amtPaidSat_ = 0L;
    }

    public static final int AMT_PAID_MSAT_FIELD_NUMBER = 20;
    private long amtPaidMsat_;
    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in millisatoshis. This will
     *ONLY be set if this invoice has been settled. We provide this field as if
     *the invoice was created with a zero value, then we need to record what
     *amount was ultimately accepted. Additionally, it's possible that the sender
     *paid MORE that was specified in the original invoice. So we'll record that
     *here as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_msat = 20;</code>
     */
    public long getAmtPaidMsat() {
      return amtPaidMsat_;
    }
    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in millisatoshis. This will
     *ONLY be set if this invoice has been settled. We provide this field as if
     *the invoice was created with a zero value, then we need to record what
     *amount was ultimately accepted. Additionally, it's possible that the sender
     *paid MORE that was specified in the original invoice. So we'll record that
     *here as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_msat = 20;</code>
     */
    private void setAmtPaidMsat(long value) {
      
      amtPaidMsat_ = value;
    }
    /**
     * <pre>
     **
     *The amount that was accepted for this invoice, in millisatoshis. This will
     *ONLY be set if this invoice has been settled. We provide this field as if
     *the invoice was created with a zero value, then we need to record what
     *amount was ultimately accepted. Additionally, it's possible that the sender
     *paid MORE that was specified in the original invoice. So we'll record that
     *here as well.
     * </pre>
     *
     * <code>optional int64 amt_paid_msat = 20;</code>
     */
    private void clearAmtPaidMsat() {
      
      amtPaidMsat_ = 0L;
    }

    public static final int STATE_FIELD_NUMBER = 21;
    private int state_;
    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    public int getStateValue() {
      return state_;
    }
    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    public lnrpc.Rpc.Invoice.InvoiceState getState() {
      lnrpc.Rpc.Invoice.InvoiceState result = lnrpc.Rpc.Invoice.InvoiceState.forNumber(state_);
      return result == null ? lnrpc.Rpc.Invoice.InvoiceState.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    private void setStateValue(int value) {
        state_ = value;
    }
    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    private void setState(lnrpc.Rpc.Invoice.InvoiceState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      state_ = value.getNumber();
    }
    /**
     * <pre>
     **
     *The state the invoice is in.
     * </pre>
     *
     * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
     */
    private void clearState() {
      
      state_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!memo_.isEmpty()) {
        output.writeString(1, getMemo());
      }
      if (!receipt_.isEmpty()) {
        output.writeBytes(2, receipt_);
      }
      if (!rPreimage_.isEmpty()) {
        output.writeBytes(3, rPreimage_);
      }
      if (!rHash_.isEmpty()) {
        output.writeBytes(4, rHash_);
      }
      if (value_ != 0L) {
        output.writeInt64(5, value_);
      }
      if (settled_ != false) {
        output.writeBool(6, settled_);
      }
      if (creationDate_ != 0L) {
        output.writeInt64(7, creationDate_);
      }
      if (settleDate_ != 0L) {
        output.writeInt64(8, settleDate_);
      }
      if (!paymentRequest_.isEmpty()) {
        output.writeString(9, getPaymentRequest());
      }
      if (!descriptionHash_.isEmpty()) {
        output.writeBytes(10, descriptionHash_);
      }
      if (expiry_ != 0L) {
        output.writeInt64(11, expiry_);
      }
      if (!fallbackAddr_.isEmpty()) {
        output.writeString(12, getFallbackAddr());
      }
      if (cltvExpiry_ != 0L) {
        output.writeUInt64(13, cltvExpiry_);
      }
      for (int i = 0; i < routeHints_.size(); i++) {
        output.writeMessage(14, routeHints_.get(i));
      }
      if (private_ != false) {
        output.writeBool(15, private_);
      }
      if (addIndex_ != 0L) {
        output.writeUInt64(16, addIndex_);
      }
      if (settleIndex_ != 0L) {
        output.writeUInt64(17, settleIndex_);
      }
      if (amtPaid_ != 0L) {
        output.writeInt64(18, amtPaid_);
      }
      if (amtPaidSat_ != 0L) {
        output.writeInt64(19, amtPaidSat_);
      }
      if (amtPaidMsat_ != 0L) {
        output.writeInt64(20, amtPaidMsat_);
      }
      if (state_ != lnrpc.Rpc.Invoice.InvoiceState.OPEN.getNumber()) {
        output.writeEnum(21, state_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!memo_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getMemo());
      }
      if (!receipt_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, receipt_);
      }
      if (!rPreimage_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, rPreimage_);
      }
      if (!rHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, rHash_);
      }
      if (value_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, value_);
      }
      if (settled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, settled_);
      }
      if (creationDate_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, creationDate_);
      }
      if (settleDate_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, settleDate_);
      }
      if (!paymentRequest_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(9, getPaymentRequest());
      }
      if (!descriptionHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, descriptionHash_);
      }
      if (expiry_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, expiry_);
      }
      if (!fallbackAddr_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(12, getFallbackAddr());
      }
      if (cltvExpiry_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(13, cltvExpiry_);
      }
      for (int i = 0; i < routeHints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, routeHints_.get(i));
      }
      if (private_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, private_);
      }
      if (addIndex_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(16, addIndex_);
      }
      if (settleIndex_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(17, settleIndex_);
      }
      if (amtPaid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(18, amtPaid_);
      }
      if (amtPaidSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(19, amtPaidSat_);
      }
      if (amtPaidMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(20, amtPaidMsat_);
      }
      if (state_ != lnrpc.Rpc.Invoice.InvoiceState.OPEN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21, state_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Invoice parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Invoice parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Invoice parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Invoice parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Invoice parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Invoice parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Invoice parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Invoice parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Invoice parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Invoice parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Invoice prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Invoice}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Invoice, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Invoice)
        lnrpc.Rpc.InvoiceOrBuilder {
      // Construct using lnrpc.Rpc.Invoice.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *An optional memo to attach along with the invoice. Used for record keeping
       *purposes for the invoice's creator, and will also be set in the description
       *field of the encoded payment request if the description_hash field is not
       *being used.
       * </pre>
       *
       * <code>optional string memo = 1;</code>
       */
      public java.lang.String getMemo() {
        return instance.getMemo();
      }
      /**
       * <pre>
       **
       *An optional memo to attach along with the invoice. Used for record keeping
       *purposes for the invoice's creator, and will also be set in the description
       *field of the encoded payment request if the description_hash field is not
       *being used.
       * </pre>
       *
       * <code>optional string memo = 1;</code>
       */
      public com.google.protobuf.ByteString
          getMemoBytes() {
        return instance.getMemoBytes();
      }
      /**
       * <pre>
       **
       *An optional memo to attach along with the invoice. Used for record keeping
       *purposes for the invoice's creator, and will also be set in the description
       *field of the encoded payment request if the description_hash field is not
       *being used.
       * </pre>
       *
       * <code>optional string memo = 1;</code>
       */
      public Builder setMemo(
          java.lang.String value) {
        copyOnWrite();
        instance.setMemo(value);
        return this;
      }
      /**
       * <pre>
       **
       *An optional memo to attach along with the invoice. Used for record keeping
       *purposes for the invoice's creator, and will also be set in the description
       *field of the encoded payment request if the description_hash field is not
       *being used.
       * </pre>
       *
       * <code>optional string memo = 1;</code>
       */
      public Builder clearMemo() {
        copyOnWrite();
        instance.clearMemo();
        return this;
      }
      /**
       * <pre>
       **
       *An optional memo to attach along with the invoice. Used for record keeping
       *purposes for the invoice's creator, and will also be set in the description
       *field of the encoded payment request if the description_hash field is not
       *being used.
       * </pre>
       *
       * <code>optional string memo = 1;</code>
       */
      public Builder setMemoBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMemoBytes(value);
        return this;
      }

      /**
       * <pre>
       ** Deprecated. An optional cryptographic receipt of payment which is not
       *implemented.
       * </pre>
       *
       * <code>optional bytes receipt = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public com.google.protobuf.ByteString getReceipt() {
        return instance.getReceipt();
      }
      /**
       * <pre>
       ** Deprecated. An optional cryptographic receipt of payment which is not
       *implemented.
       * </pre>
       *
       * <code>optional bytes receipt = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setReceipt(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setReceipt(value);
        return this;
      }
      /**
       * <pre>
       ** Deprecated. An optional cryptographic receipt of payment which is not
       *implemented.
       * </pre>
       *
       * <code>optional bytes receipt = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearReceipt() {
        copyOnWrite();
        instance.clearReceipt();
        return this;
      }

      /**
       * <pre>
       **
       *The hex-encoded preimage (32 byte) which will allow settling an incoming
       *HTLC payable to this preimage
       * </pre>
       *
       * <code>optional bytes r_preimage = 3;</code>
       */
      public com.google.protobuf.ByteString getRPreimage() {
        return instance.getRPreimage();
      }
      /**
       * <pre>
       **
       *The hex-encoded preimage (32 byte) which will allow settling an incoming
       *HTLC payable to this preimage
       * </pre>
       *
       * <code>optional bytes r_preimage = 3;</code>
       */
      public Builder setRPreimage(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRPreimage(value);
        return this;
      }
      /**
       * <pre>
       **
       *The hex-encoded preimage (32 byte) which will allow settling an incoming
       *HTLC payable to this preimage
       * </pre>
       *
       * <code>optional bytes r_preimage = 3;</code>
       */
      public Builder clearRPreimage() {
        copyOnWrite();
        instance.clearRPreimage();
        return this;
      }

      /**
       * <pre>
       *&#47; The hash of the preimage
       * </pre>
       *
       * <code>optional bytes r_hash = 4;</code>
       */
      public com.google.protobuf.ByteString getRHash() {
        return instance.getRHash();
      }
      /**
       * <pre>
       *&#47; The hash of the preimage
       * </pre>
       *
       * <code>optional bytes r_hash = 4;</code>
       */
      public Builder setRHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The hash of the preimage
       * </pre>
       *
       * <code>optional bytes r_hash = 4;</code>
       */
      public Builder clearRHash() {
        copyOnWrite();
        instance.clearRHash();
        return this;
      }

      /**
       * <pre>
       *&#47; The value of this invoice in satoshis
       * </pre>
       *
       * <code>optional int64 value = 5;</code>
       */
      public long getValue() {
        return instance.getValue();
      }
      /**
       * <pre>
       *&#47; The value of this invoice in satoshis
       * </pre>
       *
       * <code>optional int64 value = 5;</code>
       */
      public Builder setValue(long value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The value of this invoice in satoshis
       * </pre>
       *
       * <code>optional int64 value = 5;</code>
       */
      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }

      /**
       * <pre>
       *&#47; Whether this invoice has been fulfilled
       * </pre>
       *
       * <code>optional bool settled = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean getSettled() {
        return instance.getSettled();
      }
      /**
       * <pre>
       *&#47; Whether this invoice has been fulfilled
       * </pre>
       *
       * <code>optional bool settled = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setSettled(boolean value) {
        copyOnWrite();
        instance.setSettled(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether this invoice has been fulfilled
       * </pre>
       *
       * <code>optional bool settled = 6 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearSettled() {
        copyOnWrite();
        instance.clearSettled();
        return this;
      }

      /**
       * <pre>
       *&#47; When this invoice was created
       * </pre>
       *
       * <code>optional int64 creation_date = 7;</code>
       */
      public long getCreationDate() {
        return instance.getCreationDate();
      }
      /**
       * <pre>
       *&#47; When this invoice was created
       * </pre>
       *
       * <code>optional int64 creation_date = 7;</code>
       */
      public Builder setCreationDate(long value) {
        copyOnWrite();
        instance.setCreationDate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; When this invoice was created
       * </pre>
       *
       * <code>optional int64 creation_date = 7;</code>
       */
      public Builder clearCreationDate() {
        copyOnWrite();
        instance.clearCreationDate();
        return this;
      }

      /**
       * <pre>
       *&#47; When this invoice was settled
       * </pre>
       *
       * <code>optional int64 settle_date = 8;</code>
       */
      public long getSettleDate() {
        return instance.getSettleDate();
      }
      /**
       * <pre>
       *&#47; When this invoice was settled
       * </pre>
       *
       * <code>optional int64 settle_date = 8;</code>
       */
      public Builder setSettleDate(long value) {
        copyOnWrite();
        instance.setSettleDate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; When this invoice was settled
       * </pre>
       *
       * <code>optional int64 settle_date = 8;</code>
       */
      public Builder clearSettleDate() {
        copyOnWrite();
        instance.clearSettleDate();
        return this;
      }

      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 9;</code>
       */
      public java.lang.String getPaymentRequest() {
        return instance.getPaymentRequest();
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 9;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentRequestBytes() {
        return instance.getPaymentRequestBytes();
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 9;</code>
       */
      public Builder setPaymentRequest(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentRequest(value);
        return this;
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 9;</code>
       */
      public Builder clearPaymentRequest() {
        copyOnWrite();
        instance.clearPaymentRequest();
        return this;
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 9;</code>
       */
      public Builder setPaymentRequestBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentRequestBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *Hash (SHA-256) of a description of the payment. Used if the description of
       *payment (memo) is too long to naturally fit within the description field
       *of an encoded payment request.
       * </pre>
       *
       * <code>optional bytes description_hash = 10;</code>
       */
      public com.google.protobuf.ByteString getDescriptionHash() {
        return instance.getDescriptionHash();
      }
      /**
       * <pre>
       **
       *Hash (SHA-256) of a description of the payment. Used if the description of
       *payment (memo) is too long to naturally fit within the description field
       *of an encoded payment request.
       * </pre>
       *
       * <code>optional bytes description_hash = 10;</code>
       */
      public Builder setDescriptionHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionHash(value);
        return this;
      }
      /**
       * <pre>
       **
       *Hash (SHA-256) of a description of the payment. Used if the description of
       *payment (memo) is too long to naturally fit within the description field
       *of an encoded payment request.
       * </pre>
       *
       * <code>optional bytes description_hash = 10;</code>
       */
      public Builder clearDescriptionHash() {
        copyOnWrite();
        instance.clearDescriptionHash();
        return this;
      }

      /**
       * <pre>
       *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
       * </pre>
       *
       * <code>optional int64 expiry = 11;</code>
       */
      public long getExpiry() {
        return instance.getExpiry();
      }
      /**
       * <pre>
       *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
       * </pre>
       *
       * <code>optional int64 expiry = 11;</code>
       */
      public Builder setExpiry(long value) {
        copyOnWrite();
        instance.setExpiry(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Payment request expiry time in seconds. Default is 3600 (1 hour).
       * </pre>
       *
       * <code>optional int64 expiry = 11;</code>
       */
      public Builder clearExpiry() {
        copyOnWrite();
        instance.clearExpiry();
        return this;
      }

      /**
       * <pre>
       *&#47; Fallback on-chain address.
       * </pre>
       *
       * <code>optional string fallback_addr = 12;</code>
       */
      public java.lang.String getFallbackAddr() {
        return instance.getFallbackAddr();
      }
      /**
       * <pre>
       *&#47; Fallback on-chain address.
       * </pre>
       *
       * <code>optional string fallback_addr = 12;</code>
       */
      public com.google.protobuf.ByteString
          getFallbackAddrBytes() {
        return instance.getFallbackAddrBytes();
      }
      /**
       * <pre>
       *&#47; Fallback on-chain address.
       * </pre>
       *
       * <code>optional string fallback_addr = 12;</code>
       */
      public Builder setFallbackAddr(
          java.lang.String value) {
        copyOnWrite();
        instance.setFallbackAddr(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Fallback on-chain address.
       * </pre>
       *
       * <code>optional string fallback_addr = 12;</code>
       */
      public Builder clearFallbackAddr() {
        copyOnWrite();
        instance.clearFallbackAddr();
        return this;
      }
      /**
       * <pre>
       *&#47; Fallback on-chain address.
       * </pre>
       *
       * <code>optional string fallback_addr = 12;</code>
       */
      public Builder setFallbackAddrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFallbackAddrBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
       * </pre>
       *
       * <code>optional uint64 cltv_expiry = 13;</code>
       */
      public long getCltvExpiry() {
        return instance.getCltvExpiry();
      }
      /**
       * <pre>
       *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
       * </pre>
       *
       * <code>optional uint64 cltv_expiry = 13;</code>
       */
      public Builder setCltvExpiry(long value) {
        copyOnWrite();
        instance.setCltvExpiry(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Delta to use for the time-lock of the CLTV extended to the final hop.
       * </pre>
       *
       * <code>optional uint64 cltv_expiry = 13;</code>
       */
      public Builder clearCltvExpiry() {
        copyOnWrite();
        instance.clearCltvExpiry();
        return this;
      }

      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public java.util.List<lnrpc.Rpc.RouteHint> getRouteHintsList() {
        return java.util.Collections.unmodifiableList(
            instance.getRouteHintsList());
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public int getRouteHintsCount() {
        return instance.getRouteHintsCount();
      }/**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public lnrpc.Rpc.RouteHint getRouteHints(int index) {
        return instance.getRouteHints(index);
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder setRouteHints(
          int index, lnrpc.Rpc.RouteHint value) {
        copyOnWrite();
        instance.setRouteHints(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder setRouteHints(
          int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
        copyOnWrite();
        instance.setRouteHints(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder addRouteHints(lnrpc.Rpc.RouteHint value) {
        copyOnWrite();
        instance.addRouteHints(value);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder addRouteHints(
          int index, lnrpc.Rpc.RouteHint value) {
        copyOnWrite();
        instance.addRouteHints(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder addRouteHints(
          lnrpc.Rpc.RouteHint.Builder builderForValue) {
        copyOnWrite();
        instance.addRouteHints(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder addRouteHints(
          int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
        copyOnWrite();
        instance.addRouteHints(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder addAllRouteHints(
          java.lang.Iterable<? extends lnrpc.Rpc.RouteHint> values) {
        copyOnWrite();
        instance.addAllRouteHints(values);
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder clearRouteHints() {
        copyOnWrite();
        instance.clearRouteHints();
        return this;
      }
      /**
       * <pre>
       **
       *Route hints that can each be individually used to assist in reaching the
       *invoice's destination.
       * </pre>
       *
       * <code>repeated .lnrpc.RouteHint route_hints = 14;</code>
       */
      public Builder removeRouteHints(int index) {
        copyOnWrite();
        instance.removeRouteHints(index);
        return this;
      }

      /**
       * <pre>
       *&#47; Whether this invoice should include routing hints for private channels.
       * </pre>
       *
       * <code>optional bool private = 15;</code>
       */
      public boolean getPrivate() {
        return instance.getPrivate();
      }
      /**
       * <pre>
       *&#47; Whether this invoice should include routing hints for private channels.
       * </pre>
       *
       * <code>optional bool private = 15;</code>
       */
      public Builder setPrivate(boolean value) {
        copyOnWrite();
        instance.setPrivate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Whether this invoice should include routing hints for private channels.
       * </pre>
       *
       * <code>optional bool private = 15;</code>
       */
      public Builder clearPrivate() {
        copyOnWrite();
        instance.clearPrivate();
        return this;
      }

      /**
       * <pre>
       **
       *The "add" index of this invoice. Each newly created invoice will increment
       *this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all added
       *invoices with an add_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 add_index = 16;</code>
       */
      public long getAddIndex() {
        return instance.getAddIndex();
      }
      /**
       * <pre>
       **
       *The "add" index of this invoice. Each newly created invoice will increment
       *this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all added
       *invoices with an add_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 add_index = 16;</code>
       */
      public Builder setAddIndex(long value) {
        copyOnWrite();
        instance.setAddIndex(value);
        return this;
      }
      /**
       * <pre>
       **
       *The "add" index of this invoice. Each newly created invoice will increment
       *this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all added
       *invoices with an add_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 add_index = 16;</code>
       */
      public Builder clearAddIndex() {
        copyOnWrite();
        instance.clearAddIndex();
        return this;
      }

      /**
       * <pre>
       **
       *The "settle" index of this invoice. Each newly settled invoice will
       *increment this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all
       *settled invoices with an settle_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 settle_index = 17;</code>
       */
      public long getSettleIndex() {
        return instance.getSettleIndex();
      }
      /**
       * <pre>
       **
       *The "settle" index of this invoice. Each newly settled invoice will
       *increment this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all
       *settled invoices with an settle_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 settle_index = 17;</code>
       */
      public Builder setSettleIndex(long value) {
        copyOnWrite();
        instance.setSettleIndex(value);
        return this;
      }
      /**
       * <pre>
       **
       *The "settle" index of this invoice. Each newly settled invoice will
       *increment this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all
       *settled invoices with an settle_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 settle_index = 17;</code>
       */
      public Builder clearSettleIndex() {
        copyOnWrite();
        instance.clearSettleIndex();
        return this;
      }

      /**
       * <pre>
       *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
       * </pre>
       *
       * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public long getAmtPaid() {
        return instance.getAmtPaid();
      }
      /**
       * <pre>
       *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
       * </pre>
       *
       * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setAmtPaid(long value) {
        copyOnWrite();
        instance.setAmtPaid(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Deprecated, use amt_paid_sat or amt_paid_msat.
       * </pre>
       *
       * <code>optional int64 amt_paid = 18 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearAmtPaid() {
        copyOnWrite();
        instance.clearAmtPaid();
        return this;
      }

      /**
       * <pre>
       **
       *The amount that was accepted for this invoice, in satoshis. This will ONLY
       *be set if this invoice has been settled. We provide this field as if the
       *invoice was created with a zero value, then we need to record what amount
       *was ultimately accepted. Additionally, it's possible that the sender paid
       *MORE that was specified in the original invoice. So we'll record that here
       *as well.
       * </pre>
       *
       * <code>optional int64 amt_paid_sat = 19;</code>
       */
      public long getAmtPaidSat() {
        return instance.getAmtPaidSat();
      }
      /**
       * <pre>
       **
       *The amount that was accepted for this invoice, in satoshis. This will ONLY
       *be set if this invoice has been settled. We provide this field as if the
       *invoice was created with a zero value, then we need to record what amount
       *was ultimately accepted. Additionally, it's possible that the sender paid
       *MORE that was specified in the original invoice. So we'll record that here
       *as well.
       * </pre>
       *
       * <code>optional int64 amt_paid_sat = 19;</code>
       */
      public Builder setAmtPaidSat(long value) {
        copyOnWrite();
        instance.setAmtPaidSat(value);
        return this;
      }
      /**
       * <pre>
       **
       *The amount that was accepted for this invoice, in satoshis. This will ONLY
       *be set if this invoice has been settled. We provide this field as if the
       *invoice was created with a zero value, then we need to record what amount
       *was ultimately accepted. Additionally, it's possible that the sender paid
       *MORE that was specified in the original invoice. So we'll record that here
       *as well.
       * </pre>
       *
       * <code>optional int64 amt_paid_sat = 19;</code>
       */
      public Builder clearAmtPaidSat() {
        copyOnWrite();
        instance.clearAmtPaidSat();
        return this;
      }

      /**
       * <pre>
       **
       *The amount that was accepted for this invoice, in millisatoshis. This will
       *ONLY be set if this invoice has been settled. We provide this field as if
       *the invoice was created with a zero value, then we need to record what
       *amount was ultimately accepted. Additionally, it's possible that the sender
       *paid MORE that was specified in the original invoice. So we'll record that
       *here as well.
       * </pre>
       *
       * <code>optional int64 amt_paid_msat = 20;</code>
       */
      public long getAmtPaidMsat() {
        return instance.getAmtPaidMsat();
      }
      /**
       * <pre>
       **
       *The amount that was accepted for this invoice, in millisatoshis. This will
       *ONLY be set if this invoice has been settled. We provide this field as if
       *the invoice was created with a zero value, then we need to record what
       *amount was ultimately accepted. Additionally, it's possible that the sender
       *paid MORE that was specified in the original invoice. So we'll record that
       *here as well.
       * </pre>
       *
       * <code>optional int64 amt_paid_msat = 20;</code>
       */
      public Builder setAmtPaidMsat(long value) {
        copyOnWrite();
        instance.setAmtPaidMsat(value);
        return this;
      }
      /**
       * <pre>
       **
       *The amount that was accepted for this invoice, in millisatoshis. This will
       *ONLY be set if this invoice has been settled. We provide this field as if
       *the invoice was created with a zero value, then we need to record what
       *amount was ultimately accepted. Additionally, it's possible that the sender
       *paid MORE that was specified in the original invoice. So we'll record that
       *here as well.
       * </pre>
       *
       * <code>optional int64 amt_paid_msat = 20;</code>
       */
      public Builder clearAmtPaidMsat() {
        copyOnWrite();
        instance.clearAmtPaidMsat();
        return this;
      }

      /**
       * <pre>
       **
       *The state the invoice is in.
       * </pre>
       *
       * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
       */
      public int getStateValue() {
        return instance.getStateValue();
      }
      /**
       * <pre>
       **
       *The state the invoice is in.
       * </pre>
       *
       * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
       */
      public Builder setStateValue(int value) {
        copyOnWrite();
        instance.setStateValue(value);
        return this;
      }
      /**
       * <pre>
       **
       *The state the invoice is in.
       * </pre>
       *
       * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
       */
      public lnrpc.Rpc.Invoice.InvoiceState getState() {
        return instance.getState();
      }
      /**
       * <pre>
       **
       *The state the invoice is in.
       * </pre>
       *
       * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
       */
      public Builder setState(lnrpc.Rpc.Invoice.InvoiceState value) {
        copyOnWrite();
        instance.setState(value);
        return this;
      }
      /**
       * <pre>
       **
       *The state the invoice is in.
       * </pre>
       *
       * <code>optional .lnrpc.Invoice.InvoiceState state = 21;</code>
       */
      public Builder clearState() {
        copyOnWrite();
        instance.clearState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Invoice)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Invoice();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          routeHints_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Invoice other = (lnrpc.Rpc.Invoice) arg1;
          memo_ = visitor.visitString(!memo_.isEmpty(), memo_,
              !other.memo_.isEmpty(), other.memo_);
          receipt_ = visitor.visitByteString(receipt_ != com.google.protobuf.ByteString.EMPTY, receipt_,
              other.receipt_ != com.google.protobuf.ByteString.EMPTY, other.receipt_);
          rPreimage_ = visitor.visitByteString(rPreimage_ != com.google.protobuf.ByteString.EMPTY, rPreimage_,
              other.rPreimage_ != com.google.protobuf.ByteString.EMPTY, other.rPreimage_);
          rHash_ = visitor.visitByteString(rHash_ != com.google.protobuf.ByteString.EMPTY, rHash_,
              other.rHash_ != com.google.protobuf.ByteString.EMPTY, other.rHash_);
          value_ = visitor.visitLong(value_ != 0L, value_,
              other.value_ != 0L, other.value_);
          settled_ = visitor.visitBoolean(settled_ != false, settled_,
              other.settled_ != false, other.settled_);
          creationDate_ = visitor.visitLong(creationDate_ != 0L, creationDate_,
              other.creationDate_ != 0L, other.creationDate_);
          settleDate_ = visitor.visitLong(settleDate_ != 0L, settleDate_,
              other.settleDate_ != 0L, other.settleDate_);
          paymentRequest_ = visitor.visitString(!paymentRequest_.isEmpty(), paymentRequest_,
              !other.paymentRequest_.isEmpty(), other.paymentRequest_);
          descriptionHash_ = visitor.visitByteString(descriptionHash_ != com.google.protobuf.ByteString.EMPTY, descriptionHash_,
              other.descriptionHash_ != com.google.protobuf.ByteString.EMPTY, other.descriptionHash_);
          expiry_ = visitor.visitLong(expiry_ != 0L, expiry_,
              other.expiry_ != 0L, other.expiry_);
          fallbackAddr_ = visitor.visitString(!fallbackAddr_.isEmpty(), fallbackAddr_,
              !other.fallbackAddr_.isEmpty(), other.fallbackAddr_);
          cltvExpiry_ = visitor.visitLong(cltvExpiry_ != 0L, cltvExpiry_,
              other.cltvExpiry_ != 0L, other.cltvExpiry_);
          routeHints_= visitor.visitList(routeHints_, other.routeHints_);
          private_ = visitor.visitBoolean(private_ != false, private_,
              other.private_ != false, other.private_);
          addIndex_ = visitor.visitLong(addIndex_ != 0L, addIndex_,
              other.addIndex_ != 0L, other.addIndex_);
          settleIndex_ = visitor.visitLong(settleIndex_ != 0L, settleIndex_,
              other.settleIndex_ != 0L, other.settleIndex_);
          amtPaid_ = visitor.visitLong(amtPaid_ != 0L, amtPaid_,
              other.amtPaid_ != 0L, other.amtPaid_);
          amtPaidSat_ = visitor.visitLong(amtPaidSat_ != 0L, amtPaidSat_,
              other.amtPaidSat_ != 0L, other.amtPaidSat_);
          amtPaidMsat_ = visitor.visitLong(amtPaidMsat_ != 0L, amtPaidMsat_,
              other.amtPaidMsat_ != 0L, other.amtPaidMsat_);
          state_ = visitor.visitInt(state_ != 0, state_,    other.state_ != 0, other.state_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  memo_ = s;
                  break;
                }
                case 18: {

                  receipt_ = input.readBytes();
                  break;
                }
                case 26: {

                  rPreimage_ = input.readBytes();
                  break;
                }
                case 34: {

                  rHash_ = input.readBytes();
                  break;
                }
                case 40: {

                  value_ = input.readInt64();
                  break;
                }
                case 48: {

                  settled_ = input.readBool();
                  break;
                }
                case 56: {

                  creationDate_ = input.readInt64();
                  break;
                }
                case 64: {

                  settleDate_ = input.readInt64();
                  break;
                }
                case 74: {
                  String s = input.readStringRequireUtf8();

                  paymentRequest_ = s;
                  break;
                }
                case 82: {

                  descriptionHash_ = input.readBytes();
                  break;
                }
                case 88: {

                  expiry_ = input.readInt64();
                  break;
                }
                case 98: {
                  String s = input.readStringRequireUtf8();

                  fallbackAddr_ = s;
                  break;
                }
                case 104: {

                  cltvExpiry_ = input.readUInt64();
                  break;
                }
                case 114: {
                  if (!routeHints_.isModifiable()) {
                    routeHints_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(routeHints_);
                  }
                  routeHints_.add(
                      input.readMessage(lnrpc.Rpc.RouteHint.parser(), extensionRegistry));
                  break;
                }
                case 120: {

                  private_ = input.readBool();
                  break;
                }
                case 128: {

                  addIndex_ = input.readUInt64();
                  break;
                }
                case 136: {

                  settleIndex_ = input.readUInt64();
                  break;
                }
                case 144: {

                  amtPaid_ = input.readInt64();
                  break;
                }
                case 152: {

                  amtPaidSat_ = input.readInt64();
                  break;
                }
                case 160: {

                  amtPaidMsat_ = input.readInt64();
                  break;
                }
                case 168: {
                  int rawValue = input.readEnum();

                  state_ = rawValue;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Invoice.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Invoice)
    private static final lnrpc.Rpc.Invoice DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Invoice();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Invoice getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Invoice> PARSER;

    public static com.google.protobuf.Parser<Invoice> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AddInvoiceResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.AddInvoiceResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bytes r_hash = 1;</code>
     */
    com.google.protobuf.ByteString getRHash();

    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    java.lang.String getPaymentRequest();
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    com.google.protobuf.ByteString
        getPaymentRequestBytes();

    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    long getAddIndex();
  }
  /**
   * Protobuf type {@code lnrpc.AddInvoiceResponse}
   */
  public  static final class AddInvoiceResponse extends
      com.google.protobuf.GeneratedMessageLite<
          AddInvoiceResponse, AddInvoiceResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.AddInvoiceResponse)
      AddInvoiceResponseOrBuilder {
    private AddInvoiceResponse() {
      rHash_ = com.google.protobuf.ByteString.EMPTY;
      paymentRequest_ = "";
    }
    public static final int R_HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString rHash_;
    /**
     * <code>optional bytes r_hash = 1;</code>
     */
    public com.google.protobuf.ByteString getRHash() {
      return rHash_;
    }
    /**
     * <code>optional bytes r_hash = 1;</code>
     */
    private void setRHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rHash_ = value;
    }
    /**
     * <code>optional bytes r_hash = 1;</code>
     */
    private void clearRHash() {
      
      rHash_ = getDefaultInstance().getRHash();
    }

    public static final int PAYMENT_REQUEST_FIELD_NUMBER = 2;
    private java.lang.String paymentRequest_;
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    public java.lang.String getPaymentRequest() {
      return paymentRequest_;
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentRequestBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentRequest_);
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    private void setPaymentRequest(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentRequest_ = value;
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    private void clearPaymentRequest() {
      
      paymentRequest_ = getDefaultInstance().getPaymentRequest();
    }
    /**
     * <pre>
     **
     *A bare-bones invoice for a payment within the Lightning Network.  With the
     *details of the invoice, the sender has all the data necessary to send a
     *payment to the recipient.
     * </pre>
     *
     * <code>optional string payment_request = 2;</code>
     */
    private void setPaymentRequestBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentRequest_ = value.toStringUtf8();
    }

    public static final int ADD_INDEX_FIELD_NUMBER = 16;
    private long addIndex_;
    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    public long getAddIndex() {
      return addIndex_;
    }
    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    private void setAddIndex(long value) {
      
      addIndex_ = value;
    }
    /**
     * <pre>
     **
     *The "add" index of this invoice. Each newly created invoice will increment
     *this index making it monotonically increasing. Callers to the
     *SubscribeInvoices call can use this to instantly get notified of all added
     *invoices with an add_index greater than this one.
     * </pre>
     *
     * <code>optional uint64 add_index = 16;</code>
     */
    private void clearAddIndex() {
      
      addIndex_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!rHash_.isEmpty()) {
        output.writeBytes(1, rHash_);
      }
      if (!paymentRequest_.isEmpty()) {
        output.writeString(2, getPaymentRequest());
      }
      if (addIndex_ != 0L) {
        output.writeUInt64(16, addIndex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!rHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, rHash_);
      }
      if (!paymentRequest_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPaymentRequest());
      }
      if (addIndex_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(16, addIndex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AddInvoiceResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.AddInvoiceResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.AddInvoiceResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.AddInvoiceResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.AddInvoiceResponse)
        lnrpc.Rpc.AddInvoiceResponseOrBuilder {
      // Construct using lnrpc.Rpc.AddInvoiceResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bytes r_hash = 1;</code>
       */
      public com.google.protobuf.ByteString getRHash() {
        return instance.getRHash();
      }
      /**
       * <code>optional bytes r_hash = 1;</code>
       */
      public Builder setRHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRHash(value);
        return this;
      }
      /**
       * <code>optional bytes r_hash = 1;</code>
       */
      public Builder clearRHash() {
        copyOnWrite();
        instance.clearRHash();
        return this;
      }

      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 2;</code>
       */
      public java.lang.String getPaymentRequest() {
        return instance.getPaymentRequest();
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentRequestBytes() {
        return instance.getPaymentRequestBytes();
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 2;</code>
       */
      public Builder setPaymentRequest(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentRequest(value);
        return this;
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 2;</code>
       */
      public Builder clearPaymentRequest() {
        copyOnWrite();
        instance.clearPaymentRequest();
        return this;
      }
      /**
       * <pre>
       **
       *A bare-bones invoice for a payment within the Lightning Network.  With the
       *details of the invoice, the sender has all the data necessary to send a
       *payment to the recipient.
       * </pre>
       *
       * <code>optional string payment_request = 2;</code>
       */
      public Builder setPaymentRequestBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentRequestBytes(value);
        return this;
      }

      /**
       * <pre>
       **
       *The "add" index of this invoice. Each newly created invoice will increment
       *this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all added
       *invoices with an add_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 add_index = 16;</code>
       */
      public long getAddIndex() {
        return instance.getAddIndex();
      }
      /**
       * <pre>
       **
       *The "add" index of this invoice. Each newly created invoice will increment
       *this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all added
       *invoices with an add_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 add_index = 16;</code>
       */
      public Builder setAddIndex(long value) {
        copyOnWrite();
        instance.setAddIndex(value);
        return this;
      }
      /**
       * <pre>
       **
       *The "add" index of this invoice. Each newly created invoice will increment
       *this index making it monotonically increasing. Callers to the
       *SubscribeInvoices call can use this to instantly get notified of all added
       *invoices with an add_index greater than this one.
       * </pre>
       *
       * <code>optional uint64 add_index = 16;</code>
       */
      public Builder clearAddIndex() {
        copyOnWrite();
        instance.clearAddIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.AddInvoiceResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.AddInvoiceResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.AddInvoiceResponse other = (lnrpc.Rpc.AddInvoiceResponse) arg1;
          rHash_ = visitor.visitByteString(rHash_ != com.google.protobuf.ByteString.EMPTY, rHash_,
              other.rHash_ != com.google.protobuf.ByteString.EMPTY, other.rHash_);
          paymentRequest_ = visitor.visitString(!paymentRequest_.isEmpty(), paymentRequest_,
              !other.paymentRequest_.isEmpty(), other.paymentRequest_);
          addIndex_ = visitor.visitLong(addIndex_ != 0L, addIndex_,
              other.addIndex_ != 0L, other.addIndex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  rHash_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  paymentRequest_ = s;
                  break;
                }
                case 128: {

                  addIndex_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.AddInvoiceResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.AddInvoiceResponse)
    private static final lnrpc.Rpc.AddInvoiceResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AddInvoiceResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.AddInvoiceResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AddInvoiceResponse> PARSER;

    public static com.google.protobuf.Parser<AddInvoiceResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PaymentHashOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PaymentHash)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    java.lang.String getRHashStr();
    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    com.google.protobuf.ByteString
        getRHashStrBytes();

    /**
     * <pre>
     *&#47; The payment hash of the invoice to be looked up.
     * </pre>
     *
     * <code>optional bytes r_hash = 2;</code>
     */
    com.google.protobuf.ByteString getRHash();
  }
  /**
   * Protobuf type {@code lnrpc.PaymentHash}
   */
  public  static final class PaymentHash extends
      com.google.protobuf.GeneratedMessageLite<
          PaymentHash, PaymentHash.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PaymentHash)
      PaymentHashOrBuilder {
    private PaymentHash() {
      rHashStr_ = "";
      rHash_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int R_HASH_STR_FIELD_NUMBER = 1;
    private java.lang.String rHashStr_;
    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    public java.lang.String getRHashStr() {
      return rHashStr_;
    }
    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    public com.google.protobuf.ByteString
        getRHashStrBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(rHashStr_);
    }
    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    private void setRHashStr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rHashStr_ = value;
    }
    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    private void clearRHashStr() {
      
      rHashStr_ = getDefaultInstance().getRHashStr();
    }
    /**
     * <pre>
     **
     *The hex-encoded payment hash of the invoice to be looked up. The passed
     *payment hash must be exactly 32 bytes, otherwise an error is returned.
     * </pre>
     *
     * <code>optional string r_hash_str = 1;</code>
     */
    private void setRHashStrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      rHashStr_ = value.toStringUtf8();
    }

    public static final int R_HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString rHash_;
    /**
     * <pre>
     *&#47; The payment hash of the invoice to be looked up.
     * </pre>
     *
     * <code>optional bytes r_hash = 2;</code>
     */
    public com.google.protobuf.ByteString getRHash() {
      return rHash_;
    }
    /**
     * <pre>
     *&#47; The payment hash of the invoice to be looked up.
     * </pre>
     *
     * <code>optional bytes r_hash = 2;</code>
     */
    private void setRHash(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rHash_ = value;
    }
    /**
     * <pre>
     *&#47; The payment hash of the invoice to be looked up.
     * </pre>
     *
     * <code>optional bytes r_hash = 2;</code>
     */
    private void clearRHash() {
      
      rHash_ = getDefaultInstance().getRHash();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!rHashStr_.isEmpty()) {
        output.writeString(1, getRHashStr());
      }
      if (!rHash_.isEmpty()) {
        output.writeBytes(2, rHash_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!rHashStr_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getRHashStr());
      }
      if (!rHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, rHash_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PaymentHash parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PaymentHash parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PaymentHash parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PaymentHash parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PaymentHash prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PaymentHash}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PaymentHash, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PaymentHash)
        lnrpc.Rpc.PaymentHashOrBuilder {
      // Construct using lnrpc.Rpc.PaymentHash.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *The hex-encoded payment hash of the invoice to be looked up. The passed
       *payment hash must be exactly 32 bytes, otherwise an error is returned.
       * </pre>
       *
       * <code>optional string r_hash_str = 1;</code>
       */
      public java.lang.String getRHashStr() {
        return instance.getRHashStr();
      }
      /**
       * <pre>
       **
       *The hex-encoded payment hash of the invoice to be looked up. The passed
       *payment hash must be exactly 32 bytes, otherwise an error is returned.
       * </pre>
       *
       * <code>optional string r_hash_str = 1;</code>
       */
      public com.google.protobuf.ByteString
          getRHashStrBytes() {
        return instance.getRHashStrBytes();
      }
      /**
       * <pre>
       **
       *The hex-encoded payment hash of the invoice to be looked up. The passed
       *payment hash must be exactly 32 bytes, otherwise an error is returned.
       * </pre>
       *
       * <code>optional string r_hash_str = 1;</code>
       */
      public Builder setRHashStr(
          java.lang.String value) {
        copyOnWrite();
        instance.setRHashStr(value);
        return this;
      }
      /**
       * <pre>
       **
       *The hex-encoded payment hash of the invoice to be looked up. The passed
       *payment hash must be exactly 32 bytes, otherwise an error is returned.
       * </pre>
       *
       * <code>optional string r_hash_str = 1;</code>
       */
      public Builder clearRHashStr() {
        copyOnWrite();
        instance.clearRHashStr();
        return this;
      }
      /**
       * <pre>
       **
       *The hex-encoded payment hash of the invoice to be looked up. The passed
       *payment hash must be exactly 32 bytes, otherwise an error is returned.
       * </pre>
       *
       * <code>optional string r_hash_str = 1;</code>
       */
      public Builder setRHashStrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRHashStrBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The payment hash of the invoice to be looked up.
       * </pre>
       *
       * <code>optional bytes r_hash = 2;</code>
       */
      public com.google.protobuf.ByteString getRHash() {
        return instance.getRHash();
      }
      /**
       * <pre>
       *&#47; The payment hash of the invoice to be looked up.
       * </pre>
       *
       * <code>optional bytes r_hash = 2;</code>
       */
      public Builder setRHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The payment hash of the invoice to be looked up.
       * </pre>
       *
       * <code>optional bytes r_hash = 2;</code>
       */
      public Builder clearRHash() {
        copyOnWrite();
        instance.clearRHash();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PaymentHash)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PaymentHash();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PaymentHash other = (lnrpc.Rpc.PaymentHash) arg1;
          rHashStr_ = visitor.visitString(!rHashStr_.isEmpty(), rHashStr_,
              !other.rHashStr_.isEmpty(), other.rHashStr_);
          rHash_ = visitor.visitByteString(rHash_ != com.google.protobuf.ByteString.EMPTY, rHash_,
              other.rHash_ != com.google.protobuf.ByteString.EMPTY, other.rHash_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  rHashStr_ = s;
                  break;
                }
                case 18: {

                  rHash_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PaymentHash.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PaymentHash)
    private static final lnrpc.Rpc.PaymentHash DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PaymentHash();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PaymentHash getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PaymentHash> PARSER;

    public static com.google.protobuf.Parser<PaymentHash> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListInvoiceRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListInvoiceRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; If set, only unsettled invoices will be returned in the response.
     * </pre>
     *
     * <code>optional bool pending_only = 1;</code>
     */
    boolean getPendingOnly();

    /**
     * <pre>
     **
     *The index of an invoice that will be used as either the start or end of a
     *query to determine which invoices should be returned in the response.
     * </pre>
     *
     * <code>optional uint64 index_offset = 4;</code>
     */
    long getIndexOffset();

    /**
     * <pre>
     *&#47; The max number of invoices to return in the response to this query.
     * </pre>
     *
     * <code>optional uint64 num_max_invoices = 5;</code>
     */
    long getNumMaxInvoices();

    /**
     * <pre>
     **
     *If set, the invoices returned will result from seeking backwards from the
     *specified index offset. This can be used to paginate backwards.
     * </pre>
     *
     * <code>optional bool reversed = 6;</code>
     */
    boolean getReversed();
  }
  /**
   * Protobuf type {@code lnrpc.ListInvoiceRequest}
   */
  public  static final class ListInvoiceRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ListInvoiceRequest, ListInvoiceRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListInvoiceRequest)
      ListInvoiceRequestOrBuilder {
    private ListInvoiceRequest() {
    }
    public static final int PENDING_ONLY_FIELD_NUMBER = 1;
    private boolean pendingOnly_;
    /**
     * <pre>
     *&#47; If set, only unsettled invoices will be returned in the response.
     * </pre>
     *
     * <code>optional bool pending_only = 1;</code>
     */
    public boolean getPendingOnly() {
      return pendingOnly_;
    }
    /**
     * <pre>
     *&#47; If set, only unsettled invoices will be returned in the response.
     * </pre>
     *
     * <code>optional bool pending_only = 1;</code>
     */
    private void setPendingOnly(boolean value) {
      
      pendingOnly_ = value;
    }
    /**
     * <pre>
     *&#47; If set, only unsettled invoices will be returned in the response.
     * </pre>
     *
     * <code>optional bool pending_only = 1;</code>
     */
    private void clearPendingOnly() {
      
      pendingOnly_ = false;
    }

    public static final int INDEX_OFFSET_FIELD_NUMBER = 4;
    private long indexOffset_;
    /**
     * <pre>
     **
     *The index of an invoice that will be used as either the start or end of a
     *query to determine which invoices should be returned in the response.
     * </pre>
     *
     * <code>optional uint64 index_offset = 4;</code>
     */
    public long getIndexOffset() {
      return indexOffset_;
    }
    /**
     * <pre>
     **
     *The index of an invoice that will be used as either the start or end of a
     *query to determine which invoices should be returned in the response.
     * </pre>
     *
     * <code>optional uint64 index_offset = 4;</code>
     */
    private void setIndexOffset(long value) {
      
      indexOffset_ = value;
    }
    /**
     * <pre>
     **
     *The index of an invoice that will be used as either the start or end of a
     *query to determine which invoices should be returned in the response.
     * </pre>
     *
     * <code>optional uint64 index_offset = 4;</code>
     */
    private void clearIndexOffset() {
      
      indexOffset_ = 0L;
    }

    public static final int NUM_MAX_INVOICES_FIELD_NUMBER = 5;
    private long numMaxInvoices_;
    /**
     * <pre>
     *&#47; The max number of invoices to return in the response to this query.
     * </pre>
     *
     * <code>optional uint64 num_max_invoices = 5;</code>
     */
    public long getNumMaxInvoices() {
      return numMaxInvoices_;
    }
    /**
     * <pre>
     *&#47; The max number of invoices to return in the response to this query.
     * </pre>
     *
     * <code>optional uint64 num_max_invoices = 5;</code>
     */
    private void setNumMaxInvoices(long value) {
      
      numMaxInvoices_ = value;
    }
    /**
     * <pre>
     *&#47; The max number of invoices to return in the response to this query.
     * </pre>
     *
     * <code>optional uint64 num_max_invoices = 5;</code>
     */
    private void clearNumMaxInvoices() {
      
      numMaxInvoices_ = 0L;
    }

    public static final int REVERSED_FIELD_NUMBER = 6;
    private boolean reversed_;
    /**
     * <pre>
     **
     *If set, the invoices returned will result from seeking backwards from the
     *specified index offset. This can be used to paginate backwards.
     * </pre>
     *
     * <code>optional bool reversed = 6;</code>
     */
    public boolean getReversed() {
      return reversed_;
    }
    /**
     * <pre>
     **
     *If set, the invoices returned will result from seeking backwards from the
     *specified index offset. This can be used to paginate backwards.
     * </pre>
     *
     * <code>optional bool reversed = 6;</code>
     */
    private void setReversed(boolean value) {
      
      reversed_ = value;
    }
    /**
     * <pre>
     **
     *If set, the invoices returned will result from seeking backwards from the
     *specified index offset. This can be used to paginate backwards.
     * </pre>
     *
     * <code>optional bool reversed = 6;</code>
     */
    private void clearReversed() {
      
      reversed_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (pendingOnly_ != false) {
        output.writeBool(1, pendingOnly_);
      }
      if (indexOffset_ != 0L) {
        output.writeUInt64(4, indexOffset_);
      }
      if (numMaxInvoices_ != 0L) {
        output.writeUInt64(5, numMaxInvoices_);
      }
      if (reversed_ != false) {
        output.writeBool(6, reversed_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (pendingOnly_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, pendingOnly_);
      }
      if (indexOffset_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, indexOffset_);
      }
      if (numMaxInvoices_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, numMaxInvoices_);
      }
      if (reversed_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, reversed_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListInvoiceRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListInvoiceRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListInvoiceRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListInvoiceRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListInvoiceRequest)
        lnrpc.Rpc.ListInvoiceRequestOrBuilder {
      // Construct using lnrpc.Rpc.ListInvoiceRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; If set, only unsettled invoices will be returned in the response.
       * </pre>
       *
       * <code>optional bool pending_only = 1;</code>
       */
      public boolean getPendingOnly() {
        return instance.getPendingOnly();
      }
      /**
       * <pre>
       *&#47; If set, only unsettled invoices will be returned in the response.
       * </pre>
       *
       * <code>optional bool pending_only = 1;</code>
       */
      public Builder setPendingOnly(boolean value) {
        copyOnWrite();
        instance.setPendingOnly(value);
        return this;
      }
      /**
       * <pre>
       *&#47; If set, only unsettled invoices will be returned in the response.
       * </pre>
       *
       * <code>optional bool pending_only = 1;</code>
       */
      public Builder clearPendingOnly() {
        copyOnWrite();
        instance.clearPendingOnly();
        return this;
      }

      /**
       * <pre>
       **
       *The index of an invoice that will be used as either the start or end of a
       *query to determine which invoices should be returned in the response.
       * </pre>
       *
       * <code>optional uint64 index_offset = 4;</code>
       */
      public long getIndexOffset() {
        return instance.getIndexOffset();
      }
      /**
       * <pre>
       **
       *The index of an invoice that will be used as either the start or end of a
       *query to determine which invoices should be returned in the response.
       * </pre>
       *
       * <code>optional uint64 index_offset = 4;</code>
       */
      public Builder setIndexOffset(long value) {
        copyOnWrite();
        instance.setIndexOffset(value);
        return this;
      }
      /**
       * <pre>
       **
       *The index of an invoice that will be used as either the start or end of a
       *query to determine which invoices should be returned in the response.
       * </pre>
       *
       * <code>optional uint64 index_offset = 4;</code>
       */
      public Builder clearIndexOffset() {
        copyOnWrite();
        instance.clearIndexOffset();
        return this;
      }

      /**
       * <pre>
       *&#47; The max number of invoices to return in the response to this query.
       * </pre>
       *
       * <code>optional uint64 num_max_invoices = 5;</code>
       */
      public long getNumMaxInvoices() {
        return instance.getNumMaxInvoices();
      }
      /**
       * <pre>
       *&#47; The max number of invoices to return in the response to this query.
       * </pre>
       *
       * <code>optional uint64 num_max_invoices = 5;</code>
       */
      public Builder setNumMaxInvoices(long value) {
        copyOnWrite();
        instance.setNumMaxInvoices(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The max number of invoices to return in the response to this query.
       * </pre>
       *
       * <code>optional uint64 num_max_invoices = 5;</code>
       */
      public Builder clearNumMaxInvoices() {
        copyOnWrite();
        instance.clearNumMaxInvoices();
        return this;
      }

      /**
       * <pre>
       **
       *If set, the invoices returned will result from seeking backwards from the
       *specified index offset. This can be used to paginate backwards.
       * </pre>
       *
       * <code>optional bool reversed = 6;</code>
       */
      public boolean getReversed() {
        return instance.getReversed();
      }
      /**
       * <pre>
       **
       *If set, the invoices returned will result from seeking backwards from the
       *specified index offset. This can be used to paginate backwards.
       * </pre>
       *
       * <code>optional bool reversed = 6;</code>
       */
      public Builder setReversed(boolean value) {
        copyOnWrite();
        instance.setReversed(value);
        return this;
      }
      /**
       * <pre>
       **
       *If set, the invoices returned will result from seeking backwards from the
       *specified index offset. This can be used to paginate backwards.
       * </pre>
       *
       * <code>optional bool reversed = 6;</code>
       */
      public Builder clearReversed() {
        copyOnWrite();
        instance.clearReversed();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListInvoiceRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListInvoiceRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListInvoiceRequest other = (lnrpc.Rpc.ListInvoiceRequest) arg1;
          pendingOnly_ = visitor.visitBoolean(pendingOnly_ != false, pendingOnly_,
              other.pendingOnly_ != false, other.pendingOnly_);
          indexOffset_ = visitor.visitLong(indexOffset_ != 0L, indexOffset_,
              other.indexOffset_ != 0L, other.indexOffset_);
          numMaxInvoices_ = visitor.visitLong(numMaxInvoices_ != 0L, numMaxInvoices_,
              other.numMaxInvoices_ != 0L, other.numMaxInvoices_);
          reversed_ = visitor.visitBoolean(reversed_ != false, reversed_,
              other.reversed_ != false, other.reversed_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  pendingOnly_ = input.readBool();
                  break;
                }
                case 32: {

                  indexOffset_ = input.readUInt64();
                  break;
                }
                case 40: {

                  numMaxInvoices_ = input.readUInt64();
                  break;
                }
                case 48: {

                  reversed_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListInvoiceRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListInvoiceRequest)
    private static final lnrpc.Rpc.ListInvoiceRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListInvoiceRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListInvoiceRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListInvoiceRequest> PARSER;

    public static com.google.protobuf.Parser<ListInvoiceRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListInvoiceResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListInvoiceResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    java.util.List<lnrpc.Rpc.Invoice> 
        getInvoicesList();
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    lnrpc.Rpc.Invoice getInvoices(int index);
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    int getInvoicesCount();

    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint64 last_index_offset = 2;</code>
     */
    long getLastIndexOffset();

    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek backwards, pagination style.
     * </pre>
     *
     * <code>optional uint64 first_index_offset = 3;</code>
     */
    long getFirstIndexOffset();
  }
  /**
   * Protobuf type {@code lnrpc.ListInvoiceResponse}
   */
  public  static final class ListInvoiceResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ListInvoiceResponse, ListInvoiceResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListInvoiceResponse)
      ListInvoiceResponseOrBuilder {
    private ListInvoiceResponse() {
      invoices_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int INVOICES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Invoice> invoices_;
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.Invoice> getInvoicesList() {
      return invoices_;
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.InvoiceOrBuilder> 
        getInvoicesOrBuilderList() {
      return invoices_;
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    public int getInvoicesCount() {
      return invoices_.size();
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    public lnrpc.Rpc.Invoice getInvoices(int index) {
      return invoices_.get(index);
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    public lnrpc.Rpc.InvoiceOrBuilder getInvoicesOrBuilder(
        int index) {
      return invoices_.get(index);
    }
    private void ensureInvoicesIsMutable() {
      if (!invoices_.isModifiable()) {
        invoices_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(invoices_);
       }
    }

    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void setInvoices(
        int index, lnrpc.Rpc.Invoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureInvoicesIsMutable();
      invoices_.set(index, value);
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void setInvoices(
        int index, lnrpc.Rpc.Invoice.Builder builderForValue) {
      ensureInvoicesIsMutable();
      invoices_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void addInvoices(lnrpc.Rpc.Invoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureInvoicesIsMutable();
      invoices_.add(value);
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void addInvoices(
        int index, lnrpc.Rpc.Invoice value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureInvoicesIsMutable();
      invoices_.add(index, value);
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void addInvoices(
        lnrpc.Rpc.Invoice.Builder builderForValue) {
      ensureInvoicesIsMutable();
      invoices_.add(builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void addInvoices(
        int index, lnrpc.Rpc.Invoice.Builder builderForValue) {
      ensureInvoicesIsMutable();
      invoices_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void addAllInvoices(
        java.lang.Iterable<? extends lnrpc.Rpc.Invoice> values) {
      ensureInvoicesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, invoices_);
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void clearInvoices() {
      invoices_ = emptyProtobufList();
    }
    /**
     * <pre>
     **
     *A list of invoices from the time slice of the time series specified in the
     *request.
     * </pre>
     *
     * <code>repeated .lnrpc.Invoice invoices = 1;</code>
     */
    private void removeInvoices(int index) {
      ensureInvoicesIsMutable();
      invoices_.remove(index);
    }

    public static final int LAST_INDEX_OFFSET_FIELD_NUMBER = 2;
    private long lastIndexOffset_;
    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint64 last_index_offset = 2;</code>
     */
    public long getLastIndexOffset() {
      return lastIndexOffset_;
    }
    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint64 last_index_offset = 2;</code>
     */
    private void setLastIndexOffset(long value) {
      
      lastIndexOffset_ = value;
    }
    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint64 last_index_offset = 2;</code>
     */
    private void clearLastIndexOffset() {
      
      lastIndexOffset_ = 0L;
    }

    public static final int FIRST_INDEX_OFFSET_FIELD_NUMBER = 3;
    private long firstIndexOffset_;
    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek backwards, pagination style.
     * </pre>
     *
     * <code>optional uint64 first_index_offset = 3;</code>
     */
    public long getFirstIndexOffset() {
      return firstIndexOffset_;
    }
    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek backwards, pagination style.
     * </pre>
     *
     * <code>optional uint64 first_index_offset = 3;</code>
     */
    private void setFirstIndexOffset(long value) {
      
      firstIndexOffset_ = value;
    }
    /**
     * <pre>
     **
     *The index of the last item in the set of returned invoices. This can be used
     *to seek backwards, pagination style.
     * </pre>
     *
     * <code>optional uint64 first_index_offset = 3;</code>
     */
    private void clearFirstIndexOffset() {
      
      firstIndexOffset_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < invoices_.size(); i++) {
        output.writeMessage(1, invoices_.get(i));
      }
      if (lastIndexOffset_ != 0L) {
        output.writeUInt64(2, lastIndexOffset_);
      }
      if (firstIndexOffset_ != 0L) {
        output.writeUInt64(3, firstIndexOffset_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < invoices_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, invoices_.get(i));
      }
      if (lastIndexOffset_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, lastIndexOffset_);
      }
      if (firstIndexOffset_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, firstIndexOffset_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListInvoiceResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListInvoiceResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListInvoiceResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListInvoiceResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListInvoiceResponse)
        lnrpc.Rpc.ListInvoiceResponseOrBuilder {
      // Construct using lnrpc.Rpc.ListInvoiceResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.Invoice> getInvoicesList() {
        return java.util.Collections.unmodifiableList(
            instance.getInvoicesList());
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public int getInvoicesCount() {
        return instance.getInvoicesCount();
      }/**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public lnrpc.Rpc.Invoice getInvoices(int index) {
        return instance.getInvoices(index);
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder setInvoices(
          int index, lnrpc.Rpc.Invoice value) {
        copyOnWrite();
        instance.setInvoices(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder setInvoices(
          int index, lnrpc.Rpc.Invoice.Builder builderForValue) {
        copyOnWrite();
        instance.setInvoices(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder addInvoices(lnrpc.Rpc.Invoice value) {
        copyOnWrite();
        instance.addInvoices(value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder addInvoices(
          int index, lnrpc.Rpc.Invoice value) {
        copyOnWrite();
        instance.addInvoices(index, value);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder addInvoices(
          lnrpc.Rpc.Invoice.Builder builderForValue) {
        copyOnWrite();
        instance.addInvoices(builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder addInvoices(
          int index, lnrpc.Rpc.Invoice.Builder builderForValue) {
        copyOnWrite();
        instance.addInvoices(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder addAllInvoices(
          java.lang.Iterable<? extends lnrpc.Rpc.Invoice> values) {
        copyOnWrite();
        instance.addAllInvoices(values);
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder clearInvoices() {
        copyOnWrite();
        instance.clearInvoices();
        return this;
      }
      /**
       * <pre>
       **
       *A list of invoices from the time slice of the time series specified in the
       *request.
       * </pre>
       *
       * <code>repeated .lnrpc.Invoice invoices = 1;</code>
       */
      public Builder removeInvoices(int index) {
        copyOnWrite();
        instance.removeInvoices(index);
        return this;
      }

      /**
       * <pre>
       **
       *The index of the last item in the set of returned invoices. This can be used
       *to seek further, pagination style.
       * </pre>
       *
       * <code>optional uint64 last_index_offset = 2;</code>
       */
      public long getLastIndexOffset() {
        return instance.getLastIndexOffset();
      }
      /**
       * <pre>
       **
       *The index of the last item in the set of returned invoices. This can be used
       *to seek further, pagination style.
       * </pre>
       *
       * <code>optional uint64 last_index_offset = 2;</code>
       */
      public Builder setLastIndexOffset(long value) {
        copyOnWrite();
        instance.setLastIndexOffset(value);
        return this;
      }
      /**
       * <pre>
       **
       *The index of the last item in the set of returned invoices. This can be used
       *to seek further, pagination style.
       * </pre>
       *
       * <code>optional uint64 last_index_offset = 2;</code>
       */
      public Builder clearLastIndexOffset() {
        copyOnWrite();
        instance.clearLastIndexOffset();
        return this;
      }

      /**
       * <pre>
       **
       *The index of the last item in the set of returned invoices. This can be used
       *to seek backwards, pagination style.
       * </pre>
       *
       * <code>optional uint64 first_index_offset = 3;</code>
       */
      public long getFirstIndexOffset() {
        return instance.getFirstIndexOffset();
      }
      /**
       * <pre>
       **
       *The index of the last item in the set of returned invoices. This can be used
       *to seek backwards, pagination style.
       * </pre>
       *
       * <code>optional uint64 first_index_offset = 3;</code>
       */
      public Builder setFirstIndexOffset(long value) {
        copyOnWrite();
        instance.setFirstIndexOffset(value);
        return this;
      }
      /**
       * <pre>
       **
       *The index of the last item in the set of returned invoices. This can be used
       *to seek backwards, pagination style.
       * </pre>
       *
       * <code>optional uint64 first_index_offset = 3;</code>
       */
      public Builder clearFirstIndexOffset() {
        copyOnWrite();
        instance.clearFirstIndexOffset();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListInvoiceResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListInvoiceResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          invoices_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListInvoiceResponse other = (lnrpc.Rpc.ListInvoiceResponse) arg1;
          invoices_= visitor.visitList(invoices_, other.invoices_);
          lastIndexOffset_ = visitor.visitLong(lastIndexOffset_ != 0L, lastIndexOffset_,
              other.lastIndexOffset_ != 0L, other.lastIndexOffset_);
          firstIndexOffset_ = visitor.visitLong(firstIndexOffset_ != 0L, firstIndexOffset_,
              other.firstIndexOffset_ != 0L, other.firstIndexOffset_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!invoices_.isModifiable()) {
                    invoices_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(invoices_);
                  }
                  invoices_.add(
                      input.readMessage(lnrpc.Rpc.Invoice.parser(), extensionRegistry));
                  break;
                }
                case 16: {

                  lastIndexOffset_ = input.readUInt64();
                  break;
                }
                case 24: {

                  firstIndexOffset_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListInvoiceResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListInvoiceResponse)
    private static final lnrpc.Rpc.ListInvoiceResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListInvoiceResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListInvoiceResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListInvoiceResponse> PARSER;

    public static com.google.protobuf.Parser<ListInvoiceResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface InvoiceSubscriptionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.InvoiceSubscription)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all added indexes with an add_index greater than this
     *value. This allows callers to catch up on any events they missed while they
     *weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 add_index = 1;</code>
     */
    long getAddIndex();

    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all settled indexes with an settle_index greater than
     *this value. This allows callers to catch up on any events they missed while
     *they weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 settle_index = 2;</code>
     */
    long getSettleIndex();
  }
  /**
   * Protobuf type {@code lnrpc.InvoiceSubscription}
   */
  public  static final class InvoiceSubscription extends
      com.google.protobuf.GeneratedMessageLite<
          InvoiceSubscription, InvoiceSubscription.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.InvoiceSubscription)
      InvoiceSubscriptionOrBuilder {
    private InvoiceSubscription() {
    }
    public static final int ADD_INDEX_FIELD_NUMBER = 1;
    private long addIndex_;
    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all added indexes with an add_index greater than this
     *value. This allows callers to catch up on any events they missed while they
     *weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 add_index = 1;</code>
     */
    public long getAddIndex() {
      return addIndex_;
    }
    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all added indexes with an add_index greater than this
     *value. This allows callers to catch up on any events they missed while they
     *weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 add_index = 1;</code>
     */
    private void setAddIndex(long value) {
      
      addIndex_ = value;
    }
    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all added indexes with an add_index greater than this
     *value. This allows callers to catch up on any events they missed while they
     *weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 add_index = 1;</code>
     */
    private void clearAddIndex() {
      
      addIndex_ = 0L;
    }

    public static final int SETTLE_INDEX_FIELD_NUMBER = 2;
    private long settleIndex_;
    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all settled indexes with an settle_index greater than
     *this value. This allows callers to catch up on any events they missed while
     *they weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 settle_index = 2;</code>
     */
    public long getSettleIndex() {
      return settleIndex_;
    }
    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all settled indexes with an settle_index greater than
     *this value. This allows callers to catch up on any events they missed while
     *they weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 settle_index = 2;</code>
     */
    private void setSettleIndex(long value) {
      
      settleIndex_ = value;
    }
    /**
     * <pre>
     **
     *If specified (non-zero), then we'll first start by sending out
     *notifications for all settled indexes with an settle_index greater than
     *this value. This allows callers to catch up on any events they missed while
     *they weren't connected to the streaming RPC.
     * </pre>
     *
     * <code>optional uint64 settle_index = 2;</code>
     */
    private void clearSettleIndex() {
      
      settleIndex_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (addIndex_ != 0L) {
        output.writeUInt64(1, addIndex_);
      }
      if (settleIndex_ != 0L) {
        output.writeUInt64(2, settleIndex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (addIndex_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, addIndex_);
      }
      if (settleIndex_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, settleIndex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.InvoiceSubscription parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.InvoiceSubscription parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.InvoiceSubscription prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.InvoiceSubscription}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.InvoiceSubscription, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.InvoiceSubscription)
        lnrpc.Rpc.InvoiceSubscriptionOrBuilder {
      // Construct using lnrpc.Rpc.InvoiceSubscription.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       **
       *If specified (non-zero), then we'll first start by sending out
       *notifications for all added indexes with an add_index greater than this
       *value. This allows callers to catch up on any events they missed while they
       *weren't connected to the streaming RPC.
       * </pre>
       *
       * <code>optional uint64 add_index = 1;</code>
       */
      public long getAddIndex() {
        return instance.getAddIndex();
      }
      /**
       * <pre>
       **
       *If specified (non-zero), then we'll first start by sending out
       *notifications for all added indexes with an add_index greater than this
       *value. This allows callers to catch up on any events they missed while they
       *weren't connected to the streaming RPC.
       * </pre>
       *
       * <code>optional uint64 add_index = 1;</code>
       */
      public Builder setAddIndex(long value) {
        copyOnWrite();
        instance.setAddIndex(value);
        return this;
      }
      /**
       * <pre>
       **
       *If specified (non-zero), then we'll first start by sending out
       *notifications for all added indexes with an add_index greater than this
       *value. This allows callers to catch up on any events they missed while they
       *weren't connected to the streaming RPC.
       * </pre>
       *
       * <code>optional uint64 add_index = 1;</code>
       */
      public Builder clearAddIndex() {
        copyOnWrite();
        instance.clearAddIndex();
        return this;
      }

      /**
       * <pre>
       **
       *If specified (non-zero), then we'll first start by sending out
       *notifications for all settled indexes with an settle_index greater than
       *this value. This allows callers to catch up on any events they missed while
       *they weren't connected to the streaming RPC.
       * </pre>
       *
       * <code>optional uint64 settle_index = 2;</code>
       */
      public long getSettleIndex() {
        return instance.getSettleIndex();
      }
      /**
       * <pre>
       **
       *If specified (non-zero), then we'll first start by sending out
       *notifications for all settled indexes with an settle_index greater than
       *this value. This allows callers to catch up on any events they missed while
       *they weren't connected to the streaming RPC.
       * </pre>
       *
       * <code>optional uint64 settle_index = 2;</code>
       */
      public Builder setSettleIndex(long value) {
        copyOnWrite();
        instance.setSettleIndex(value);
        return this;
      }
      /**
       * <pre>
       **
       *If specified (non-zero), then we'll first start by sending out
       *notifications for all settled indexes with an settle_index greater than
       *this value. This allows callers to catch up on any events they missed while
       *they weren't connected to the streaming RPC.
       * </pre>
       *
       * <code>optional uint64 settle_index = 2;</code>
       */
      public Builder clearSettleIndex() {
        copyOnWrite();
        instance.clearSettleIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.InvoiceSubscription)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.InvoiceSubscription();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.InvoiceSubscription other = (lnrpc.Rpc.InvoiceSubscription) arg1;
          addIndex_ = visitor.visitLong(addIndex_ != 0L, addIndex_,
              other.addIndex_ != 0L, other.addIndex_);
          settleIndex_ = visitor.visitLong(settleIndex_ != 0L, settleIndex_,
              other.settleIndex_ != 0L, other.settleIndex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  addIndex_ = input.readUInt64();
                  break;
                }
                case 16: {

                  settleIndex_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.InvoiceSubscription.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.InvoiceSubscription)
    private static final lnrpc.Rpc.InvoiceSubscription DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new InvoiceSubscription();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.InvoiceSubscription getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<InvoiceSubscription> PARSER;

    public static com.google.protobuf.Parser<InvoiceSubscription> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PaymentOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.Payment)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    java.lang.String getPaymentHash();
    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    com.google.protobuf.ByteString
        getPaymentHashBytes();

    /**
     * <pre>
     *&#47; Deprecated, use value_sat or value_msat.
     * </pre>
     *
     * <code>optional int64 value = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated long getValue();

    /**
     * <pre>
     *&#47; The date of this payment
     * </pre>
     *
     * <code>optional int64 creation_date = 3;</code>
     */
    long getCreationDate();

    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    java.util.List<String>
        getPathList();
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    int getPathCount();
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    java.lang.String getPath(int index);
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    com.google.protobuf.ByteString
        getPathBytes(int index);

    /**
     * <pre>
     *&#47; The fee paid for this payment in satoshis
     * </pre>
     *
     * <code>optional int64 fee = 5;</code>
     */
    long getFee();

    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    java.lang.String getPaymentPreimage();
    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    com.google.protobuf.ByteString
        getPaymentPreimageBytes();

    /**
     * <pre>
     *&#47; The value of the payment in satoshis
     * </pre>
     *
     * <code>optional int64 value_sat = 7;</code>
     */
    long getValueSat();

    /**
     * <pre>
     *&#47; The value of the payment in milli-satoshis
     * </pre>
     *
     * <code>optional int64 value_msat = 8;</code>
     */
    long getValueMsat();
  }
  /**
   * Protobuf type {@code lnrpc.Payment}
   */
  public  static final class Payment extends
      com.google.protobuf.GeneratedMessageLite<
          Payment, Payment.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.Payment)
      PaymentOrBuilder {
    private Payment() {
      paymentHash_ = "";
      path_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
      paymentPreimage_ = "";
    }
    private int bitField0_;
    public static final int PAYMENT_HASH_FIELD_NUMBER = 1;
    private java.lang.String paymentHash_;
    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    public java.lang.String getPaymentHash() {
      return paymentHash_;
    }
    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentHash_);
    }
    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    private void setPaymentHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHash_ = value;
    }
    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    private void clearPaymentHash() {
      
      paymentHash_ = getDefaultInstance().getPaymentHash();
    }
    /**
     * <pre>
     *&#47; The payment hash
     * </pre>
     *
     * <code>optional string payment_hash = 1;</code>
     */
    private void setPaymentHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentHash_ = value.toStringUtf8();
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private long value_;
    /**
     * <pre>
     *&#47; Deprecated, use value_sat or value_msat.
     * </pre>
     *
     * <code>optional int64 value = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated public long getValue() {
      return value_;
    }
    /**
     * <pre>
     *&#47; Deprecated, use value_sat or value_msat.
     * </pre>
     *
     * <code>optional int64 value = 2 [deprecated = true];</code>
     */
    private void setValue(long value) {
      
      value_ = value;
    }
    /**
     * <pre>
     *&#47; Deprecated, use value_sat or value_msat.
     * </pre>
     *
     * <code>optional int64 value = 2 [deprecated = true];</code>
     */
    private void clearValue() {
      
      value_ = 0L;
    }

    public static final int CREATION_DATE_FIELD_NUMBER = 3;
    private long creationDate_;
    /**
     * <pre>
     *&#47; The date of this payment
     * </pre>
     *
     * <code>optional int64 creation_date = 3;</code>
     */
    public long getCreationDate() {
      return creationDate_;
    }
    /**
     * <pre>
     *&#47; The date of this payment
     * </pre>
     *
     * <code>optional int64 creation_date = 3;</code>
     */
    private void setCreationDate(long value) {
      
      creationDate_ = value;
    }
    /**
     * <pre>
     *&#47; The date of this payment
     * </pre>
     *
     * <code>optional int64 creation_date = 3;</code>
     */
    private void clearCreationDate() {
      
      creationDate_ = 0L;
    }

    public static final int PATH_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<String> path_;
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    public java.util.List<String> getPathList() {
      return path_;
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    public int getPathCount() {
      return path_.size();
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    public java.lang.String getPath(int index) {
      return path_.get(index);
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    public com.google.protobuf.ByteString
        getPathBytes(int index) {
      return com.google.protobuf.ByteString.copyFromUtf8(
          path_.get(index));
    }
    private void ensurePathIsMutable() {
      if (!path_.isModifiable()) {
        path_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(path_);
       }
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    private void setPath(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePathIsMutable();
      path_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    private void addPath(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensurePathIsMutable();
      path_.add(value);
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    private void addAllPath(
        java.lang.Iterable<java.lang.String> values) {
      ensurePathIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, path_);
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    private void clearPath() {
      path_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The path this payment took
     * </pre>
     *
     * <code>repeated string path = 4;</code>
     */
    private void addPathBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensurePathIsMutable();
      path_.add(value.toStringUtf8());
    }

    public static final int FEE_FIELD_NUMBER = 5;
    private long fee_;
    /**
     * <pre>
     *&#47; The fee paid for this payment in satoshis
     * </pre>
     *
     * <code>optional int64 fee = 5;</code>
     */
    public long getFee() {
      return fee_;
    }
    /**
     * <pre>
     *&#47; The fee paid for this payment in satoshis
     * </pre>
     *
     * <code>optional int64 fee = 5;</code>
     */
    private void setFee(long value) {
      
      fee_ = value;
    }
    /**
     * <pre>
     *&#47; The fee paid for this payment in satoshis
     * </pre>
     *
     * <code>optional int64 fee = 5;</code>
     */
    private void clearFee() {
      
      fee_ = 0L;
    }

    public static final int PAYMENT_PREIMAGE_FIELD_NUMBER = 6;
    private java.lang.String paymentPreimage_;
    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    public java.lang.String getPaymentPreimage() {
      return paymentPreimage_;
    }
    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentPreimageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentPreimage_);
    }
    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    private void setPaymentPreimage(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentPreimage_ = value;
    }
    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    private void clearPaymentPreimage() {
      
      paymentPreimage_ = getDefaultInstance().getPaymentPreimage();
    }
    /**
     * <pre>
     *&#47; The payment preimage
     * </pre>
     *
     * <code>optional string payment_preimage = 6;</code>
     */
    private void setPaymentPreimageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentPreimage_ = value.toStringUtf8();
    }

    public static final int VALUE_SAT_FIELD_NUMBER = 7;
    private long valueSat_;
    /**
     * <pre>
     *&#47; The value of the payment in satoshis
     * </pre>
     *
     * <code>optional int64 value_sat = 7;</code>
     */
    public long getValueSat() {
      return valueSat_;
    }
    /**
     * <pre>
     *&#47; The value of the payment in satoshis
     * </pre>
     *
     * <code>optional int64 value_sat = 7;</code>
     */
    private void setValueSat(long value) {
      
      valueSat_ = value;
    }
    /**
     * <pre>
     *&#47; The value of the payment in satoshis
     * </pre>
     *
     * <code>optional int64 value_sat = 7;</code>
     */
    private void clearValueSat() {
      
      valueSat_ = 0L;
    }

    public static final int VALUE_MSAT_FIELD_NUMBER = 8;
    private long valueMsat_;
    /**
     * <pre>
     *&#47; The value of the payment in milli-satoshis
     * </pre>
     *
     * <code>optional int64 value_msat = 8;</code>
     */
    public long getValueMsat() {
      return valueMsat_;
    }
    /**
     * <pre>
     *&#47; The value of the payment in milli-satoshis
     * </pre>
     *
     * <code>optional int64 value_msat = 8;</code>
     */
    private void setValueMsat(long value) {
      
      valueMsat_ = value;
    }
    /**
     * <pre>
     *&#47; The value of the payment in milli-satoshis
     * </pre>
     *
     * <code>optional int64 value_msat = 8;</code>
     */
    private void clearValueMsat() {
      
      valueMsat_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!paymentHash_.isEmpty()) {
        output.writeString(1, getPaymentHash());
      }
      if (value_ != 0L) {
        output.writeInt64(2, value_);
      }
      if (creationDate_ != 0L) {
        output.writeInt64(3, creationDate_);
      }
      for (int i = 0; i < path_.size(); i++) {
        output.writeString(4, path_.get(i));
      }
      if (fee_ != 0L) {
        output.writeInt64(5, fee_);
      }
      if (!paymentPreimage_.isEmpty()) {
        output.writeString(6, getPaymentPreimage());
      }
      if (valueSat_ != 0L) {
        output.writeInt64(7, valueSat_);
      }
      if (valueMsat_ != 0L) {
        output.writeInt64(8, valueMsat_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!paymentHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPaymentHash());
      }
      if (value_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, value_);
      }
      if (creationDate_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, creationDate_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < path_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeStringSizeNoTag(path_.get(i));
        }
        size += dataSize;
        size += 1 * getPathList().size();
      }
      if (fee_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, fee_);
      }
      if (!paymentPreimage_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getPaymentPreimage());
      }
      if (valueSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, valueSat_);
      }
      if (valueMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, valueMsat_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.Payment parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Payment parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Payment parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.Payment parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.Payment parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Payment parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Payment parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Payment parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.Payment parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.Payment parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.Payment prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.Payment}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.Payment, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.Payment)
        lnrpc.Rpc.PaymentOrBuilder {
      // Construct using lnrpc.Rpc.Payment.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The payment hash
       * </pre>
       *
       * <code>optional string payment_hash = 1;</code>
       */
      public java.lang.String getPaymentHash() {
        return instance.getPaymentHash();
      }
      /**
       * <pre>
       *&#47; The payment hash
       * </pre>
       *
       * <code>optional string payment_hash = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentHashBytes() {
        return instance.getPaymentHashBytes();
      }
      /**
       * <pre>
       *&#47; The payment hash
       * </pre>
       *
       * <code>optional string payment_hash = 1;</code>
       */
      public Builder setPaymentHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The payment hash
       * </pre>
       *
       * <code>optional string payment_hash = 1;</code>
       */
      public Builder clearPaymentHash() {
        copyOnWrite();
        instance.clearPaymentHash();
        return this;
      }
      /**
       * <pre>
       *&#47; The payment hash
       * </pre>
       *
       * <code>optional string payment_hash = 1;</code>
       */
      public Builder setPaymentHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHashBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; Deprecated, use value_sat or value_msat.
       * </pre>
       *
       * <code>optional int64 value = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public long getValue() {
        return instance.getValue();
      }
      /**
       * <pre>
       *&#47; Deprecated, use value_sat or value_msat.
       * </pre>
       *
       * <code>optional int64 value = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setValue(long value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Deprecated, use value_sat or value_msat.
       * </pre>
       *
       * <code>optional int64 value = 2 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }

      /**
       * <pre>
       *&#47; The date of this payment
       * </pre>
       *
       * <code>optional int64 creation_date = 3;</code>
       */
      public long getCreationDate() {
        return instance.getCreationDate();
      }
      /**
       * <pre>
       *&#47; The date of this payment
       * </pre>
       *
       * <code>optional int64 creation_date = 3;</code>
       */
      public Builder setCreationDate(long value) {
        copyOnWrite();
        instance.setCreationDate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The date of this payment
       * </pre>
       *
       * <code>optional int64 creation_date = 3;</code>
       */
      public Builder clearCreationDate() {
        copyOnWrite();
        instance.clearCreationDate();
        return this;
      }

      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public java.util.List<String>
          getPathList() {
        return java.util.Collections.unmodifiableList(
            instance.getPathList());
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public int getPathCount() {
        return instance.getPathCount();
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public java.lang.String getPath(int index) {
        return instance.getPath(index);
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public com.google.protobuf.ByteString
          getPathBytes(int index) {
        return instance.getPathBytes(index);
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public Builder setPath(
          int index, java.lang.String value) {
        copyOnWrite();
        instance.setPath(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public Builder addPath(
          java.lang.String value) {
        copyOnWrite();
        instance.addPath(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public Builder addAllPath(
          java.lang.Iterable<java.lang.String> values) {
        copyOnWrite();
        instance.addAllPath(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public Builder clearPath() {
        copyOnWrite();
        instance.clearPath();
        return this;
      }
      /**
       * <pre>
       *&#47; The path this payment took
       * </pre>
       *
       * <code>repeated string path = 4;</code>
       */
      public Builder addPathBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addPathBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The fee paid for this payment in satoshis
       * </pre>
       *
       * <code>optional int64 fee = 5;</code>
       */
      public long getFee() {
        return instance.getFee();
      }
      /**
       * <pre>
       *&#47; The fee paid for this payment in satoshis
       * </pre>
       *
       * <code>optional int64 fee = 5;</code>
       */
      public Builder setFee(long value) {
        copyOnWrite();
        instance.setFee(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The fee paid for this payment in satoshis
       * </pre>
       *
       * <code>optional int64 fee = 5;</code>
       */
      public Builder clearFee() {
        copyOnWrite();
        instance.clearFee();
        return this;
      }

      /**
       * <pre>
       *&#47; The payment preimage
       * </pre>
       *
       * <code>optional string payment_preimage = 6;</code>
       */
      public java.lang.String getPaymentPreimage() {
        return instance.getPaymentPreimage();
      }
      /**
       * <pre>
       *&#47; The payment preimage
       * </pre>
       *
       * <code>optional string payment_preimage = 6;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentPreimageBytes() {
        return instance.getPaymentPreimageBytes();
      }
      /**
       * <pre>
       *&#47; The payment preimage
       * </pre>
       *
       * <code>optional string payment_preimage = 6;</code>
       */
      public Builder setPaymentPreimage(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentPreimage(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The payment preimage
       * </pre>
       *
       * <code>optional string payment_preimage = 6;</code>
       */
      public Builder clearPaymentPreimage() {
        copyOnWrite();
        instance.clearPaymentPreimage();
        return this;
      }
      /**
       * <pre>
       *&#47; The payment preimage
       * </pre>
       *
       * <code>optional string payment_preimage = 6;</code>
       */
      public Builder setPaymentPreimageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentPreimageBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The value of the payment in satoshis
       * </pre>
       *
       * <code>optional int64 value_sat = 7;</code>
       */
      public long getValueSat() {
        return instance.getValueSat();
      }
      /**
       * <pre>
       *&#47; The value of the payment in satoshis
       * </pre>
       *
       * <code>optional int64 value_sat = 7;</code>
       */
      public Builder setValueSat(long value) {
        copyOnWrite();
        instance.setValueSat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The value of the payment in satoshis
       * </pre>
       *
       * <code>optional int64 value_sat = 7;</code>
       */
      public Builder clearValueSat() {
        copyOnWrite();
        instance.clearValueSat();
        return this;
      }

      /**
       * <pre>
       *&#47; The value of the payment in milli-satoshis
       * </pre>
       *
       * <code>optional int64 value_msat = 8;</code>
       */
      public long getValueMsat() {
        return instance.getValueMsat();
      }
      /**
       * <pre>
       *&#47; The value of the payment in milli-satoshis
       * </pre>
       *
       * <code>optional int64 value_msat = 8;</code>
       */
      public Builder setValueMsat(long value) {
        copyOnWrite();
        instance.setValueMsat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The value of the payment in milli-satoshis
       * </pre>
       *
       * <code>optional int64 value_msat = 8;</code>
       */
      public Builder clearValueMsat() {
        copyOnWrite();
        instance.clearValueMsat();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.Payment)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.Payment();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          path_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.Payment other = (lnrpc.Rpc.Payment) arg1;
          paymentHash_ = visitor.visitString(!paymentHash_.isEmpty(), paymentHash_,
              !other.paymentHash_.isEmpty(), other.paymentHash_);
          value_ = visitor.visitLong(value_ != 0L, value_,
              other.value_ != 0L, other.value_);
          creationDate_ = visitor.visitLong(creationDate_ != 0L, creationDate_,
              other.creationDate_ != 0L, other.creationDate_);
          path_= visitor.visitList(path_, other.path_);
          fee_ = visitor.visitLong(fee_ != 0L, fee_,
              other.fee_ != 0L, other.fee_);
          paymentPreimage_ = visitor.visitString(!paymentPreimage_.isEmpty(), paymentPreimage_,
              !other.paymentPreimage_.isEmpty(), other.paymentPreimage_);
          valueSat_ = visitor.visitLong(valueSat_ != 0L, valueSat_,
              other.valueSat_ != 0L, other.valueSat_);
          valueMsat_ = visitor.visitLong(valueMsat_ != 0L, valueMsat_,
              other.valueMsat_ != 0L, other.valueMsat_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  paymentHash_ = s;
                  break;
                }
                case 16: {

                  value_ = input.readInt64();
                  break;
                }
                case 24: {

                  creationDate_ = input.readInt64();
                  break;
                }
                case 34: {
                  String s = input.readStringRequireUtf8();
                  if (!path_.isModifiable()) {
                    path_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(path_);
                  }
                  path_.add(s);
                  break;
                }
                case 40: {

                  fee_ = input.readInt64();
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  paymentPreimage_ = s;
                  break;
                }
                case 56: {

                  valueSat_ = input.readInt64();
                  break;
                }
                case 64: {

                  valueMsat_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.Payment.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.Payment)
    private static final lnrpc.Rpc.Payment DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Payment();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.Payment getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Payment> PARSER;

    public static com.google.protobuf.Parser<Payment> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListPaymentsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListPaymentsRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.ListPaymentsRequest}
   */
  public  static final class ListPaymentsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ListPaymentsRequest, ListPaymentsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListPaymentsRequest)
      ListPaymentsRequestOrBuilder {
    private ListPaymentsRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPaymentsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListPaymentsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListPaymentsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListPaymentsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListPaymentsRequest)
        lnrpc.Rpc.ListPaymentsRequestOrBuilder {
      // Construct using lnrpc.Rpc.ListPaymentsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.ListPaymentsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListPaymentsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListPaymentsRequest other = (lnrpc.Rpc.ListPaymentsRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListPaymentsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListPaymentsRequest)
    private static final lnrpc.Rpc.ListPaymentsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListPaymentsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListPaymentsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListPaymentsRequest> PARSER;

    public static com.google.protobuf.Parser<ListPaymentsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ListPaymentsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ListPaymentsResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    java.util.List<lnrpc.Rpc.Payment> 
        getPaymentsList();
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    lnrpc.Rpc.Payment getPayments(int index);
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    int getPaymentsCount();
  }
  /**
   * Protobuf type {@code lnrpc.ListPaymentsResponse}
   */
  public  static final class ListPaymentsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ListPaymentsResponse, ListPaymentsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ListPaymentsResponse)
      ListPaymentsResponseOrBuilder {
    private ListPaymentsResponse() {
      payments_ = emptyProtobufList();
    }
    public static final int PAYMENTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.Payment> payments_;
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.Payment> getPaymentsList() {
      return payments_;
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.PaymentOrBuilder> 
        getPaymentsOrBuilderList() {
      return payments_;
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    public int getPaymentsCount() {
      return payments_.size();
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    public lnrpc.Rpc.Payment getPayments(int index) {
      return payments_.get(index);
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    public lnrpc.Rpc.PaymentOrBuilder getPaymentsOrBuilder(
        int index) {
      return payments_.get(index);
    }
    private void ensurePaymentsIsMutable() {
      if (!payments_.isModifiable()) {
        payments_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(payments_);
       }
    }

    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void setPayments(
        int index, lnrpc.Rpc.Payment value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePaymentsIsMutable();
      payments_.set(index, value);
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void setPayments(
        int index, lnrpc.Rpc.Payment.Builder builderForValue) {
      ensurePaymentsIsMutable();
      payments_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void addPayments(lnrpc.Rpc.Payment value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePaymentsIsMutable();
      payments_.add(value);
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void addPayments(
        int index, lnrpc.Rpc.Payment value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensurePaymentsIsMutable();
      payments_.add(index, value);
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void addPayments(
        lnrpc.Rpc.Payment.Builder builderForValue) {
      ensurePaymentsIsMutable();
      payments_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void addPayments(
        int index, lnrpc.Rpc.Payment.Builder builderForValue) {
      ensurePaymentsIsMutable();
      payments_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void addAllPayments(
        java.lang.Iterable<? extends lnrpc.Rpc.Payment> values) {
      ensurePaymentsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, payments_);
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void clearPayments() {
      payments_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; The list of payments
     * </pre>
     *
     * <code>repeated .lnrpc.Payment payments = 1;</code>
     */
    private void removePayments(int index) {
      ensurePaymentsIsMutable();
      payments_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < payments_.size(); i++) {
        output.writeMessage(1, payments_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < payments_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, payments_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ListPaymentsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ListPaymentsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ListPaymentsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ListPaymentsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ListPaymentsResponse)
        lnrpc.Rpc.ListPaymentsResponseOrBuilder {
      // Construct using lnrpc.Rpc.ListPaymentsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.Payment> getPaymentsList() {
        return java.util.Collections.unmodifiableList(
            instance.getPaymentsList());
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public int getPaymentsCount() {
        return instance.getPaymentsCount();
      }/**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public lnrpc.Rpc.Payment getPayments(int index) {
        return instance.getPayments(index);
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder setPayments(
          int index, lnrpc.Rpc.Payment value) {
        copyOnWrite();
        instance.setPayments(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder setPayments(
          int index, lnrpc.Rpc.Payment.Builder builderForValue) {
        copyOnWrite();
        instance.setPayments(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder addPayments(lnrpc.Rpc.Payment value) {
        copyOnWrite();
        instance.addPayments(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder addPayments(
          int index, lnrpc.Rpc.Payment value) {
        copyOnWrite();
        instance.addPayments(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder addPayments(
          lnrpc.Rpc.Payment.Builder builderForValue) {
        copyOnWrite();
        instance.addPayments(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder addPayments(
          int index, lnrpc.Rpc.Payment.Builder builderForValue) {
        copyOnWrite();
        instance.addPayments(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder addAllPayments(
          java.lang.Iterable<? extends lnrpc.Rpc.Payment> values) {
        copyOnWrite();
        instance.addAllPayments(values);
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder clearPayments() {
        copyOnWrite();
        instance.clearPayments();
        return this;
      }
      /**
       * <pre>
       *&#47; The list of payments
       * </pre>
       *
       * <code>repeated .lnrpc.Payment payments = 1;</code>
       */
      public Builder removePayments(int index) {
        copyOnWrite();
        instance.removePayments(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ListPaymentsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ListPaymentsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          payments_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ListPaymentsResponse other = (lnrpc.Rpc.ListPaymentsResponse) arg1;
          payments_= visitor.visitList(payments_, other.payments_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!payments_.isModifiable()) {
                    payments_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(payments_);
                  }
                  payments_.add(
                      input.readMessage(lnrpc.Rpc.Payment.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ListPaymentsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ListPaymentsResponse)
    private static final lnrpc.Rpc.ListPaymentsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ListPaymentsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ListPaymentsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ListPaymentsResponse> PARSER;

    public static com.google.protobuf.Parser<ListPaymentsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DeleteAllPaymentsRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.DeleteAllPaymentsRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.DeleteAllPaymentsRequest}
   */
  public  static final class DeleteAllPaymentsRequest extends
      com.google.protobuf.GeneratedMessageLite<
          DeleteAllPaymentsRequest, DeleteAllPaymentsRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.DeleteAllPaymentsRequest)
      DeleteAllPaymentsRequestOrBuilder {
    private DeleteAllPaymentsRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.DeleteAllPaymentsRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.DeleteAllPaymentsRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.DeleteAllPaymentsRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.DeleteAllPaymentsRequest)
        lnrpc.Rpc.DeleteAllPaymentsRequestOrBuilder {
      // Construct using lnrpc.Rpc.DeleteAllPaymentsRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.DeleteAllPaymentsRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.DeleteAllPaymentsRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.DeleteAllPaymentsRequest other = (lnrpc.Rpc.DeleteAllPaymentsRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.DeleteAllPaymentsRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.DeleteAllPaymentsRequest)
    private static final lnrpc.Rpc.DeleteAllPaymentsRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DeleteAllPaymentsRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.DeleteAllPaymentsRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DeleteAllPaymentsRequest> PARSER;

    public static com.google.protobuf.Parser<DeleteAllPaymentsRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DeleteAllPaymentsResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.DeleteAllPaymentsResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.DeleteAllPaymentsResponse}
   */
  public  static final class DeleteAllPaymentsResponse extends
      com.google.protobuf.GeneratedMessageLite<
          DeleteAllPaymentsResponse, DeleteAllPaymentsResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.DeleteAllPaymentsResponse)
      DeleteAllPaymentsResponseOrBuilder {
    private DeleteAllPaymentsResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DeleteAllPaymentsResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.DeleteAllPaymentsResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.DeleteAllPaymentsResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.DeleteAllPaymentsResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.DeleteAllPaymentsResponse)
        lnrpc.Rpc.DeleteAllPaymentsResponseOrBuilder {
      // Construct using lnrpc.Rpc.DeleteAllPaymentsResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.DeleteAllPaymentsResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.DeleteAllPaymentsResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.DeleteAllPaymentsResponse other = (lnrpc.Rpc.DeleteAllPaymentsResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.DeleteAllPaymentsResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.DeleteAllPaymentsResponse)
    private static final lnrpc.Rpc.DeleteAllPaymentsResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DeleteAllPaymentsResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.DeleteAllPaymentsResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DeleteAllPaymentsResponse> PARSER;

    public static com.google.protobuf.Parser<DeleteAllPaymentsResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AbandonChannelRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.AbandonChannelRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    boolean hasChannelPoint();
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    lnrpc.Rpc.ChannelPoint getChannelPoint();
  }
  /**
   * Protobuf type {@code lnrpc.AbandonChannelRequest}
   */
  public  static final class AbandonChannelRequest extends
      com.google.protobuf.GeneratedMessageLite<
          AbandonChannelRequest, AbandonChannelRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.AbandonChannelRequest)
      AbandonChannelRequestOrBuilder {
    private AbandonChannelRequest() {
    }
    public static final int CHANNEL_POINT_FIELD_NUMBER = 1;
    private lnrpc.Rpc.ChannelPoint channelPoint_;
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public boolean hasChannelPoint() {
      return channelPoint_ != null;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    public lnrpc.Rpc.ChannelPoint getChannelPoint() {
      return channelPoint_ == null ? lnrpc.Rpc.ChannelPoint.getDefaultInstance() : channelPoint_;
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void setChannelPoint(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      channelPoint_ = value;
      
      }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void setChannelPoint(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      channelPoint_ = builderForValue.build();
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void mergeChannelPoint(lnrpc.Rpc.ChannelPoint value) {
      if (channelPoint_ != null &&
          channelPoint_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        channelPoint_ =
          lnrpc.Rpc.ChannelPoint.newBuilder(channelPoint_).mergeFrom(value).buildPartial();
      } else {
        channelPoint_ = value;
      }
      
    }
    /**
     * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
     */
    private void clearChannelPoint() {  channelPoint_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (channelPoint_ != null) {
        output.writeMessage(1, getChannelPoint());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (channelPoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getChannelPoint());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AbandonChannelRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.AbandonChannelRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.AbandonChannelRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.AbandonChannelRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.AbandonChannelRequest)
        lnrpc.Rpc.AbandonChannelRequestOrBuilder {
      // Construct using lnrpc.Rpc.AbandonChannelRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public boolean hasChannelPoint() {
        return instance.hasChannelPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public lnrpc.Rpc.ChannelPoint getChannelPoint() {
        return instance.getChannelPoint();
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder setChannelPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setChannelPoint(value);
        return this;
        }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder setChannelPoint(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setChannelPoint(builderForValue);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder mergeChannelPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeChannelPoint(value);
        return this;
      }
      /**
       * <code>optional .lnrpc.ChannelPoint channel_point = 1;</code>
       */
      public Builder clearChannelPoint() {  copyOnWrite();
        instance.clearChannelPoint();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.AbandonChannelRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.AbandonChannelRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.AbandonChannelRequest other = (lnrpc.Rpc.AbandonChannelRequest) arg1;
          channelPoint_ = visitor.visitMessage(channelPoint_, other.channelPoint_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (channelPoint_ != null) {
                    subBuilder = channelPoint_.toBuilder();
                  }
                  channelPoint_ = input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(channelPoint_);
                    channelPoint_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.AbandonChannelRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.AbandonChannelRequest)
    private static final lnrpc.Rpc.AbandonChannelRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AbandonChannelRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.AbandonChannelRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AbandonChannelRequest> PARSER;

    public static com.google.protobuf.Parser<AbandonChannelRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AbandonChannelResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.AbandonChannelResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.AbandonChannelResponse}
   */
  public  static final class AbandonChannelResponse extends
      com.google.protobuf.GeneratedMessageLite<
          AbandonChannelResponse, AbandonChannelResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.AbandonChannelResponse)
      AbandonChannelResponseOrBuilder {
    private AbandonChannelResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.AbandonChannelResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.AbandonChannelResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.AbandonChannelResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.AbandonChannelResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.AbandonChannelResponse)
        lnrpc.Rpc.AbandonChannelResponseOrBuilder {
      // Construct using lnrpc.Rpc.AbandonChannelResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.AbandonChannelResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.AbandonChannelResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.AbandonChannelResponse other = (lnrpc.Rpc.AbandonChannelResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.AbandonChannelResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.AbandonChannelResponse)
    private static final lnrpc.Rpc.AbandonChannelResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AbandonChannelResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.AbandonChannelResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AbandonChannelResponse> PARSER;

    public static com.google.protobuf.Parser<AbandonChannelResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DebugLevelRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.DebugLevelRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional bool show = 1;</code>
     */
    boolean getShow();

    /**
     * <code>optional string level_spec = 2;</code>
     */
    java.lang.String getLevelSpec();
    /**
     * <code>optional string level_spec = 2;</code>
     */
    com.google.protobuf.ByteString
        getLevelSpecBytes();
  }
  /**
   * Protobuf type {@code lnrpc.DebugLevelRequest}
   */
  public  static final class DebugLevelRequest extends
      com.google.protobuf.GeneratedMessageLite<
          DebugLevelRequest, DebugLevelRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.DebugLevelRequest)
      DebugLevelRequestOrBuilder {
    private DebugLevelRequest() {
      levelSpec_ = "";
    }
    public static final int SHOW_FIELD_NUMBER = 1;
    private boolean show_;
    /**
     * <code>optional bool show = 1;</code>
     */
    public boolean getShow() {
      return show_;
    }
    /**
     * <code>optional bool show = 1;</code>
     */
    private void setShow(boolean value) {
      
      show_ = value;
    }
    /**
     * <code>optional bool show = 1;</code>
     */
    private void clearShow() {
      
      show_ = false;
    }

    public static final int LEVEL_SPEC_FIELD_NUMBER = 2;
    private java.lang.String levelSpec_;
    /**
     * <code>optional string level_spec = 2;</code>
     */
    public java.lang.String getLevelSpec() {
      return levelSpec_;
    }
    /**
     * <code>optional string level_spec = 2;</code>
     */
    public com.google.protobuf.ByteString
        getLevelSpecBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(levelSpec_);
    }
    /**
     * <code>optional string level_spec = 2;</code>
     */
    private void setLevelSpec(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      levelSpec_ = value;
    }
    /**
     * <code>optional string level_spec = 2;</code>
     */
    private void clearLevelSpec() {
      
      levelSpec_ = getDefaultInstance().getLevelSpec();
    }
    /**
     * <code>optional string level_spec = 2;</code>
     */
    private void setLevelSpecBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      levelSpec_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (show_ != false) {
        output.writeBool(1, show_);
      }
      if (!levelSpec_.isEmpty()) {
        output.writeString(2, getLevelSpec());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (show_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, show_);
      }
      if (!levelSpec_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getLevelSpec());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.DebugLevelRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DebugLevelRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.DebugLevelRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.DebugLevelRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.DebugLevelRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.DebugLevelRequest)
        lnrpc.Rpc.DebugLevelRequestOrBuilder {
      // Construct using lnrpc.Rpc.DebugLevelRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional bool show = 1;</code>
       */
      public boolean getShow() {
        return instance.getShow();
      }
      /**
       * <code>optional bool show = 1;</code>
       */
      public Builder setShow(boolean value) {
        copyOnWrite();
        instance.setShow(value);
        return this;
      }
      /**
       * <code>optional bool show = 1;</code>
       */
      public Builder clearShow() {
        copyOnWrite();
        instance.clearShow();
        return this;
      }

      /**
       * <code>optional string level_spec = 2;</code>
       */
      public java.lang.String getLevelSpec() {
        return instance.getLevelSpec();
      }
      /**
       * <code>optional string level_spec = 2;</code>
       */
      public com.google.protobuf.ByteString
          getLevelSpecBytes() {
        return instance.getLevelSpecBytes();
      }
      /**
       * <code>optional string level_spec = 2;</code>
       */
      public Builder setLevelSpec(
          java.lang.String value) {
        copyOnWrite();
        instance.setLevelSpec(value);
        return this;
      }
      /**
       * <code>optional string level_spec = 2;</code>
       */
      public Builder clearLevelSpec() {
        copyOnWrite();
        instance.clearLevelSpec();
        return this;
      }
      /**
       * <code>optional string level_spec = 2;</code>
       */
      public Builder setLevelSpecBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setLevelSpecBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.DebugLevelRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.DebugLevelRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.DebugLevelRequest other = (lnrpc.Rpc.DebugLevelRequest) arg1;
          show_ = visitor.visitBoolean(show_ != false, show_,
              other.show_ != false, other.show_);
          levelSpec_ = visitor.visitString(!levelSpec_.isEmpty(), levelSpec_,
              !other.levelSpec_.isEmpty(), other.levelSpec_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  show_ = input.readBool();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  levelSpec_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.DebugLevelRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.DebugLevelRequest)
    private static final lnrpc.Rpc.DebugLevelRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DebugLevelRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.DebugLevelRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DebugLevelRequest> PARSER;

    public static com.google.protobuf.Parser<DebugLevelRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface DebugLevelResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.DebugLevelResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string sub_systems = 1;</code>
     */
    java.lang.String getSubSystems();
    /**
     * <code>optional string sub_systems = 1;</code>
     */
    com.google.protobuf.ByteString
        getSubSystemsBytes();
  }
  /**
   * Protobuf type {@code lnrpc.DebugLevelResponse}
   */
  public  static final class DebugLevelResponse extends
      com.google.protobuf.GeneratedMessageLite<
          DebugLevelResponse, DebugLevelResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.DebugLevelResponse)
      DebugLevelResponseOrBuilder {
    private DebugLevelResponse() {
      subSystems_ = "";
    }
    public static final int SUB_SYSTEMS_FIELD_NUMBER = 1;
    private java.lang.String subSystems_;
    /**
     * <code>optional string sub_systems = 1;</code>
     */
    public java.lang.String getSubSystems() {
      return subSystems_;
    }
    /**
     * <code>optional string sub_systems = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSubSystemsBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(subSystems_);
    }
    /**
     * <code>optional string sub_systems = 1;</code>
     */
    private void setSubSystems(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      subSystems_ = value;
    }
    /**
     * <code>optional string sub_systems = 1;</code>
     */
    private void clearSubSystems() {
      
      subSystems_ = getDefaultInstance().getSubSystems();
    }
    /**
     * <code>optional string sub_systems = 1;</code>
     */
    private void setSubSystemsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      subSystems_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!subSystems_.isEmpty()) {
        output.writeString(1, getSubSystems());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!subSystems_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getSubSystems());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.DebugLevelResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.DebugLevelResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.DebugLevelResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.DebugLevelResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.DebugLevelResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.DebugLevelResponse)
        lnrpc.Rpc.DebugLevelResponseOrBuilder {
      // Construct using lnrpc.Rpc.DebugLevelResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string sub_systems = 1;</code>
       */
      public java.lang.String getSubSystems() {
        return instance.getSubSystems();
      }
      /**
       * <code>optional string sub_systems = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSubSystemsBytes() {
        return instance.getSubSystemsBytes();
      }
      /**
       * <code>optional string sub_systems = 1;</code>
       */
      public Builder setSubSystems(
          java.lang.String value) {
        copyOnWrite();
        instance.setSubSystems(value);
        return this;
      }
      /**
       * <code>optional string sub_systems = 1;</code>
       */
      public Builder clearSubSystems() {
        copyOnWrite();
        instance.clearSubSystems();
        return this;
      }
      /**
       * <code>optional string sub_systems = 1;</code>
       */
      public Builder setSubSystemsBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSubSystemsBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.DebugLevelResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.DebugLevelResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.DebugLevelResponse other = (lnrpc.Rpc.DebugLevelResponse) arg1;
          subSystems_ = visitor.visitString(!subSystems_.isEmpty(), subSystems_,
              !other.subSystems_.isEmpty(), other.subSystems_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  subSystems_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.DebugLevelResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.DebugLevelResponse)
    private static final lnrpc.Rpc.DebugLevelResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new DebugLevelResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.DebugLevelResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<DebugLevelResponse> PARSER;

    public static com.google.protobuf.Parser<DebugLevelResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PayReqStringOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PayReqString)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    java.lang.String getPayReq();
    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    com.google.protobuf.ByteString
        getPayReqBytes();
  }
  /**
   * Protobuf type {@code lnrpc.PayReqString}
   */
  public  static final class PayReqString extends
      com.google.protobuf.GeneratedMessageLite<
          PayReqString, PayReqString.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PayReqString)
      PayReqStringOrBuilder {
    private PayReqString() {
      payReq_ = "";
    }
    public static final int PAY_REQ_FIELD_NUMBER = 1;
    private java.lang.String payReq_;
    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    public java.lang.String getPayReq() {
      return payReq_;
    }
    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    public com.google.protobuf.ByteString
        getPayReqBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(payReq_);
    }
    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    private void setPayReq(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      payReq_ = value;
    }
    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    private void clearPayReq() {
      
      payReq_ = getDefaultInstance().getPayReq();
    }
    /**
     * <pre>
     *&#47; The payment request string to be decoded
     * </pre>
     *
     * <code>optional string pay_req = 1;</code>
     */
    private void setPayReqBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      payReq_ = value.toStringUtf8();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!payReq_.isEmpty()) {
        output.writeString(1, getPayReq());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!payReq_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getPayReq());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PayReqString parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReqString parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PayReqString parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PayReqString parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PayReqString prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PayReqString}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PayReqString, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PayReqString)
        lnrpc.Rpc.PayReqStringOrBuilder {
      // Construct using lnrpc.Rpc.PayReqString.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The payment request string to be decoded
       * </pre>
       *
       * <code>optional string pay_req = 1;</code>
       */
      public java.lang.String getPayReq() {
        return instance.getPayReq();
      }
      /**
       * <pre>
       *&#47; The payment request string to be decoded
       * </pre>
       *
       * <code>optional string pay_req = 1;</code>
       */
      public com.google.protobuf.ByteString
          getPayReqBytes() {
        return instance.getPayReqBytes();
      }
      /**
       * <pre>
       *&#47; The payment request string to be decoded
       * </pre>
       *
       * <code>optional string pay_req = 1;</code>
       */
      public Builder setPayReq(
          java.lang.String value) {
        copyOnWrite();
        instance.setPayReq(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The payment request string to be decoded
       * </pre>
       *
       * <code>optional string pay_req = 1;</code>
       */
      public Builder clearPayReq() {
        copyOnWrite();
        instance.clearPayReq();
        return this;
      }
      /**
       * <pre>
       *&#47; The payment request string to be decoded
       * </pre>
       *
       * <code>optional string pay_req = 1;</code>
       */
      public Builder setPayReqBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPayReqBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PayReqString)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PayReqString();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PayReqString other = (lnrpc.Rpc.PayReqString) arg1;
          payReq_ = visitor.visitString(!payReq_.isEmpty(), payReq_,
              !other.payReq_.isEmpty(), other.payReq_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  payReq_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PayReqString.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PayReqString)
    private static final lnrpc.Rpc.PayReqString DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PayReqString();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PayReqString getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PayReqString> PARSER;

    public static com.google.protobuf.Parser<PayReqString> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PayReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PayReq)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string destination = 1;</code>
     */
    java.lang.String getDestination();
    /**
     * <code>optional string destination = 1;</code>
     */
    com.google.protobuf.ByteString
        getDestinationBytes();

    /**
     * <code>optional string payment_hash = 2;</code>
     */
    java.lang.String getPaymentHash();
    /**
     * <code>optional string payment_hash = 2;</code>
     */
    com.google.protobuf.ByteString
        getPaymentHashBytes();

    /**
     * <code>optional int64 num_satoshis = 3;</code>
     */
    long getNumSatoshis();

    /**
     * <code>optional int64 timestamp = 4;</code>
     */
    long getTimestamp();

    /**
     * <code>optional int64 expiry = 5;</code>
     */
    long getExpiry();

    /**
     * <code>optional string description = 6;</code>
     */
    java.lang.String getDescription();
    /**
     * <code>optional string description = 6;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionBytes();

    /**
     * <code>optional string description_hash = 7;</code>
     */
    java.lang.String getDescriptionHash();
    /**
     * <code>optional string description_hash = 7;</code>
     */
    com.google.protobuf.ByteString
        getDescriptionHashBytes();

    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    java.lang.String getFallbackAddr();
    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    com.google.protobuf.ByteString
        getFallbackAddrBytes();

    /**
     * <code>optional int64 cltv_expiry = 9;</code>
     */
    long getCltvExpiry();

    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    java.util.List<lnrpc.Rpc.RouteHint> 
        getRouteHintsList();
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    lnrpc.Rpc.RouteHint getRouteHints(int index);
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    int getRouteHintsCount();
  }
  /**
   * Protobuf type {@code lnrpc.PayReq}
   */
  public  static final class PayReq extends
      com.google.protobuf.GeneratedMessageLite<
          PayReq, PayReq.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PayReq)
      PayReqOrBuilder {
    private PayReq() {
      destination_ = "";
      paymentHash_ = "";
      description_ = "";
      descriptionHash_ = "";
      fallbackAddr_ = "";
      routeHints_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int DESTINATION_FIELD_NUMBER = 1;
    private java.lang.String destination_;
    /**
     * <code>optional string destination = 1;</code>
     */
    public java.lang.String getDestination() {
      return destination_;
    }
    /**
     * <code>optional string destination = 1;</code>
     */
    public com.google.protobuf.ByteString
        getDestinationBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(destination_);
    }
    /**
     * <code>optional string destination = 1;</code>
     */
    private void setDestination(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      destination_ = value;
    }
    /**
     * <code>optional string destination = 1;</code>
     */
    private void clearDestination() {
      
      destination_ = getDefaultInstance().getDestination();
    }
    /**
     * <code>optional string destination = 1;</code>
     */
    private void setDestinationBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      destination_ = value.toStringUtf8();
    }

    public static final int PAYMENT_HASH_FIELD_NUMBER = 2;
    private java.lang.String paymentHash_;
    /**
     * <code>optional string payment_hash = 2;</code>
     */
    public java.lang.String getPaymentHash() {
      return paymentHash_;
    }
    /**
     * <code>optional string payment_hash = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPaymentHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(paymentHash_);
    }
    /**
     * <code>optional string payment_hash = 2;</code>
     */
    private void setPaymentHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      paymentHash_ = value;
    }
    /**
     * <code>optional string payment_hash = 2;</code>
     */
    private void clearPaymentHash() {
      
      paymentHash_ = getDefaultInstance().getPaymentHash();
    }
    /**
     * <code>optional string payment_hash = 2;</code>
     */
    private void setPaymentHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      paymentHash_ = value.toStringUtf8();
    }

    public static final int NUM_SATOSHIS_FIELD_NUMBER = 3;
    private long numSatoshis_;
    /**
     * <code>optional int64 num_satoshis = 3;</code>
     */
    public long getNumSatoshis() {
      return numSatoshis_;
    }
    /**
     * <code>optional int64 num_satoshis = 3;</code>
     */
    private void setNumSatoshis(long value) {
      
      numSatoshis_ = value;
    }
    /**
     * <code>optional int64 num_satoshis = 3;</code>
     */
    private void clearNumSatoshis() {
      
      numSatoshis_ = 0L;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private long timestamp_;
    /**
     * <code>optional int64 timestamp = 4;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <code>optional int64 timestamp = 4;</code>
     */
    private void setTimestamp(long value) {
      
      timestamp_ = value;
    }
    /**
     * <code>optional int64 timestamp = 4;</code>
     */
    private void clearTimestamp() {
      
      timestamp_ = 0L;
    }

    public static final int EXPIRY_FIELD_NUMBER = 5;
    private long expiry_;
    /**
     * <code>optional int64 expiry = 5;</code>
     */
    public long getExpiry() {
      return expiry_;
    }
    /**
     * <code>optional int64 expiry = 5;</code>
     */
    private void setExpiry(long value) {
      
      expiry_ = value;
    }
    /**
     * <code>optional int64 expiry = 5;</code>
     */
    private void clearExpiry() {
      
      expiry_ = 0L;
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 6;
    private java.lang.String description_;
    /**
     * <code>optional string description = 6;</code>
     */
    public java.lang.String getDescription() {
      return description_;
    }
    /**
     * <code>optional string description = 6;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(description_);
    }
    /**
     * <code>optional string description = 6;</code>
     */
    private void setDescription(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      description_ = value;
    }
    /**
     * <code>optional string description = 6;</code>
     */
    private void clearDescription() {
      
      description_ = getDefaultInstance().getDescription();
    }
    /**
     * <code>optional string description = 6;</code>
     */
    private void setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      description_ = value.toStringUtf8();
    }

    public static final int DESCRIPTION_HASH_FIELD_NUMBER = 7;
    private java.lang.String descriptionHash_;
    /**
     * <code>optional string description_hash = 7;</code>
     */
    public java.lang.String getDescriptionHash() {
      return descriptionHash_;
    }
    /**
     * <code>optional string description_hash = 7;</code>
     */
    public com.google.protobuf.ByteString
        getDescriptionHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(descriptionHash_);
    }
    /**
     * <code>optional string description_hash = 7;</code>
     */
    private void setDescriptionHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      descriptionHash_ = value;
    }
    /**
     * <code>optional string description_hash = 7;</code>
     */
    private void clearDescriptionHash() {
      
      descriptionHash_ = getDefaultInstance().getDescriptionHash();
    }
    /**
     * <code>optional string description_hash = 7;</code>
     */
    private void setDescriptionHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      descriptionHash_ = value.toStringUtf8();
    }

    public static final int FALLBACK_ADDR_FIELD_NUMBER = 8;
    private java.lang.String fallbackAddr_;
    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    public java.lang.String getFallbackAddr() {
      return fallbackAddr_;
    }
    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    public com.google.protobuf.ByteString
        getFallbackAddrBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(fallbackAddr_);
    }
    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    private void setFallbackAddr(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      fallbackAddr_ = value;
    }
    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    private void clearFallbackAddr() {
      
      fallbackAddr_ = getDefaultInstance().getFallbackAddr();
    }
    /**
     * <code>optional string fallback_addr = 8;</code>
     */
    private void setFallbackAddrBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      fallbackAddr_ = value.toStringUtf8();
    }

    public static final int CLTV_EXPIRY_FIELD_NUMBER = 9;
    private long cltvExpiry_;
    /**
     * <code>optional int64 cltv_expiry = 9;</code>
     */
    public long getCltvExpiry() {
      return cltvExpiry_;
    }
    /**
     * <code>optional int64 cltv_expiry = 9;</code>
     */
    private void setCltvExpiry(long value) {
      
      cltvExpiry_ = value;
    }
    /**
     * <code>optional int64 cltv_expiry = 9;</code>
     */
    private void clearCltvExpiry() {
      
      cltvExpiry_ = 0L;
    }

    public static final int ROUTE_HINTS_FIELD_NUMBER = 10;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.RouteHint> routeHints_;
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    public java.util.List<lnrpc.Rpc.RouteHint> getRouteHintsList() {
      return routeHints_;
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.RouteHintOrBuilder> 
        getRouteHintsOrBuilderList() {
      return routeHints_;
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    public int getRouteHintsCount() {
      return routeHints_.size();
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    public lnrpc.Rpc.RouteHint getRouteHints(int index) {
      return routeHints_.get(index);
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    public lnrpc.Rpc.RouteHintOrBuilder getRouteHintsOrBuilder(
        int index) {
      return routeHints_.get(index);
    }
    private void ensureRouteHintsIsMutable() {
      if (!routeHints_.isModifiable()) {
        routeHints_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(routeHints_);
       }
    }

    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void setRouteHints(
        int index, lnrpc.Rpc.RouteHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRouteHintsIsMutable();
      routeHints_.set(index, value);
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void setRouteHints(
        int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
      ensureRouteHintsIsMutable();
      routeHints_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void addRouteHints(lnrpc.Rpc.RouteHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRouteHintsIsMutable();
      routeHints_.add(value);
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void addRouteHints(
        int index, lnrpc.Rpc.RouteHint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureRouteHintsIsMutable();
      routeHints_.add(index, value);
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void addRouteHints(
        lnrpc.Rpc.RouteHint.Builder builderForValue) {
      ensureRouteHintsIsMutable();
      routeHints_.add(builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void addRouteHints(
        int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
      ensureRouteHintsIsMutable();
      routeHints_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void addAllRouteHints(
        java.lang.Iterable<? extends lnrpc.Rpc.RouteHint> values) {
      ensureRouteHintsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, routeHints_);
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void clearRouteHints() {
      routeHints_ = emptyProtobufList();
    }
    /**
     * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
     */
    private void removeRouteHints(int index) {
      ensureRouteHintsIsMutable();
      routeHints_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!destination_.isEmpty()) {
        output.writeString(1, getDestination());
      }
      if (!paymentHash_.isEmpty()) {
        output.writeString(2, getPaymentHash());
      }
      if (numSatoshis_ != 0L) {
        output.writeInt64(3, numSatoshis_);
      }
      if (timestamp_ != 0L) {
        output.writeInt64(4, timestamp_);
      }
      if (expiry_ != 0L) {
        output.writeInt64(5, expiry_);
      }
      if (!description_.isEmpty()) {
        output.writeString(6, getDescription());
      }
      if (!descriptionHash_.isEmpty()) {
        output.writeString(7, getDescriptionHash());
      }
      if (!fallbackAddr_.isEmpty()) {
        output.writeString(8, getFallbackAddr());
      }
      if (cltvExpiry_ != 0L) {
        output.writeInt64(9, cltvExpiry_);
      }
      for (int i = 0; i < routeHints_.size(); i++) {
        output.writeMessage(10, routeHints_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!destination_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getDestination());
      }
      if (!paymentHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPaymentHash());
      }
      if (numSatoshis_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, numSatoshis_);
      }
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, timestamp_);
      }
      if (expiry_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, expiry_);
      }
      if (!description_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getDescription());
      }
      if (!descriptionHash_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getDescriptionHash());
      }
      if (!fallbackAddr_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getFallbackAddr());
      }
      if (cltvExpiry_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, cltvExpiry_);
      }
      for (int i = 0; i < routeHints_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, routeHints_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PayReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PayReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PayReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PayReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PayReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PayReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PayReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PayReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PayReq}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PayReq, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PayReq)
        lnrpc.Rpc.PayReqOrBuilder {
      // Construct using lnrpc.Rpc.PayReq.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string destination = 1;</code>
       */
      public java.lang.String getDestination() {
        return instance.getDestination();
      }
      /**
       * <code>optional string destination = 1;</code>
       */
      public com.google.protobuf.ByteString
          getDestinationBytes() {
        return instance.getDestinationBytes();
      }
      /**
       * <code>optional string destination = 1;</code>
       */
      public Builder setDestination(
          java.lang.String value) {
        copyOnWrite();
        instance.setDestination(value);
        return this;
      }
      /**
       * <code>optional string destination = 1;</code>
       */
      public Builder clearDestination() {
        copyOnWrite();
        instance.clearDestination();
        return this;
      }
      /**
       * <code>optional string destination = 1;</code>
       */
      public Builder setDestinationBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDestinationBytes(value);
        return this;
      }

      /**
       * <code>optional string payment_hash = 2;</code>
       */
      public java.lang.String getPaymentHash() {
        return instance.getPaymentHash();
      }
      /**
       * <code>optional string payment_hash = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPaymentHashBytes() {
        return instance.getPaymentHashBytes();
      }
      /**
       * <code>optional string payment_hash = 2;</code>
       */
      public Builder setPaymentHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setPaymentHash(value);
        return this;
      }
      /**
       * <code>optional string payment_hash = 2;</code>
       */
      public Builder clearPaymentHash() {
        copyOnWrite();
        instance.clearPaymentHash();
        return this;
      }
      /**
       * <code>optional string payment_hash = 2;</code>
       */
      public Builder setPaymentHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPaymentHashBytes(value);
        return this;
      }

      /**
       * <code>optional int64 num_satoshis = 3;</code>
       */
      public long getNumSatoshis() {
        return instance.getNumSatoshis();
      }
      /**
       * <code>optional int64 num_satoshis = 3;</code>
       */
      public Builder setNumSatoshis(long value) {
        copyOnWrite();
        instance.setNumSatoshis(value);
        return this;
      }
      /**
       * <code>optional int64 num_satoshis = 3;</code>
       */
      public Builder clearNumSatoshis() {
        copyOnWrite();
        instance.clearNumSatoshis();
        return this;
      }

      /**
       * <code>optional int64 timestamp = 4;</code>
       */
      public long getTimestamp() {
        return instance.getTimestamp();
      }
      /**
       * <code>optional int64 timestamp = 4;</code>
       */
      public Builder setTimestamp(long value) {
        copyOnWrite();
        instance.setTimestamp(value);
        return this;
      }
      /**
       * <code>optional int64 timestamp = 4;</code>
       */
      public Builder clearTimestamp() {
        copyOnWrite();
        instance.clearTimestamp();
        return this;
      }

      /**
       * <code>optional int64 expiry = 5;</code>
       */
      public long getExpiry() {
        return instance.getExpiry();
      }
      /**
       * <code>optional int64 expiry = 5;</code>
       */
      public Builder setExpiry(long value) {
        copyOnWrite();
        instance.setExpiry(value);
        return this;
      }
      /**
       * <code>optional int64 expiry = 5;</code>
       */
      public Builder clearExpiry() {
        copyOnWrite();
        instance.clearExpiry();
        return this;
      }

      /**
       * <code>optional string description = 6;</code>
       */
      public java.lang.String getDescription() {
        return instance.getDescription();
      }
      /**
       * <code>optional string description = 6;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        return instance.getDescriptionBytes();
      }
      /**
       * <code>optional string description = 6;</code>
       */
      public Builder setDescription(
          java.lang.String value) {
        copyOnWrite();
        instance.setDescription(value);
        return this;
      }
      /**
       * <code>optional string description = 6;</code>
       */
      public Builder clearDescription() {
        copyOnWrite();
        instance.clearDescription();
        return this;
      }
      /**
       * <code>optional string description = 6;</code>
       */
      public Builder setDescriptionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionBytes(value);
        return this;
      }

      /**
       * <code>optional string description_hash = 7;</code>
       */
      public java.lang.String getDescriptionHash() {
        return instance.getDescriptionHash();
      }
      /**
       * <code>optional string description_hash = 7;</code>
       */
      public com.google.protobuf.ByteString
          getDescriptionHashBytes() {
        return instance.getDescriptionHashBytes();
      }
      /**
       * <code>optional string description_hash = 7;</code>
       */
      public Builder setDescriptionHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setDescriptionHash(value);
        return this;
      }
      /**
       * <code>optional string description_hash = 7;</code>
       */
      public Builder clearDescriptionHash() {
        copyOnWrite();
        instance.clearDescriptionHash();
        return this;
      }
      /**
       * <code>optional string description_hash = 7;</code>
       */
      public Builder setDescriptionHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDescriptionHashBytes(value);
        return this;
      }

      /**
       * <code>optional string fallback_addr = 8;</code>
       */
      public java.lang.String getFallbackAddr() {
        return instance.getFallbackAddr();
      }
      /**
       * <code>optional string fallback_addr = 8;</code>
       */
      public com.google.protobuf.ByteString
          getFallbackAddrBytes() {
        return instance.getFallbackAddrBytes();
      }
      /**
       * <code>optional string fallback_addr = 8;</code>
       */
      public Builder setFallbackAddr(
          java.lang.String value) {
        copyOnWrite();
        instance.setFallbackAddr(value);
        return this;
      }
      /**
       * <code>optional string fallback_addr = 8;</code>
       */
      public Builder clearFallbackAddr() {
        copyOnWrite();
        instance.clearFallbackAddr();
        return this;
      }
      /**
       * <code>optional string fallback_addr = 8;</code>
       */
      public Builder setFallbackAddrBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFallbackAddrBytes(value);
        return this;
      }

      /**
       * <code>optional int64 cltv_expiry = 9;</code>
       */
      public long getCltvExpiry() {
        return instance.getCltvExpiry();
      }
      /**
       * <code>optional int64 cltv_expiry = 9;</code>
       */
      public Builder setCltvExpiry(long value) {
        copyOnWrite();
        instance.setCltvExpiry(value);
        return this;
      }
      /**
       * <code>optional int64 cltv_expiry = 9;</code>
       */
      public Builder clearCltvExpiry() {
        copyOnWrite();
        instance.clearCltvExpiry();
        return this;
      }

      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public java.util.List<lnrpc.Rpc.RouteHint> getRouteHintsList() {
        return java.util.Collections.unmodifiableList(
            instance.getRouteHintsList());
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public int getRouteHintsCount() {
        return instance.getRouteHintsCount();
      }/**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public lnrpc.Rpc.RouteHint getRouteHints(int index) {
        return instance.getRouteHints(index);
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder setRouteHints(
          int index, lnrpc.Rpc.RouteHint value) {
        copyOnWrite();
        instance.setRouteHints(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder setRouteHints(
          int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
        copyOnWrite();
        instance.setRouteHints(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder addRouteHints(lnrpc.Rpc.RouteHint value) {
        copyOnWrite();
        instance.addRouteHints(value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder addRouteHints(
          int index, lnrpc.Rpc.RouteHint value) {
        copyOnWrite();
        instance.addRouteHints(index, value);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder addRouteHints(
          lnrpc.Rpc.RouteHint.Builder builderForValue) {
        copyOnWrite();
        instance.addRouteHints(builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder addRouteHints(
          int index, lnrpc.Rpc.RouteHint.Builder builderForValue) {
        copyOnWrite();
        instance.addRouteHints(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder addAllRouteHints(
          java.lang.Iterable<? extends lnrpc.Rpc.RouteHint> values) {
        copyOnWrite();
        instance.addAllRouteHints(values);
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder clearRouteHints() {
        copyOnWrite();
        instance.clearRouteHints();
        return this;
      }
      /**
       * <code>repeated .lnrpc.RouteHint route_hints = 10;</code>
       */
      public Builder removeRouteHints(int index) {
        copyOnWrite();
        instance.removeRouteHints(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PayReq)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PayReq();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          routeHints_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PayReq other = (lnrpc.Rpc.PayReq) arg1;
          destination_ = visitor.visitString(!destination_.isEmpty(), destination_,
              !other.destination_.isEmpty(), other.destination_);
          paymentHash_ = visitor.visitString(!paymentHash_.isEmpty(), paymentHash_,
              !other.paymentHash_.isEmpty(), other.paymentHash_);
          numSatoshis_ = visitor.visitLong(numSatoshis_ != 0L, numSatoshis_,
              other.numSatoshis_ != 0L, other.numSatoshis_);
          timestamp_ = visitor.visitLong(timestamp_ != 0L, timestamp_,
              other.timestamp_ != 0L, other.timestamp_);
          expiry_ = visitor.visitLong(expiry_ != 0L, expiry_,
              other.expiry_ != 0L, other.expiry_);
          description_ = visitor.visitString(!description_.isEmpty(), description_,
              !other.description_.isEmpty(), other.description_);
          descriptionHash_ = visitor.visitString(!descriptionHash_.isEmpty(), descriptionHash_,
              !other.descriptionHash_.isEmpty(), other.descriptionHash_);
          fallbackAddr_ = visitor.visitString(!fallbackAddr_.isEmpty(), fallbackAddr_,
              !other.fallbackAddr_.isEmpty(), other.fallbackAddr_);
          cltvExpiry_ = visitor.visitLong(cltvExpiry_ != 0L, cltvExpiry_,
              other.cltvExpiry_ != 0L, other.cltvExpiry_);
          routeHints_= visitor.visitList(routeHints_, other.routeHints_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  destination_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  paymentHash_ = s;
                  break;
                }
                case 24: {

                  numSatoshis_ = input.readInt64();
                  break;
                }
                case 32: {

                  timestamp_ = input.readInt64();
                  break;
                }
                case 40: {

                  expiry_ = input.readInt64();
                  break;
                }
                case 50: {
                  String s = input.readStringRequireUtf8();

                  description_ = s;
                  break;
                }
                case 58: {
                  String s = input.readStringRequireUtf8();

                  descriptionHash_ = s;
                  break;
                }
                case 66: {
                  String s = input.readStringRequireUtf8();

                  fallbackAddr_ = s;
                  break;
                }
                case 72: {

                  cltvExpiry_ = input.readInt64();
                  break;
                }
                case 82: {
                  if (!routeHints_.isModifiable()) {
                    routeHints_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(routeHints_);
                  }
                  routeHints_.add(
                      input.readMessage(lnrpc.Rpc.RouteHint.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PayReq.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PayReq)
    private static final lnrpc.Rpc.PayReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PayReq();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PayReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PayReq> PARSER;

    public static com.google.protobuf.Parser<PayReq> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FeeReportRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.FeeReportRequest)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.FeeReportRequest}
   */
  public  static final class FeeReportRequest extends
      com.google.protobuf.GeneratedMessageLite<
          FeeReportRequest, FeeReportRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.FeeReportRequest)
      FeeReportRequestOrBuilder {
    private FeeReportRequest() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.FeeReportRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeReportRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeReportRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.FeeReportRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.FeeReportRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.FeeReportRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.FeeReportRequest)
        lnrpc.Rpc.FeeReportRequestOrBuilder {
      // Construct using lnrpc.Rpc.FeeReportRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.FeeReportRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.FeeReportRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.FeeReportRequest other = (lnrpc.Rpc.FeeReportRequest) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.FeeReportRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.FeeReportRequest)
    private static final lnrpc.Rpc.FeeReportRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FeeReportRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.FeeReportRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FeeReportRequest> PARSER;

    public static com.google.protobuf.Parser<FeeReportRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChannelFeeReportOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ChannelFeeReport)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    java.lang.String getChanPoint();
    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    com.google.protobuf.ByteString
        getChanPointBytes();

    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 2;</code>
     */
    long getBaseFeeMsat();

    /**
     * <pre>
     *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
     * </pre>
     *
     * <code>optional int64 fee_per_mil = 3;</code>
     */
    long getFeePerMil();

    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    double getFeeRate();
  }
  /**
   * Protobuf type {@code lnrpc.ChannelFeeReport}
   */
  public  static final class ChannelFeeReport extends
      com.google.protobuf.GeneratedMessageLite<
          ChannelFeeReport, ChannelFeeReport.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ChannelFeeReport)
      ChannelFeeReportOrBuilder {
    private ChannelFeeReport() {
      chanPoint_ = "";
    }
    public static final int CHAN_POINT_FIELD_NUMBER = 1;
    private java.lang.String chanPoint_;
    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    public java.lang.String getChanPoint() {
      return chanPoint_;
    }
    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    public com.google.protobuf.ByteString
        getChanPointBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(chanPoint_);
    }
    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    private void setChanPoint(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      chanPoint_ = value;
    }
    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    private void clearChanPoint() {
      
      chanPoint_ = getDefaultInstance().getChanPoint();
    }
    /**
     * <pre>
     *&#47; The channel that this fee report belongs to.
     * </pre>
     *
     * <code>optional string chan_point = 1;</code>
     */
    private void setChanPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      chanPoint_ = value.toStringUtf8();
    }

    public static final int BASE_FEE_MSAT_FIELD_NUMBER = 2;
    private long baseFeeMsat_;
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 2;</code>
     */
    public long getBaseFeeMsat() {
      return baseFeeMsat_;
    }
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 2;</code>
     */
    private void setBaseFeeMsat(long value) {
      
      baseFeeMsat_ = value;
    }
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 2;</code>
     */
    private void clearBaseFeeMsat() {
      
      baseFeeMsat_ = 0L;
    }

    public static final int FEE_PER_MIL_FIELD_NUMBER = 3;
    private long feePerMil_;
    /**
     * <pre>
     *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
     * </pre>
     *
     * <code>optional int64 fee_per_mil = 3;</code>
     */
    public long getFeePerMil() {
      return feePerMil_;
    }
    /**
     * <pre>
     *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
     * </pre>
     *
     * <code>optional int64 fee_per_mil = 3;</code>
     */
    private void setFeePerMil(long value) {
      
      feePerMil_ = value;
    }
    /**
     * <pre>
     *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
     * </pre>
     *
     * <code>optional int64 fee_per_mil = 3;</code>
     */
    private void clearFeePerMil() {
      
      feePerMil_ = 0L;
    }

    public static final int FEE_RATE_FIELD_NUMBER = 4;
    private double feeRate_;
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    public double getFeeRate() {
      return feeRate_;
    }
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    private void setFeeRate(double value) {
      
      feeRate_ = value;
    }
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    private void clearFeeRate() {
      
      feeRate_ = 0D;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!chanPoint_.isEmpty()) {
        output.writeString(1, getChanPoint());
      }
      if (baseFeeMsat_ != 0L) {
        output.writeInt64(2, baseFeeMsat_);
      }
      if (feePerMil_ != 0L) {
        output.writeInt64(3, feePerMil_);
      }
      if (feeRate_ != 0D) {
        output.writeDouble(4, feeRate_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!chanPoint_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getChanPoint());
      }
      if (baseFeeMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, baseFeeMsat_);
      }
      if (feePerMil_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, feePerMil_);
      }
      if (feeRate_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, feeRate_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ChannelFeeReport parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ChannelFeeReport parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ChannelFeeReport prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ChannelFeeReport}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ChannelFeeReport, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ChannelFeeReport)
        lnrpc.Rpc.ChannelFeeReportOrBuilder {
      // Construct using lnrpc.Rpc.ChannelFeeReport.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; The channel that this fee report belongs to.
       * </pre>
       *
       * <code>optional string chan_point = 1;</code>
       */
      public java.lang.String getChanPoint() {
        return instance.getChanPoint();
      }
      /**
       * <pre>
       *&#47; The channel that this fee report belongs to.
       * </pre>
       *
       * <code>optional string chan_point = 1;</code>
       */
      public com.google.protobuf.ByteString
          getChanPointBytes() {
        return instance.getChanPointBytes();
      }
      /**
       * <pre>
       *&#47; The channel that this fee report belongs to.
       * </pre>
       *
       * <code>optional string chan_point = 1;</code>
       */
      public Builder setChanPoint(
          java.lang.String value) {
        copyOnWrite();
        instance.setChanPoint(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The channel that this fee report belongs to.
       * </pre>
       *
       * <code>optional string chan_point = 1;</code>
       */
      public Builder clearChanPoint() {
        copyOnWrite();
        instance.clearChanPoint();
        return this;
      }
      /**
       * <pre>
       *&#47; The channel that this fee report belongs to.
       * </pre>
       *
       * <code>optional string chan_point = 1;</code>
       */
      public Builder setChanPointBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChanPointBytes(value);
        return this;
      }

      /**
       * <pre>
       *&#47; The base fee charged regardless of the number of milli-satoshis sent.
       * </pre>
       *
       * <code>optional int64 base_fee_msat = 2;</code>
       */
      public long getBaseFeeMsat() {
        return instance.getBaseFeeMsat();
      }
      /**
       * <pre>
       *&#47; The base fee charged regardless of the number of milli-satoshis sent.
       * </pre>
       *
       * <code>optional int64 base_fee_msat = 2;</code>
       */
      public Builder setBaseFeeMsat(long value) {
        copyOnWrite();
        instance.setBaseFeeMsat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The base fee charged regardless of the number of milli-satoshis sent.
       * </pre>
       *
       * <code>optional int64 base_fee_msat = 2;</code>
       */
      public Builder clearBaseFeeMsat() {
        copyOnWrite();
        instance.clearBaseFeeMsat();
        return this;
      }

      /**
       * <pre>
       *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
       * </pre>
       *
       * <code>optional int64 fee_per_mil = 3;</code>
       */
      public long getFeePerMil() {
        return instance.getFeePerMil();
      }
      /**
       * <pre>
       *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
       * </pre>
       *
       * <code>optional int64 fee_per_mil = 3;</code>
       */
      public Builder setFeePerMil(long value) {
        copyOnWrite();
        instance.setFeePerMil(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
       * </pre>
       *
       * <code>optional int64 fee_per_mil = 3;</code>
       */
      public Builder clearFeePerMil() {
        copyOnWrite();
        instance.clearFeePerMil();
        return this;
      }

      /**
       * <pre>
       *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
       * </pre>
       *
       * <code>optional double fee_rate = 4;</code>
       */
      public double getFeeRate() {
        return instance.getFeeRate();
      }
      /**
       * <pre>
       *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
       * </pre>
       *
       * <code>optional double fee_rate = 4;</code>
       */
      public Builder setFeeRate(double value) {
        copyOnWrite();
        instance.setFeeRate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
       * </pre>
       *
       * <code>optional double fee_rate = 4;</code>
       */
      public Builder clearFeeRate() {
        copyOnWrite();
        instance.clearFeeRate();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ChannelFeeReport)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ChannelFeeReport();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ChannelFeeReport other = (lnrpc.Rpc.ChannelFeeReport) arg1;
          chanPoint_ = visitor.visitString(!chanPoint_.isEmpty(), chanPoint_,
              !other.chanPoint_.isEmpty(), other.chanPoint_);
          baseFeeMsat_ = visitor.visitLong(baseFeeMsat_ != 0L, baseFeeMsat_,
              other.baseFeeMsat_ != 0L, other.baseFeeMsat_);
          feePerMil_ = visitor.visitLong(feePerMil_ != 0L, feePerMil_,
              other.feePerMil_ != 0L, other.feePerMil_);
          feeRate_ = visitor.visitDouble(feeRate_ != 0D, feeRate_,
              other.feeRate_ != 0D, other.feeRate_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  chanPoint_ = s;
                  break;
                }
                case 16: {

                  baseFeeMsat_ = input.readInt64();
                  break;
                }
                case 24: {

                  feePerMil_ = input.readInt64();
                  break;
                }
                case 33: {

                  feeRate_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ChannelFeeReport.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ChannelFeeReport)
    private static final lnrpc.Rpc.ChannelFeeReport DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChannelFeeReport();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ChannelFeeReport getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChannelFeeReport> PARSER;

    public static com.google.protobuf.Parser<ChannelFeeReport> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface FeeReportResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.FeeReportResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    java.util.List<lnrpc.Rpc.ChannelFeeReport> 
        getChannelFeesList();
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    lnrpc.Rpc.ChannelFeeReport getChannelFees(int index);
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    int getChannelFeesCount();

    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
     * </pre>
     *
     * <code>optional uint64 day_fee_sum = 2;</code>
     */
    long getDayFeeSum();

    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
     * </pre>
     *
     * <code>optional uint64 week_fee_sum = 3;</code>
     */
    long getWeekFeeSum();

    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
     * </pre>
     *
     * <code>optional uint64 month_fee_sum = 4;</code>
     */
    long getMonthFeeSum();
  }
  /**
   * Protobuf type {@code lnrpc.FeeReportResponse}
   */
  public  static final class FeeReportResponse extends
      com.google.protobuf.GeneratedMessageLite<
          FeeReportResponse, FeeReportResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.FeeReportResponse)
      FeeReportResponseOrBuilder {
    private FeeReportResponse() {
      channelFees_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int CHANNEL_FEES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.ChannelFeeReport> channelFees_;
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.ChannelFeeReport> getChannelFeesList() {
      return channelFees_;
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ChannelFeeReportOrBuilder> 
        getChannelFeesOrBuilderList() {
      return channelFees_;
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    public int getChannelFeesCount() {
      return channelFees_.size();
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    public lnrpc.Rpc.ChannelFeeReport getChannelFees(int index) {
      return channelFees_.get(index);
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    public lnrpc.Rpc.ChannelFeeReportOrBuilder getChannelFeesOrBuilder(
        int index) {
      return channelFees_.get(index);
    }
    private void ensureChannelFeesIsMutable() {
      if (!channelFees_.isModifiable()) {
        channelFees_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(channelFees_);
       }
    }

    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void setChannelFees(
        int index, lnrpc.Rpc.ChannelFeeReport value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelFeesIsMutable();
      channelFees_.set(index, value);
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void setChannelFees(
        int index, lnrpc.Rpc.ChannelFeeReport.Builder builderForValue) {
      ensureChannelFeesIsMutable();
      channelFees_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void addChannelFees(lnrpc.Rpc.ChannelFeeReport value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelFeesIsMutable();
      channelFees_.add(value);
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void addChannelFees(
        int index, lnrpc.Rpc.ChannelFeeReport value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureChannelFeesIsMutable();
      channelFees_.add(index, value);
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void addChannelFees(
        lnrpc.Rpc.ChannelFeeReport.Builder builderForValue) {
      ensureChannelFeesIsMutable();
      channelFees_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void addChannelFees(
        int index, lnrpc.Rpc.ChannelFeeReport.Builder builderForValue) {
      ensureChannelFeesIsMutable();
      channelFees_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void addAllChannelFees(
        java.lang.Iterable<? extends lnrpc.Rpc.ChannelFeeReport> values) {
      ensureChannelFeesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, channelFees_);
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void clearChannelFees() {
      channelFees_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
     * </pre>
     *
     * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
     */
    private void removeChannelFees(int index) {
      ensureChannelFeesIsMutable();
      channelFees_.remove(index);
    }

    public static final int DAY_FEE_SUM_FIELD_NUMBER = 2;
    private long dayFeeSum_;
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
     * </pre>
     *
     * <code>optional uint64 day_fee_sum = 2;</code>
     */
    public long getDayFeeSum() {
      return dayFeeSum_;
    }
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
     * </pre>
     *
     * <code>optional uint64 day_fee_sum = 2;</code>
     */
    private void setDayFeeSum(long value) {
      
      dayFeeSum_ = value;
    }
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
     * </pre>
     *
     * <code>optional uint64 day_fee_sum = 2;</code>
     */
    private void clearDayFeeSum() {
      
      dayFeeSum_ = 0L;
    }

    public static final int WEEK_FEE_SUM_FIELD_NUMBER = 3;
    private long weekFeeSum_;
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
     * </pre>
     *
     * <code>optional uint64 week_fee_sum = 3;</code>
     */
    public long getWeekFeeSum() {
      return weekFeeSum_;
    }
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
     * </pre>
     *
     * <code>optional uint64 week_fee_sum = 3;</code>
     */
    private void setWeekFeeSum(long value) {
      
      weekFeeSum_ = value;
    }
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
     * </pre>
     *
     * <code>optional uint64 week_fee_sum = 3;</code>
     */
    private void clearWeekFeeSum() {
      
      weekFeeSum_ = 0L;
    }

    public static final int MONTH_FEE_SUM_FIELD_NUMBER = 4;
    private long monthFeeSum_;
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
     * </pre>
     *
     * <code>optional uint64 month_fee_sum = 4;</code>
     */
    public long getMonthFeeSum() {
      return monthFeeSum_;
    }
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
     * </pre>
     *
     * <code>optional uint64 month_fee_sum = 4;</code>
     */
    private void setMonthFeeSum(long value) {
      
      monthFeeSum_ = value;
    }
    /**
     * <pre>
     *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
     * </pre>
     *
     * <code>optional uint64 month_fee_sum = 4;</code>
     */
    private void clearMonthFeeSum() {
      
      monthFeeSum_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < channelFees_.size(); i++) {
        output.writeMessage(1, channelFees_.get(i));
      }
      if (dayFeeSum_ != 0L) {
        output.writeUInt64(2, dayFeeSum_);
      }
      if (weekFeeSum_ != 0L) {
        output.writeUInt64(3, weekFeeSum_);
      }
      if (monthFeeSum_ != 0L) {
        output.writeUInt64(4, monthFeeSum_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < channelFees_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, channelFees_.get(i));
      }
      if (dayFeeSum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, dayFeeSum_);
      }
      if (weekFeeSum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, weekFeeSum_);
      }
      if (monthFeeSum_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, monthFeeSum_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.FeeReportResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeReportResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.FeeReportResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.FeeReportResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.FeeReportResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.FeeReportResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.FeeReportResponse)
        lnrpc.Rpc.FeeReportResponseOrBuilder {
      // Construct using lnrpc.Rpc.FeeReportResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.ChannelFeeReport> getChannelFeesList() {
        return java.util.Collections.unmodifiableList(
            instance.getChannelFeesList());
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public int getChannelFeesCount() {
        return instance.getChannelFeesCount();
      }/**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public lnrpc.Rpc.ChannelFeeReport getChannelFees(int index) {
        return instance.getChannelFees(index);
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder setChannelFees(
          int index, lnrpc.Rpc.ChannelFeeReport value) {
        copyOnWrite();
        instance.setChannelFees(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder setChannelFees(
          int index, lnrpc.Rpc.ChannelFeeReport.Builder builderForValue) {
        copyOnWrite();
        instance.setChannelFees(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder addChannelFees(lnrpc.Rpc.ChannelFeeReport value) {
        copyOnWrite();
        instance.addChannelFees(value);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder addChannelFees(
          int index, lnrpc.Rpc.ChannelFeeReport value) {
        copyOnWrite();
        instance.addChannelFees(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder addChannelFees(
          lnrpc.Rpc.ChannelFeeReport.Builder builderForValue) {
        copyOnWrite();
        instance.addChannelFees(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder addChannelFees(
          int index, lnrpc.Rpc.ChannelFeeReport.Builder builderForValue) {
        copyOnWrite();
        instance.addChannelFees(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder addAllChannelFees(
          java.lang.Iterable<? extends lnrpc.Rpc.ChannelFeeReport> values) {
        copyOnWrite();
        instance.addAllChannelFees(values);
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder clearChannelFees() {
        copyOnWrite();
        instance.clearChannelFees();
        return this;
      }
      /**
       * <pre>
       *&#47; An array of channel fee reports which describes the current fee schedule for each channel.
       * </pre>
       *
       * <code>repeated .lnrpc.ChannelFeeReport channel_fees = 1;</code>
       */
      public Builder removeChannelFees(int index) {
        copyOnWrite();
        instance.removeChannelFees(index);
        return this;
      }

      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
       * </pre>
       *
       * <code>optional uint64 day_fee_sum = 2;</code>
       */
      public long getDayFeeSum() {
        return instance.getDayFeeSum();
      }
      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
       * </pre>
       *
       * <code>optional uint64 day_fee_sum = 2;</code>
       */
      public Builder setDayFeeSum(long value) {
        copyOnWrite();
        instance.setDayFeeSum(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
       * </pre>
       *
       * <code>optional uint64 day_fee_sum = 2;</code>
       */
      public Builder clearDayFeeSum() {
        copyOnWrite();
        instance.clearDayFeeSum();
        return this;
      }

      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
       * </pre>
       *
       * <code>optional uint64 week_fee_sum = 3;</code>
       */
      public long getWeekFeeSum() {
        return instance.getWeekFeeSum();
      }
      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
       * </pre>
       *
       * <code>optional uint64 week_fee_sum = 3;</code>
       */
      public Builder setWeekFeeSum(long value) {
        copyOnWrite();
        instance.setWeekFeeSum(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
       * </pre>
       *
       * <code>optional uint64 week_fee_sum = 3;</code>
       */
      public Builder clearWeekFeeSum() {
        copyOnWrite();
        instance.clearWeekFeeSum();
        return this;
      }

      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
       * </pre>
       *
       * <code>optional uint64 month_fee_sum = 4;</code>
       */
      public long getMonthFeeSum() {
        return instance.getMonthFeeSum();
      }
      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
       * </pre>
       *
       * <code>optional uint64 month_fee_sum = 4;</code>
       */
      public Builder setMonthFeeSum(long value) {
        copyOnWrite();
        instance.setMonthFeeSum(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
       * </pre>
       *
       * <code>optional uint64 month_fee_sum = 4;</code>
       */
      public Builder clearMonthFeeSum() {
        copyOnWrite();
        instance.clearMonthFeeSum();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.FeeReportResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.FeeReportResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          channelFees_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.FeeReportResponse other = (lnrpc.Rpc.FeeReportResponse) arg1;
          channelFees_= visitor.visitList(channelFees_, other.channelFees_);
          dayFeeSum_ = visitor.visitLong(dayFeeSum_ != 0L, dayFeeSum_,
              other.dayFeeSum_ != 0L, other.dayFeeSum_);
          weekFeeSum_ = visitor.visitLong(weekFeeSum_ != 0L, weekFeeSum_,
              other.weekFeeSum_ != 0L, other.weekFeeSum_);
          monthFeeSum_ = visitor.visitLong(monthFeeSum_ != 0L, monthFeeSum_,
              other.monthFeeSum_ != 0L, other.monthFeeSum_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!channelFees_.isModifiable()) {
                    channelFees_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(channelFees_);
                  }
                  channelFees_.add(
                      input.readMessage(lnrpc.Rpc.ChannelFeeReport.parser(), extensionRegistry));
                  break;
                }
                case 16: {

                  dayFeeSum_ = input.readUInt64();
                  break;
                }
                case 24: {

                  weekFeeSum_ = input.readUInt64();
                  break;
                }
                case 32: {

                  monthFeeSum_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.FeeReportResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.FeeReportResponse)
    private static final lnrpc.Rpc.FeeReportResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new FeeReportResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.FeeReportResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<FeeReportResponse> PARSER;

    public static com.google.protobuf.Parser<FeeReportResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PolicyUpdateRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PolicyUpdateRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>optional bool global = 1;</code>
     */
    boolean getGlobal();

    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    lnrpc.Rpc.ChannelPoint getChanPoint();

    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 3;</code>
     */
    long getBaseFeeMsat();

    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    double getFeeRate();

    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>optional uint32 time_lock_delta = 5;</code>
     */
    int getTimeLockDelta();

    public lnrpc.Rpc.PolicyUpdateRequest.ScopeCase getScopeCase();
  }
  /**
   * Protobuf type {@code lnrpc.PolicyUpdateRequest}
   */
  public  static final class PolicyUpdateRequest extends
      com.google.protobuf.GeneratedMessageLite<
          PolicyUpdateRequest, PolicyUpdateRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PolicyUpdateRequest)
      PolicyUpdateRequestOrBuilder {
    private PolicyUpdateRequest() {
    }
    private int scopeCase_ = 0;
    private java.lang.Object scope_;
    public enum ScopeCase
        implements com.google.protobuf.Internal.EnumLite {
      GLOBAL(1),
      CHAN_POINT(2),
      SCOPE_NOT_SET(0);
      private final int value;
      private ScopeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScopeCase valueOf(int value) {
        return forNumber(value);
      }

      public static ScopeCase forNumber(int value) {
        switch (value) {
          case 1: return GLOBAL;
          case 2: return CHAN_POINT;
          case 0: return SCOPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ScopeCase
    getScopeCase() {
      return ScopeCase.forNumber(
          scopeCase_);
    }

    private void clearScope() {
      scopeCase_ = 0;
      scope_ = null;
    }

    public static final int GLOBAL_FIELD_NUMBER = 1;
    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>optional bool global = 1;</code>
     */
    public boolean getGlobal() {
      if (scopeCase_ == 1) {
        return (java.lang.Boolean) scope_;
      }
      return false;
    }
    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>optional bool global = 1;</code>
     */
    private void setGlobal(boolean value) {
      scopeCase_ = 1;
      scope_ = value;
    }
    /**
     * <pre>
     *&#47; If set, then this update applies to all currently active channels.
     * </pre>
     *
     * <code>optional bool global = 1;</code>
     */
    private void clearGlobal() {
      if (scopeCase_ == 1) {
        scopeCase_ = 0;
        scope_ = null;
      }
    }

    public static final int CHAN_POINT_FIELD_NUMBER = 2;
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    public lnrpc.Rpc.ChannelPoint getChanPoint() {
      if (scopeCase_ == 2) {
         return (lnrpc.Rpc.ChannelPoint) scope_;
      }
      return lnrpc.Rpc.ChannelPoint.getDefaultInstance();
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void setChanPoint(lnrpc.Rpc.ChannelPoint value) {
      if (value == null) {
        throw new NullPointerException();
      }
      scope_ = value;
      scopeCase_ = 2;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void setChanPoint(
        lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
      scope_ = builderForValue.build();
      scopeCase_ = 2;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void mergeChanPoint(lnrpc.Rpc.ChannelPoint value) {
      if (scopeCase_ == 2 &&
          scope_ != lnrpc.Rpc.ChannelPoint.getDefaultInstance()) {
        scope_ = lnrpc.Rpc.ChannelPoint.newBuilder((lnrpc.Rpc.ChannelPoint) scope_)
            .mergeFrom(value).buildPartial();
      } else {
        scope_ = value;
      }
      scopeCase_ = 2;
    }
    /**
     * <pre>
     *&#47; If set, this update will target a specific channel.
     * </pre>
     *
     * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
     */
    private void clearChanPoint() {
      if (scopeCase_ == 2) {
        scopeCase_ = 0;
        scope_ = null;
      }
    }

    public static final int BASE_FEE_MSAT_FIELD_NUMBER = 3;
    private long baseFeeMsat_;
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 3;</code>
     */
    public long getBaseFeeMsat() {
      return baseFeeMsat_;
    }
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 3;</code>
     */
    private void setBaseFeeMsat(long value) {
      
      baseFeeMsat_ = value;
    }
    /**
     * <pre>
     *&#47; The base fee charged regardless of the number of milli-satoshis sent.
     * </pre>
     *
     * <code>optional int64 base_fee_msat = 3;</code>
     */
    private void clearBaseFeeMsat() {
      
      baseFeeMsat_ = 0L;
    }

    public static final int FEE_RATE_FIELD_NUMBER = 4;
    private double feeRate_;
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    public double getFeeRate() {
      return feeRate_;
    }
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    private void setFeeRate(double value) {
      
      feeRate_ = value;
    }
    /**
     * <pre>
     *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
     * </pre>
     *
     * <code>optional double fee_rate = 4;</code>
     */
    private void clearFeeRate() {
      
      feeRate_ = 0D;
    }

    public static final int TIME_LOCK_DELTA_FIELD_NUMBER = 5;
    private int timeLockDelta_;
    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>optional uint32 time_lock_delta = 5;</code>
     */
    public int getTimeLockDelta() {
      return timeLockDelta_;
    }
    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>optional uint32 time_lock_delta = 5;</code>
     */
    private void setTimeLockDelta(int value) {
      
      timeLockDelta_ = value;
    }
    /**
     * <pre>
     *&#47; The required timelock delta for HTLCs forwarded over the channel.
     * </pre>
     *
     * <code>optional uint32 time_lock_delta = 5;</code>
     */
    private void clearTimeLockDelta() {
      
      timeLockDelta_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (scopeCase_ == 1) {
        output.writeBool(
            1, (boolean)((java.lang.Boolean) scope_));
      }
      if (scopeCase_ == 2) {
        output.writeMessage(2, (lnrpc.Rpc.ChannelPoint) scope_);
      }
      if (baseFeeMsat_ != 0L) {
        output.writeInt64(3, baseFeeMsat_);
      }
      if (feeRate_ != 0D) {
        output.writeDouble(4, feeRate_);
      }
      if (timeLockDelta_ != 0) {
        output.writeUInt32(5, timeLockDelta_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (scopeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              1, (boolean)((java.lang.Boolean) scope_));
      }
      if (scopeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (lnrpc.Rpc.ChannelPoint) scope_);
      }
      if (baseFeeMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, baseFeeMsat_);
      }
      if (feeRate_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, feeRate_);
      }
      if (timeLockDelta_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, timeLockDelta_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PolicyUpdateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PolicyUpdateRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PolicyUpdateRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PolicyUpdateRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PolicyUpdateRequest)
        lnrpc.Rpc.PolicyUpdateRequestOrBuilder {
      // Construct using lnrpc.Rpc.PolicyUpdateRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public ScopeCase
          getScopeCase() {
        return instance.getScopeCase();
      }

      public Builder clearScope() {
        copyOnWrite();
        instance.clearScope();
        return this;
      }


      /**
       * <pre>
       *&#47; If set, then this update applies to all currently active channels.
       * </pre>
       *
       * <code>optional bool global = 1;</code>
       */
      public boolean getGlobal() {
        return instance.getGlobal();
      }
      /**
       * <pre>
       *&#47; If set, then this update applies to all currently active channels.
       * </pre>
       *
       * <code>optional bool global = 1;</code>
       */
      public Builder setGlobal(boolean value) {
        copyOnWrite();
        instance.setGlobal(value);
        return this;
      }
      /**
       * <pre>
       *&#47; If set, then this update applies to all currently active channels.
       * </pre>
       *
       * <code>optional bool global = 1;</code>
       */
      public Builder clearGlobal() {
        copyOnWrite();
        instance.clearGlobal();
        return this;
      }

      /**
       * <pre>
       *&#47; If set, this update will target a specific channel.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public lnrpc.Rpc.ChannelPoint getChanPoint() {
        return instance.getChanPoint();
      }
      /**
       * <pre>
       *&#47; If set, this update will target a specific channel.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder setChanPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.setChanPoint(value);
        return this;
      }
      /**
       * <pre>
       *&#47; If set, this update will target a specific channel.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder setChanPoint(
          lnrpc.Rpc.ChannelPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setChanPoint(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; If set, this update will target a specific channel.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder mergeChanPoint(lnrpc.Rpc.ChannelPoint value) {
        copyOnWrite();
        instance.mergeChanPoint(value);
        return this;
      }
      /**
       * <pre>
       *&#47; If set, this update will target a specific channel.
       * </pre>
       *
       * <code>optional .lnrpc.ChannelPoint chan_point = 2;</code>
       */
      public Builder clearChanPoint() {
        copyOnWrite();
        instance.clearChanPoint();
        return this;
      }

      /**
       * <pre>
       *&#47; The base fee charged regardless of the number of milli-satoshis sent.
       * </pre>
       *
       * <code>optional int64 base_fee_msat = 3;</code>
       */
      public long getBaseFeeMsat() {
        return instance.getBaseFeeMsat();
      }
      /**
       * <pre>
       *&#47; The base fee charged regardless of the number of milli-satoshis sent.
       * </pre>
       *
       * <code>optional int64 base_fee_msat = 3;</code>
       */
      public Builder setBaseFeeMsat(long value) {
        copyOnWrite();
        instance.setBaseFeeMsat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The base fee charged regardless of the number of milli-satoshis sent.
       * </pre>
       *
       * <code>optional int64 base_fee_msat = 3;</code>
       */
      public Builder clearBaseFeeMsat() {
        copyOnWrite();
        instance.clearBaseFeeMsat();
        return this;
      }

      /**
       * <pre>
       *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
       * </pre>
       *
       * <code>optional double fee_rate = 4;</code>
       */
      public double getFeeRate() {
        return instance.getFeeRate();
      }
      /**
       * <pre>
       *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
       * </pre>
       *
       * <code>optional double fee_rate = 4;</code>
       */
      public Builder setFeeRate(double value) {
        copyOnWrite();
        instance.setFeeRate(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
       * </pre>
       *
       * <code>optional double fee_rate = 4;</code>
       */
      public Builder clearFeeRate() {
        copyOnWrite();
        instance.clearFeeRate();
        return this;
      }

      /**
       * <pre>
       *&#47; The required timelock delta for HTLCs forwarded over the channel.
       * </pre>
       *
       * <code>optional uint32 time_lock_delta = 5;</code>
       */
      public int getTimeLockDelta() {
        return instance.getTimeLockDelta();
      }
      /**
       * <pre>
       *&#47; The required timelock delta for HTLCs forwarded over the channel.
       * </pre>
       *
       * <code>optional uint32 time_lock_delta = 5;</code>
       */
      public Builder setTimeLockDelta(int value) {
        copyOnWrite();
        instance.setTimeLockDelta(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The required timelock delta for HTLCs forwarded over the channel.
       * </pre>
       *
       * <code>optional uint32 time_lock_delta = 5;</code>
       */
      public Builder clearTimeLockDelta() {
        copyOnWrite();
        instance.clearTimeLockDelta();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.PolicyUpdateRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PolicyUpdateRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PolicyUpdateRequest other = (lnrpc.Rpc.PolicyUpdateRequest) arg1;
          baseFeeMsat_ = visitor.visitLong(baseFeeMsat_ != 0L, baseFeeMsat_,
              other.baseFeeMsat_ != 0L, other.baseFeeMsat_);
          feeRate_ = visitor.visitDouble(feeRate_ != 0D, feeRate_,
              other.feeRate_ != 0D, other.feeRate_);
          timeLockDelta_ = visitor.visitInt(timeLockDelta_ != 0, timeLockDelta_,
              other.timeLockDelta_ != 0, other.timeLockDelta_);
          switch (other.getScopeCase()) {
            case GLOBAL: {
              scope_ = visitor.visitOneofBoolean(
                  scopeCase_ == 1, scope_, other.scope_);
              break;
            }
            case CHAN_POINT: {
              scope_ = visitor.visitOneofMessage(
                  scopeCase_ == 2,
                  scope_,
                  other.scope_);
              break;
            }
            case SCOPE_NOT_SET: {
              visitor.visitOneofNotSet(scopeCase_ != 0);
              break;
            }
          }
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            if (other.scopeCase_ != 0) {
              scopeCase_ = other.scopeCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  scopeCase_ = 1;
                  scope_ = input.readBool();
                  break;
                }
                case 18: {
                  lnrpc.Rpc.ChannelPoint.Builder subBuilder = null;
                  if (scopeCase_ == 2) {
                    subBuilder = ((lnrpc.Rpc.ChannelPoint) scope_).toBuilder();
                  }
                  scope_ =
                       input.readMessage(lnrpc.Rpc.ChannelPoint.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom((lnrpc.Rpc.ChannelPoint) scope_);
                    scope_ = subBuilder.buildPartial();
                  }
                  scopeCase_ = 2;
                  break;
                }
                case 24: {

                  baseFeeMsat_ = input.readInt64();
                  break;
                }
                case 33: {

                  feeRate_ = input.readDouble();
                  break;
                }
                case 40: {

                  timeLockDelta_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PolicyUpdateRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PolicyUpdateRequest)
    private static final lnrpc.Rpc.PolicyUpdateRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PolicyUpdateRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PolicyUpdateRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PolicyUpdateRequest> PARSER;

    public static com.google.protobuf.Parser<PolicyUpdateRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PolicyUpdateResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.PolicyUpdateResponse)
      com.google.protobuf.MessageLiteOrBuilder {
  }
  /**
   * Protobuf type {@code lnrpc.PolicyUpdateResponse}
   */
  public  static final class PolicyUpdateResponse extends
      com.google.protobuf.GeneratedMessageLite<
          PolicyUpdateResponse, PolicyUpdateResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.PolicyUpdateResponse)
      PolicyUpdateResponseOrBuilder {
    private PolicyUpdateResponse() {
    }
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.PolicyUpdateResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.PolicyUpdateResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.PolicyUpdateResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.PolicyUpdateResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.PolicyUpdateResponse)
        lnrpc.Rpc.PolicyUpdateResponseOrBuilder {
      // Construct using lnrpc.Rpc.PolicyUpdateResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      // @@protoc_insertion_point(builder_scope:lnrpc.PolicyUpdateResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.PolicyUpdateResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.PolicyUpdateResponse other = (lnrpc.Rpc.PolicyUpdateResponse) arg1;
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.PolicyUpdateResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.PolicyUpdateResponse)
    private static final lnrpc.Rpc.PolicyUpdateResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new PolicyUpdateResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.PolicyUpdateResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PolicyUpdateResponse> PARSER;

    public static com.google.protobuf.Parser<PolicyUpdateResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForwardingHistoryRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ForwardingHistoryRequest)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
     * </pre>
     *
     * <code>optional uint64 start_time = 1;</code>
     */
    long getStartTime();

    /**
     * <pre>
     *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
     * </pre>
     *
     * <code>optional uint64 end_time = 2;</code>
     */
    long getEndTime();

    /**
     * <pre>
     *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
     * </pre>
     *
     * <code>optional uint32 index_offset = 3;</code>
     */
    int getIndexOffset();

    /**
     * <pre>
     *&#47; The max number of events to return in the response to this query.
     * </pre>
     *
     * <code>optional uint32 num_max_events = 4;</code>
     */
    int getNumMaxEvents();
  }
  /**
   * Protobuf type {@code lnrpc.ForwardingHistoryRequest}
   */
  public  static final class ForwardingHistoryRequest extends
      com.google.protobuf.GeneratedMessageLite<
          ForwardingHistoryRequest, ForwardingHistoryRequest.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ForwardingHistoryRequest)
      ForwardingHistoryRequestOrBuilder {
    private ForwardingHistoryRequest() {
    }
    public static final int START_TIME_FIELD_NUMBER = 1;
    private long startTime_;
    /**
     * <pre>
     *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
     * </pre>
     *
     * <code>optional uint64 start_time = 1;</code>
     */
    public long getStartTime() {
      return startTime_;
    }
    /**
     * <pre>
     *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
     * </pre>
     *
     * <code>optional uint64 start_time = 1;</code>
     */
    private void setStartTime(long value) {
      
      startTime_ = value;
    }
    /**
     * <pre>
     *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
     * </pre>
     *
     * <code>optional uint64 start_time = 1;</code>
     */
    private void clearStartTime() {
      
      startTime_ = 0L;
    }

    public static final int END_TIME_FIELD_NUMBER = 2;
    private long endTime_;
    /**
     * <pre>
     *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
     * </pre>
     *
     * <code>optional uint64 end_time = 2;</code>
     */
    public long getEndTime() {
      return endTime_;
    }
    /**
     * <pre>
     *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
     * </pre>
     *
     * <code>optional uint64 end_time = 2;</code>
     */
    private void setEndTime(long value) {
      
      endTime_ = value;
    }
    /**
     * <pre>
     *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
     * </pre>
     *
     * <code>optional uint64 end_time = 2;</code>
     */
    private void clearEndTime() {
      
      endTime_ = 0L;
    }

    public static final int INDEX_OFFSET_FIELD_NUMBER = 3;
    private int indexOffset_;
    /**
     * <pre>
     *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
     * </pre>
     *
     * <code>optional uint32 index_offset = 3;</code>
     */
    public int getIndexOffset() {
      return indexOffset_;
    }
    /**
     * <pre>
     *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
     * </pre>
     *
     * <code>optional uint32 index_offset = 3;</code>
     */
    private void setIndexOffset(int value) {
      
      indexOffset_ = value;
    }
    /**
     * <pre>
     *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
     * </pre>
     *
     * <code>optional uint32 index_offset = 3;</code>
     */
    private void clearIndexOffset() {
      
      indexOffset_ = 0;
    }

    public static final int NUM_MAX_EVENTS_FIELD_NUMBER = 4;
    private int numMaxEvents_;
    /**
     * <pre>
     *&#47; The max number of events to return in the response to this query.
     * </pre>
     *
     * <code>optional uint32 num_max_events = 4;</code>
     */
    public int getNumMaxEvents() {
      return numMaxEvents_;
    }
    /**
     * <pre>
     *&#47; The max number of events to return in the response to this query.
     * </pre>
     *
     * <code>optional uint32 num_max_events = 4;</code>
     */
    private void setNumMaxEvents(int value) {
      
      numMaxEvents_ = value;
    }
    /**
     * <pre>
     *&#47; The max number of events to return in the response to this query.
     * </pre>
     *
     * <code>optional uint32 num_max_events = 4;</code>
     */
    private void clearNumMaxEvents() {
      
      numMaxEvents_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (startTime_ != 0L) {
        output.writeUInt64(1, startTime_);
      }
      if (endTime_ != 0L) {
        output.writeUInt64(2, endTime_);
      }
      if (indexOffset_ != 0) {
        output.writeUInt32(3, indexOffset_);
      }
      if (numMaxEvents_ != 0) {
        output.writeUInt32(4, numMaxEvents_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (startTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, startTime_);
      }
      if (endTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, endTime_);
      }
      if (indexOffset_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, indexOffset_);
      }
      if (numMaxEvents_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, numMaxEvents_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingHistoryRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ForwardingHistoryRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ForwardingHistoryRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ForwardingHistoryRequest, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ForwardingHistoryRequest)
        lnrpc.Rpc.ForwardingHistoryRequestOrBuilder {
      // Construct using lnrpc.Rpc.ForwardingHistoryRequest.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
       * </pre>
       *
       * <code>optional uint64 start_time = 1;</code>
       */
      public long getStartTime() {
        return instance.getStartTime();
      }
      /**
       * <pre>
       *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
       * </pre>
       *
       * <code>optional uint64 start_time = 1;</code>
       */
      public Builder setStartTime(long value) {
        copyOnWrite();
        instance.setStartTime(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
       * </pre>
       *
       * <code>optional uint64 start_time = 1;</code>
       */
      public Builder clearStartTime() {
        copyOnWrite();
        instance.clearStartTime();
        return this;
      }

      /**
       * <pre>
       *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
       * </pre>
       *
       * <code>optional uint64 end_time = 2;</code>
       */
      public long getEndTime() {
        return instance.getEndTime();
      }
      /**
       * <pre>
       *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
       * </pre>
       *
       * <code>optional uint64 end_time = 2;</code>
       */
      public Builder setEndTime(long value) {
        copyOnWrite();
        instance.setEndTime(value);
        return this;
      }
      /**
       * <pre>
       *&#47; End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
       * </pre>
       *
       * <code>optional uint64 end_time = 2;</code>
       */
      public Builder clearEndTime() {
        copyOnWrite();
        instance.clearEndTime();
        return this;
      }

      /**
       * <pre>
       *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
       * </pre>
       *
       * <code>optional uint32 index_offset = 3;</code>
       */
      public int getIndexOffset() {
        return instance.getIndexOffset();
      }
      /**
       * <pre>
       *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
       * </pre>
       *
       * <code>optional uint32 index_offset = 3;</code>
       */
      public Builder setIndexOffset(int value) {
        copyOnWrite();
        instance.setIndexOffset(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
       * </pre>
       *
       * <code>optional uint32 index_offset = 3;</code>
       */
      public Builder clearIndexOffset() {
        copyOnWrite();
        instance.clearIndexOffset();
        return this;
      }

      /**
       * <pre>
       *&#47; The max number of events to return in the response to this query.
       * </pre>
       *
       * <code>optional uint32 num_max_events = 4;</code>
       */
      public int getNumMaxEvents() {
        return instance.getNumMaxEvents();
      }
      /**
       * <pre>
       *&#47; The max number of events to return in the response to this query.
       * </pre>
       *
       * <code>optional uint32 num_max_events = 4;</code>
       */
      public Builder setNumMaxEvents(int value) {
        copyOnWrite();
        instance.setNumMaxEvents(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The max number of events to return in the response to this query.
       * </pre>
       *
       * <code>optional uint32 num_max_events = 4;</code>
       */
      public Builder clearNumMaxEvents() {
        copyOnWrite();
        instance.clearNumMaxEvents();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ForwardingHistoryRequest)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ForwardingHistoryRequest();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ForwardingHistoryRequest other = (lnrpc.Rpc.ForwardingHistoryRequest) arg1;
          startTime_ = visitor.visitLong(startTime_ != 0L, startTime_,
              other.startTime_ != 0L, other.startTime_);
          endTime_ = visitor.visitLong(endTime_ != 0L, endTime_,
              other.endTime_ != 0L, other.endTime_);
          indexOffset_ = visitor.visitInt(indexOffset_ != 0, indexOffset_,
              other.indexOffset_ != 0, other.indexOffset_);
          numMaxEvents_ = visitor.visitInt(numMaxEvents_ != 0, numMaxEvents_,
              other.numMaxEvents_ != 0, other.numMaxEvents_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  startTime_ = input.readUInt64();
                  break;
                }
                case 16: {

                  endTime_ = input.readUInt64();
                  break;
                }
                case 24: {

                  indexOffset_ = input.readUInt32();
                  break;
                }
                case 32: {

                  numMaxEvents_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ForwardingHistoryRequest.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ForwardingHistoryRequest)
    private static final lnrpc.Rpc.ForwardingHistoryRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ForwardingHistoryRequest();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ForwardingHistoryRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ForwardingHistoryRequest> PARSER;

    public static com.google.protobuf.Parser<ForwardingHistoryRequest> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForwardingEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ForwardingEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    long getTimestamp();

    /**
     * <pre>
     *&#47; The incoming channel ID that carried the HTLC that created the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_in = 2;</code>
     */
    long getChanIdIn();

    /**
     * <pre>
     *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_out = 4;</code>
     */
    long getChanIdOut();

    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_in = 5;</code>
     */
    long getAmtIn();

    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_out = 6;</code>
     */
    long getAmtOut();

    /**
     * <pre>
     *&#47; The total fee (in satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee = 7;</code>
     */
    long getFee();

    /**
     * <pre>
     *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee_msat = 8;</code>
     */
    long getFeeMsat();
  }
  /**
   * Protobuf type {@code lnrpc.ForwardingEvent}
   */
  public  static final class ForwardingEvent extends
      com.google.protobuf.GeneratedMessageLite<
          ForwardingEvent, ForwardingEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ForwardingEvent)
      ForwardingEventOrBuilder {
    private ForwardingEvent() {
    }
    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }
    /**
     * <pre>
     *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    private void setTimestamp(long value) {
      
      timestamp_ = value;
    }
    /**
     * <pre>
     *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    private void clearTimestamp() {
      
      timestamp_ = 0L;
    }

    public static final int CHAN_ID_IN_FIELD_NUMBER = 2;
    private long chanIdIn_;
    /**
     * <pre>
     *&#47; The incoming channel ID that carried the HTLC that created the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_in = 2;</code>
     */
    public long getChanIdIn() {
      return chanIdIn_;
    }
    /**
     * <pre>
     *&#47; The incoming channel ID that carried the HTLC that created the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_in = 2;</code>
     */
    private void setChanIdIn(long value) {
      
      chanIdIn_ = value;
    }
    /**
     * <pre>
     *&#47; The incoming channel ID that carried the HTLC that created the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_in = 2;</code>
     */
    private void clearChanIdIn() {
      
      chanIdIn_ = 0L;
    }

    public static final int CHAN_ID_OUT_FIELD_NUMBER = 4;
    private long chanIdOut_;
    /**
     * <pre>
     *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_out = 4;</code>
     */
    public long getChanIdOut() {
      return chanIdOut_;
    }
    /**
     * <pre>
     *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_out = 4;</code>
     */
    private void setChanIdOut(long value) {
      
      chanIdOut_ = value;
    }
    /**
     * <pre>
     *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
     * </pre>
     *
     * <code>optional uint64 chan_id_out = 4;</code>
     */
    private void clearChanIdOut() {
      
      chanIdOut_ = 0L;
    }

    public static final int AMT_IN_FIELD_NUMBER = 5;
    private long amtIn_;
    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_in = 5;</code>
     */
    public long getAmtIn() {
      return amtIn_;
    }
    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_in = 5;</code>
     */
    private void setAmtIn(long value) {
      
      amtIn_ = value;
    }
    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_in = 5;</code>
     */
    private void clearAmtIn() {
      
      amtIn_ = 0L;
    }

    public static final int AMT_OUT_FIELD_NUMBER = 6;
    private long amtOut_;
    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_out = 6;</code>
     */
    public long getAmtOut() {
      return amtOut_;
    }
    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_out = 6;</code>
     */
    private void setAmtOut(long value) {
      
      amtOut_ = value;
    }
    /**
     * <pre>
     *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
     * </pre>
     *
     * <code>optional uint64 amt_out = 6;</code>
     */
    private void clearAmtOut() {
      
      amtOut_ = 0L;
    }

    public static final int FEE_FIELD_NUMBER = 7;
    private long fee_;
    /**
     * <pre>
     *&#47; The total fee (in satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee = 7;</code>
     */
    public long getFee() {
      return fee_;
    }
    /**
     * <pre>
     *&#47; The total fee (in satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee = 7;</code>
     */
    private void setFee(long value) {
      
      fee_ = value;
    }
    /**
     * <pre>
     *&#47; The total fee (in satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee = 7;</code>
     */
    private void clearFee() {
      
      fee_ = 0L;
    }

    public static final int FEE_MSAT_FIELD_NUMBER = 8;
    private long feeMsat_;
    /**
     * <pre>
     *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee_msat = 8;</code>
     */
    public long getFeeMsat() {
      return feeMsat_;
    }
    /**
     * <pre>
     *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee_msat = 8;</code>
     */
    private void setFeeMsat(long value) {
      
      feeMsat_ = value;
    }
    /**
     * <pre>
     *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
     * </pre>
     *
     * <code>optional uint64 fee_msat = 8;</code>
     */
    private void clearFeeMsat() {
      
      feeMsat_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (chanIdIn_ != 0L) {
        output.writeUInt64(2, chanIdIn_);
      }
      if (chanIdOut_ != 0L) {
        output.writeUInt64(4, chanIdOut_);
      }
      if (amtIn_ != 0L) {
        output.writeUInt64(5, amtIn_);
      }
      if (amtOut_ != 0L) {
        output.writeUInt64(6, amtOut_);
      }
      if (fee_ != 0L) {
        output.writeUInt64(7, fee_);
      }
      if (feeMsat_ != 0L) {
        output.writeUInt64(8, feeMsat_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (chanIdIn_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, chanIdIn_);
      }
      if (chanIdOut_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, chanIdOut_);
      }
      if (amtIn_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, amtIn_);
      }
      if (amtOut_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, amtOut_);
      }
      if (fee_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, fee_);
      }
      if (feeMsat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(8, feeMsat_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ForwardingEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ForwardingEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ForwardingEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ForwardingEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ForwardingEvent)
        lnrpc.Rpc.ForwardingEventOrBuilder {
      // Construct using lnrpc.Rpc.ForwardingEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public long getTimestamp() {
        return instance.getTimestamp();
      }
      /**
       * <pre>
       *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder setTimestamp(long value) {
        copyOnWrite();
        instance.setTimestamp(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Timestamp is the time (unix epoch offset) that this circuit was completed.
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        copyOnWrite();
        instance.clearTimestamp();
        return this;
      }

      /**
       * <pre>
       *&#47; The incoming channel ID that carried the HTLC that created the circuit.
       * </pre>
       *
       * <code>optional uint64 chan_id_in = 2;</code>
       */
      public long getChanIdIn() {
        return instance.getChanIdIn();
      }
      /**
       * <pre>
       *&#47; The incoming channel ID that carried the HTLC that created the circuit.
       * </pre>
       *
       * <code>optional uint64 chan_id_in = 2;</code>
       */
      public Builder setChanIdIn(long value) {
        copyOnWrite();
        instance.setChanIdIn(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The incoming channel ID that carried the HTLC that created the circuit.
       * </pre>
       *
       * <code>optional uint64 chan_id_in = 2;</code>
       */
      public Builder clearChanIdIn() {
        copyOnWrite();
        instance.clearChanIdIn();
        return this;
      }

      /**
       * <pre>
       *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
       * </pre>
       *
       * <code>optional uint64 chan_id_out = 4;</code>
       */
      public long getChanIdOut() {
        return instance.getChanIdOut();
      }
      /**
       * <pre>
       *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
       * </pre>
       *
       * <code>optional uint64 chan_id_out = 4;</code>
       */
      public Builder setChanIdOut(long value) {
        copyOnWrite();
        instance.setChanIdOut(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The outgoing channel ID that carried the preimage that completed the circuit.
       * </pre>
       *
       * <code>optional uint64 chan_id_out = 4;</code>
       */
      public Builder clearChanIdOut() {
        copyOnWrite();
        instance.clearChanIdOut();
        return this;
      }

      /**
       * <pre>
       *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
       * </pre>
       *
       * <code>optional uint64 amt_in = 5;</code>
       */
      public long getAmtIn() {
        return instance.getAmtIn();
      }
      /**
       * <pre>
       *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
       * </pre>
       *
       * <code>optional uint64 amt_in = 5;</code>
       */
      public Builder setAmtIn(long value) {
        copyOnWrite();
        instance.setAmtIn(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total amount (in satoshis) of the incoming HTLC that created half the circuit.
       * </pre>
       *
       * <code>optional uint64 amt_in = 5;</code>
       */
      public Builder clearAmtIn() {
        copyOnWrite();
        instance.clearAmtIn();
        return this;
      }

      /**
       * <pre>
       *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
       * </pre>
       *
       * <code>optional uint64 amt_out = 6;</code>
       */
      public long getAmtOut() {
        return instance.getAmtOut();
      }
      /**
       * <pre>
       *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
       * </pre>
       *
       * <code>optional uint64 amt_out = 6;</code>
       */
      public Builder setAmtOut(long value) {
        copyOnWrite();
        instance.setAmtOut(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
       * </pre>
       *
       * <code>optional uint64 amt_out = 6;</code>
       */
      public Builder clearAmtOut() {
        copyOnWrite();
        instance.clearAmtOut();
        return this;
      }

      /**
       * <pre>
       *&#47; The total fee (in satoshis) that this payment circuit carried.
       * </pre>
       *
       * <code>optional uint64 fee = 7;</code>
       */
      public long getFee() {
        return instance.getFee();
      }
      /**
       * <pre>
       *&#47; The total fee (in satoshis) that this payment circuit carried.
       * </pre>
       *
       * <code>optional uint64 fee = 7;</code>
       */
      public Builder setFee(long value) {
        copyOnWrite();
        instance.setFee(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total fee (in satoshis) that this payment circuit carried.
       * </pre>
       *
       * <code>optional uint64 fee = 7;</code>
       */
      public Builder clearFee() {
        copyOnWrite();
        instance.clearFee();
        return this;
      }

      /**
       * <pre>
       *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
       * </pre>
       *
       * <code>optional uint64 fee_msat = 8;</code>
       */
      public long getFeeMsat() {
        return instance.getFeeMsat();
      }
      /**
       * <pre>
       *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
       * </pre>
       *
       * <code>optional uint64 fee_msat = 8;</code>
       */
      public Builder setFeeMsat(long value) {
        copyOnWrite();
        instance.setFeeMsat(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The total fee (in milli-satoshis) that this payment circuit carried.
       * </pre>
       *
       * <code>optional uint64 fee_msat = 8;</code>
       */
      public Builder clearFeeMsat() {
        copyOnWrite();
        instance.clearFeeMsat();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ForwardingEvent)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ForwardingEvent();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ForwardingEvent other = (lnrpc.Rpc.ForwardingEvent) arg1;
          timestamp_ = visitor.visitLong(timestamp_ != 0L, timestamp_,
              other.timestamp_ != 0L, other.timestamp_);
          chanIdIn_ = visitor.visitLong(chanIdIn_ != 0L, chanIdIn_,
              other.chanIdIn_ != 0L, other.chanIdIn_);
          chanIdOut_ = visitor.visitLong(chanIdOut_ != 0L, chanIdOut_,
              other.chanIdOut_ != 0L, other.chanIdOut_);
          amtIn_ = visitor.visitLong(amtIn_ != 0L, amtIn_,
              other.amtIn_ != 0L, other.amtIn_);
          amtOut_ = visitor.visitLong(amtOut_ != 0L, amtOut_,
              other.amtOut_ != 0L, other.amtOut_);
          fee_ = visitor.visitLong(fee_ != 0L, fee_,
              other.fee_ != 0L, other.fee_);
          feeMsat_ = visitor.visitLong(feeMsat_ != 0L, feeMsat_,
              other.feeMsat_ != 0L, other.feeMsat_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {

                  timestamp_ = input.readUInt64();
                  break;
                }
                case 16: {

                  chanIdIn_ = input.readUInt64();
                  break;
                }
                case 32: {

                  chanIdOut_ = input.readUInt64();
                  break;
                }
                case 40: {

                  amtIn_ = input.readUInt64();
                  break;
                }
                case 48: {

                  amtOut_ = input.readUInt64();
                  break;
                }
                case 56: {

                  fee_ = input.readUInt64();
                  break;
                }
                case 64: {

                  feeMsat_ = input.readUInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ForwardingEvent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ForwardingEvent)
    private static final lnrpc.Rpc.ForwardingEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ForwardingEvent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ForwardingEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ForwardingEvent> PARSER;

    public static com.google.protobuf.Parser<ForwardingEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ForwardingHistoryResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:lnrpc.ForwardingHistoryResponse)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    java.util.List<lnrpc.Rpc.ForwardingEvent> 
        getForwardingEventsList();
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    lnrpc.Rpc.ForwardingEvent getForwardingEvents(int index);
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    int getForwardingEventsCount();

    /**
     * <pre>
     *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint32 last_offset_index = 2;</code>
     */
    int getLastOffsetIndex();
  }
  /**
   * Protobuf type {@code lnrpc.ForwardingHistoryResponse}
   */
  public  static final class ForwardingHistoryResponse extends
      com.google.protobuf.GeneratedMessageLite<
          ForwardingHistoryResponse, ForwardingHistoryResponse.Builder> implements
      // @@protoc_insertion_point(message_implements:lnrpc.ForwardingHistoryResponse)
      ForwardingHistoryResponseOrBuilder {
    private ForwardingHistoryResponse() {
      forwardingEvents_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int FORWARDING_EVENTS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<lnrpc.Rpc.ForwardingEvent> forwardingEvents_;
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    public java.util.List<lnrpc.Rpc.ForwardingEvent> getForwardingEventsList() {
      return forwardingEvents_;
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    public java.util.List<? extends lnrpc.Rpc.ForwardingEventOrBuilder> 
        getForwardingEventsOrBuilderList() {
      return forwardingEvents_;
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    public int getForwardingEventsCount() {
      return forwardingEvents_.size();
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    public lnrpc.Rpc.ForwardingEvent getForwardingEvents(int index) {
      return forwardingEvents_.get(index);
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    public lnrpc.Rpc.ForwardingEventOrBuilder getForwardingEventsOrBuilder(
        int index) {
      return forwardingEvents_.get(index);
    }
    private void ensureForwardingEventsIsMutable() {
      if (!forwardingEvents_.isModifiable()) {
        forwardingEvents_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(forwardingEvents_);
       }
    }

    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void setForwardingEvents(
        int index, lnrpc.Rpc.ForwardingEvent value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureForwardingEventsIsMutable();
      forwardingEvents_.set(index, value);
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void setForwardingEvents(
        int index, lnrpc.Rpc.ForwardingEvent.Builder builderForValue) {
      ensureForwardingEventsIsMutable();
      forwardingEvents_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void addForwardingEvents(lnrpc.Rpc.ForwardingEvent value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureForwardingEventsIsMutable();
      forwardingEvents_.add(value);
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void addForwardingEvents(
        int index, lnrpc.Rpc.ForwardingEvent value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureForwardingEventsIsMutable();
      forwardingEvents_.add(index, value);
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void addForwardingEvents(
        lnrpc.Rpc.ForwardingEvent.Builder builderForValue) {
      ensureForwardingEventsIsMutable();
      forwardingEvents_.add(builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void addForwardingEvents(
        int index, lnrpc.Rpc.ForwardingEvent.Builder builderForValue) {
      ensureForwardingEventsIsMutable();
      forwardingEvents_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void addAllForwardingEvents(
        java.lang.Iterable<? extends lnrpc.Rpc.ForwardingEvent> values) {
      ensureForwardingEventsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, forwardingEvents_);
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void clearForwardingEvents() {
      forwardingEvents_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; A list of forwarding events from the time slice of the time series specified in the request.
     * </pre>
     *
     * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
     */
    private void removeForwardingEvents(int index) {
      ensureForwardingEventsIsMutable();
      forwardingEvents_.remove(index);
    }

    public static final int LAST_OFFSET_INDEX_FIELD_NUMBER = 2;
    private int lastOffsetIndex_;
    /**
     * <pre>
     *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint32 last_offset_index = 2;</code>
     */
    public int getLastOffsetIndex() {
      return lastOffsetIndex_;
    }
    /**
     * <pre>
     *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint32 last_offset_index = 2;</code>
     */
    private void setLastOffsetIndex(int value) {
      
      lastOffsetIndex_ = value;
    }
    /**
     * <pre>
     *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
     * </pre>
     *
     * <code>optional uint32 last_offset_index = 2;</code>
     */
    private void clearLastOffsetIndex() {
      
      lastOffsetIndex_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < forwardingEvents_.size(); i++) {
        output.writeMessage(1, forwardingEvents_.get(i));
      }
      if (lastOffsetIndex_ != 0) {
        output.writeUInt32(2, lastOffsetIndex_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < forwardingEvents_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, forwardingEvents_.get(i));
      }
      if (lastOffsetIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, lastOffsetIndex_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static lnrpc.Rpc.ForwardingHistoryResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(lnrpc.Rpc.ForwardingHistoryResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code lnrpc.ForwardingHistoryResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          lnrpc.Rpc.ForwardingHistoryResponse, Builder> implements
        // @@protoc_insertion_point(builder_implements:lnrpc.ForwardingHistoryResponse)
        lnrpc.Rpc.ForwardingHistoryResponseOrBuilder {
      // Construct using lnrpc.Rpc.ForwardingHistoryResponse.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public java.util.List<lnrpc.Rpc.ForwardingEvent> getForwardingEventsList() {
        return java.util.Collections.unmodifiableList(
            instance.getForwardingEventsList());
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public int getForwardingEventsCount() {
        return instance.getForwardingEventsCount();
      }/**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public lnrpc.Rpc.ForwardingEvent getForwardingEvents(int index) {
        return instance.getForwardingEvents(index);
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder setForwardingEvents(
          int index, lnrpc.Rpc.ForwardingEvent value) {
        copyOnWrite();
        instance.setForwardingEvents(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder setForwardingEvents(
          int index, lnrpc.Rpc.ForwardingEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setForwardingEvents(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder addForwardingEvents(lnrpc.Rpc.ForwardingEvent value) {
        copyOnWrite();
        instance.addForwardingEvents(value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder addForwardingEvents(
          int index, lnrpc.Rpc.ForwardingEvent value) {
        copyOnWrite();
        instance.addForwardingEvents(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder addForwardingEvents(
          lnrpc.Rpc.ForwardingEvent.Builder builderForValue) {
        copyOnWrite();
        instance.addForwardingEvents(builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder addForwardingEvents(
          int index, lnrpc.Rpc.ForwardingEvent.Builder builderForValue) {
        copyOnWrite();
        instance.addForwardingEvents(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder addAllForwardingEvents(
          java.lang.Iterable<? extends lnrpc.Rpc.ForwardingEvent> values) {
        copyOnWrite();
        instance.addAllForwardingEvents(values);
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder clearForwardingEvents() {
        copyOnWrite();
        instance.clearForwardingEvents();
        return this;
      }
      /**
       * <pre>
       *&#47; A list of forwarding events from the time slice of the time series specified in the request.
       * </pre>
       *
       * <code>repeated .lnrpc.ForwardingEvent forwarding_events = 1;</code>
       */
      public Builder removeForwardingEvents(int index) {
        copyOnWrite();
        instance.removeForwardingEvents(index);
        return this;
      }

      /**
       * <pre>
       *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
       * </pre>
       *
       * <code>optional uint32 last_offset_index = 2;</code>
       */
      public int getLastOffsetIndex() {
        return instance.getLastOffsetIndex();
      }
      /**
       * <pre>
       *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
       * </pre>
       *
       * <code>optional uint32 last_offset_index = 2;</code>
       */
      public Builder setLastOffsetIndex(int value) {
        copyOnWrite();
        instance.setLastOffsetIndex(value);
        return this;
      }
      /**
       * <pre>
       *&#47; The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
       * </pre>
       *
       * <code>optional uint32 last_offset_index = 2;</code>
       */
      public Builder clearLastOffsetIndex() {
        copyOnWrite();
        instance.clearLastOffsetIndex();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:lnrpc.ForwardingHistoryResponse)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new lnrpc.Rpc.ForwardingHistoryResponse();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          forwardingEvents_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          lnrpc.Rpc.ForwardingHistoryResponse other = (lnrpc.Rpc.ForwardingHistoryResponse) arg1;
          forwardingEvents_= visitor.visitList(forwardingEvents_, other.forwardingEvents_);
          lastOffsetIndex_ = visitor.visitInt(lastOffsetIndex_ != 0, lastOffsetIndex_,
              other.lastOffsetIndex_ != 0, other.lastOffsetIndex_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!forwardingEvents_.isModifiable()) {
                    forwardingEvents_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(forwardingEvents_);
                  }
                  forwardingEvents_.add(
                      input.readMessage(lnrpc.Rpc.ForwardingEvent.parser(), extensionRegistry));
                  break;
                }
                case 16: {

                  lastOffsetIndex_ = input.readUInt32();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (lnrpc.Rpc.ForwardingHistoryResponse.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:lnrpc.ForwardingHistoryResponse)
    private static final lnrpc.Rpc.ForwardingHistoryResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ForwardingHistoryResponse();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static lnrpc.Rpc.ForwardingHistoryResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ForwardingHistoryResponse> PARSER;

    public static com.google.protobuf.Parser<ForwardingHistoryResponse> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
